
AD9833FunctionGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fe  00800100  000074cc  00007560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000074cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020b  008003fe  008003fe  0000785e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000785e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009f8  00000000  00000000  000078d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013423  00000000  00000000  000082c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d0c  00000000  00000000  0001b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ab7  00000000  00000000  0001e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002bb8  00000000  00000000  00024eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004eee  00000000  00000000  00027a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e2a  00000000  00000000  0002c956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  00033780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__ctors_end>
       4:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_1>
       8:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_2>
       c:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_3>
      10:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_4>
      14:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__vector_5>
      18:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      1c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      20:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      24:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      28:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      2c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      30:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      34:	0c 94 e9 34 	jmp	0x69d2	; 0x69d2 <__vector_13>
      38:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      3c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      40:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__vector_16>
      44:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      48:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__vector_18>
      4c:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__vector_19>
      50:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      54:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_21>
      58:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      5c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      60:	0c 94 53 38 	jmp	0x70a6	; 0x70a6 <__vector_24>
      64:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__bad_interrupt>
      68:	90 39       	cpi	r25, 0x90	; 144
      6a:	96 39       	cpi	r25, 0x96	; 150
      6c:	96 39       	cpi	r25, 0x96	; 150
      6e:	96 39       	cpi	r25, 0x96	; 150
      70:	96 39       	cpi	r25, 0x96	; 150
      72:	96 39       	cpi	r25, 0x96	; 150
      74:	96 39       	cpi	r25, 0x96	; 150
      76:	96 39       	cpi	r25, 0x96	; 150
      78:	84 38       	cpi	r24, 0x84	; 132
      7a:	96 39       	cpi	r25, 0x96	; 150
      7c:	96 39       	cpi	r25, 0x96	; 150
      7e:	96 39       	cpi	r25, 0x96	; 150
      80:	96 39       	cpi	r25, 0x96	; 150
      82:	96 39       	cpi	r25, 0x96	; 150
      84:	96 39       	cpi	r25, 0x96	; 150
      86:	96 39       	cpi	r25, 0x96	; 150
      88:	84 38       	cpi	r24, 0x84	; 132
      8a:	96 39       	cpi	r25, 0x96	; 150
      8c:	96 39       	cpi	r25, 0x96	; 150
      8e:	96 39       	cpi	r25, 0x96	; 150
      90:	96 39       	cpi	r25, 0x96	; 150
      92:	96 39       	cpi	r25, 0x96	; 150
      94:	96 39       	cpi	r25, 0x96	; 150
      96:	96 39       	cpi	r25, 0x96	; 150
      98:	8e 38       	cpi	r24, 0x8E	; 142
      9a:	96 39       	cpi	r25, 0x96	; 150
      9c:	96 39       	cpi	r25, 0x96	; 150
      9e:	96 39       	cpi	r25, 0x96	; 150
      a0:	96 39       	cpi	r25, 0x96	; 150
      a2:	96 39       	cpi	r25, 0x96	; 150
      a4:	96 39       	cpi	r25, 0x96	; 150
      a6:	96 39       	cpi	r25, 0x96	; 150
      a8:	ba 38       	cpi	r27, 0x8A	; 138
      aa:	96 39       	cpi	r25, 0x96	; 150
      ac:	96 39       	cpi	r25, 0x96	; 150
      ae:	96 39       	cpi	r25, 0x96	; 150
      b0:	96 39       	cpi	r25, 0x96	; 150
      b2:	96 39       	cpi	r25, 0x96	; 150
      b4:	96 39       	cpi	r25, 0x96	; 150
      b6:	96 39       	cpi	r25, 0x96	; 150
      b8:	8e 38       	cpi	r24, 0x8E	; 142
      ba:	96 39       	cpi	r25, 0x96	; 150
      bc:	96 39       	cpi	r25, 0x96	; 150
      be:	96 39       	cpi	r25, 0x96	; 150
      c0:	96 39       	cpi	r25, 0x96	; 150
      c2:	96 39       	cpi	r25, 0x96	; 150
      c4:	96 39       	cpi	r25, 0x96	; 150
      c6:	96 39       	cpi	r25, 0x96	; 150
      c8:	c0 38       	cpi	r28, 0x80	; 128
      ca:	96 39       	cpi	r25, 0x96	; 150
      cc:	96 39       	cpi	r25, 0x96	; 150
      ce:	96 39       	cpi	r25, 0x96	; 150
      d0:	96 39       	cpi	r25, 0x96	; 150
      d2:	96 39       	cpi	r25, 0x96	; 150
      d4:	96 39       	cpi	r25, 0x96	; 150
      d6:	96 39       	cpi	r25, 0x96	; 150
      d8:	c6 38       	cpi	r28, 0x86	; 134
      da:	96 39       	cpi	r25, 0x96	; 150
      dc:	96 39       	cpi	r25, 0x96	; 150
      de:	96 39       	cpi	r25, 0x96	; 150
      e0:	96 39       	cpi	r25, 0x96	; 150
      e2:	96 39       	cpi	r25, 0x96	; 150
      e4:	96 39       	cpi	r25, 0x96	; 150
      e6:	96 39       	cpi	r25, 0x96	; 150
      e8:	dc 38       	cpi	r29, 0x8C	; 140
      ea:	96 39       	cpi	r25, 0x96	; 150
      ec:	96 39       	cpi	r25, 0x96	; 150
      ee:	96 39       	cpi	r25, 0x96	; 150
      f0:	96 39       	cpi	r25, 0x96	; 150
      f2:	96 39       	cpi	r25, 0x96	; 150
      f4:	96 39       	cpi	r25, 0x96	; 150
      f6:	96 39       	cpi	r25, 0x96	; 150
      f8:	0c 39       	cpi	r16, 0x9C	; 156
      fa:	96 39       	cpi	r25, 0x96	; 150
      fc:	96 39       	cpi	r25, 0x96	; 150
      fe:	96 39       	cpi	r25, 0x96	; 150
     100:	96 39       	cpi	r25, 0x96	; 150
     102:	96 39       	cpi	r25, 0x96	; 150
     104:	96 39       	cpi	r25, 0x96	; 150
     106:	96 39       	cpi	r25, 0x96	; 150
     108:	cc 38       	cpi	r28, 0x8C	; 140
     10a:	96 39       	cpi	r25, 0x96	; 150
     10c:	96 39       	cpi	r25, 0x96	; 150
     10e:	96 39       	cpi	r25, 0x96	; 150
     110:	96 39       	cpi	r25, 0x96	; 150
     112:	96 39       	cpi	r25, 0x96	; 150
     114:	96 39       	cpi	r25, 0x96	; 150
     116:	96 39       	cpi	r25, 0x96	; 150
     118:	ea 38       	cpi	r30, 0x8A	; 138
     11a:	96 39       	cpi	r25, 0x96	; 150
     11c:	96 39       	cpi	r25, 0x96	; 150
     11e:	96 39       	cpi	r25, 0x96	; 150
     120:	96 39       	cpi	r25, 0x96	; 150
     122:	96 39       	cpi	r25, 0x96	; 150
     124:	96 39       	cpi	r25, 0x96	; 150
     126:	96 39       	cpi	r25, 0x96	; 150
     128:	0f 39       	cpi	r16, 0x9F	; 159
     12a:	96 39       	cpi	r25, 0x96	; 150
     12c:	96 39       	cpi	r25, 0x96	; 150
     12e:	96 39       	cpi	r25, 0x96	; 150
     130:	96 39       	cpi	r25, 0x96	; 150
     132:	96 39       	cpi	r25, 0x96	; 150
     134:	96 39       	cpi	r25, 0x96	; 150
     136:	96 39       	cpi	r25, 0x96	; 150
     138:	0f 39       	cpi	r16, 0x9F	; 159
     13a:	96 39       	cpi	r25, 0x96	; 150
     13c:	96 39       	cpi	r25, 0x96	; 150
     13e:	96 39       	cpi	r25, 0x96	; 150
     140:	96 39       	cpi	r25, 0x96	; 150
     142:	96 39       	cpi	r25, 0x96	; 150
     144:	96 39       	cpi	r25, 0x96	; 150
     146:	96 39       	cpi	r25, 0x96	; 150
     148:	0f 39       	cpi	r16, 0x9F	; 159
     14a:	96 39       	cpi	r25, 0x96	; 150
     14c:	96 39       	cpi	r25, 0x96	; 150
     14e:	96 39       	cpi	r25, 0x96	; 150
     150:	96 39       	cpi	r25, 0x96	; 150
     152:	96 39       	cpi	r25, 0x96	; 150
     154:	96 39       	cpi	r25, 0x96	; 150
     156:	96 39       	cpi	r25, 0x96	; 150
     158:	0f 39       	cpi	r16, 0x9F	; 159
     15a:	96 39       	cpi	r25, 0x96	; 150
     15c:	96 39       	cpi	r25, 0x96	; 150
     15e:	96 39       	cpi	r25, 0x96	; 150
     160:	96 39       	cpi	r25, 0x96	; 150
     162:	96 39       	cpi	r25, 0x96	; 150
     164:	96 39       	cpi	r25, 0x96	; 150
     166:	96 39       	cpi	r25, 0x96	; 150
     168:	18 39       	cpi	r17, 0x98	; 152
     16a:	96 39       	cpi	r25, 0x96	; 150
     16c:	96 39       	cpi	r25, 0x96	; 150
     16e:	96 39       	cpi	r25, 0x96	; 150
     170:	96 39       	cpi	r25, 0x96	; 150
     172:	96 39       	cpi	r25, 0x96	; 150
     174:	96 39       	cpi	r25, 0x96	; 150
     176:	96 39       	cpi	r25, 0x96	; 150
     178:	52 39       	cpi	r21, 0x92	; 146
     17a:	96 39       	cpi	r25, 0x96	; 150
     17c:	96 39       	cpi	r25, 0x96	; 150
     17e:	96 39       	cpi	r25, 0x96	; 150
     180:	96 39       	cpi	r25, 0x96	; 150
     182:	96 39       	cpi	r25, 0x96	; 150
     184:	96 39       	cpi	r25, 0x96	; 150
     186:	96 39       	cpi	r25, 0x96	; 150
     188:	18 39       	cpi	r17, 0x98	; 152
     18a:	96 39       	cpi	r25, 0x96	; 150
     18c:	96 39       	cpi	r25, 0x96	; 150
     18e:	96 39       	cpi	r25, 0x96	; 150
     190:	96 39       	cpi	r25, 0x96	; 150
     192:	96 39       	cpi	r25, 0x96	; 150
     194:	96 39       	cpi	r25, 0x96	; 150
     196:	96 39       	cpi	r25, 0x96	; 150
     198:	52 39       	cpi	r21, 0x92	; 146
     19a:	96 39       	cpi	r25, 0x96	; 150
     19c:	96 39       	cpi	r25, 0x96	; 150
     19e:	96 39       	cpi	r25, 0x96	; 150
     1a0:	96 39       	cpi	r25, 0x96	; 150
     1a2:	96 39       	cpi	r25, 0x96	; 150
     1a4:	96 39       	cpi	r25, 0x96	; 150
     1a6:	96 39       	cpi	r25, 0x96	; 150
     1a8:	34 39       	cpi	r19, 0x94	; 148
     1aa:	96 39       	cpi	r25, 0x96	; 150
     1ac:	96 39       	cpi	r25, 0x96	; 150
     1ae:	96 39       	cpi	r25, 0x96	; 150
     1b0:	96 39       	cpi	r25, 0x96	; 150
     1b2:	96 39       	cpi	r25, 0x96	; 150
     1b4:	96 39       	cpi	r25, 0x96	; 150
     1b6:	96 39       	cpi	r25, 0x96	; 150
     1b8:	56 39       	cpi	r21, 0x96	; 150
     1ba:	96 39       	cpi	r25, 0x96	; 150
     1bc:	96 39       	cpi	r25, 0x96	; 150
     1be:	96 39       	cpi	r25, 0x96	; 150
     1c0:	96 39       	cpi	r25, 0x96	; 150
     1c2:	96 39       	cpi	r25, 0x96	; 150
     1c4:	96 39       	cpi	r25, 0x96	; 150
     1c6:	96 39       	cpi	r25, 0x96	; 150
     1c8:	56 39       	cpi	r21, 0x96	; 150
     1ca:	96 39       	cpi	r25, 0x96	; 150
     1cc:	96 39       	cpi	r25, 0x96	; 150
     1ce:	96 39       	cpi	r25, 0x96	; 150
     1d0:	96 39       	cpi	r25, 0x96	; 150
     1d2:	96 39       	cpi	r25, 0x96	; 150
     1d4:	96 39       	cpi	r25, 0x96	; 150
     1d6:	96 39       	cpi	r25, 0x96	; 150
     1d8:	6c 39       	cpi	r22, 0x9C	; 156
     1da:	96 39       	cpi	r25, 0x96	; 150
     1dc:	96 39       	cpi	r25, 0x96	; 150
     1de:	96 39       	cpi	r25, 0x96	; 150
     1e0:	96 39       	cpi	r25, 0x96	; 150
     1e2:	96 39       	cpi	r25, 0x96	; 150
     1e4:	96 39       	cpi	r25, 0x96	; 150
     1e6:	96 39       	cpi	r25, 0x96	; 150
     1e8:	8a 39       	cpi	r24, 0x9A	; 154
     1ea:	96 39       	cpi	r25, 0x96	; 150
     1ec:	96 39       	cpi	r25, 0x96	; 150
     1ee:	96 39       	cpi	r25, 0x96	; 150
     1f0:	96 39       	cpi	r25, 0x96	; 150
     1f2:	96 39       	cpi	r25, 0x96	; 150
     1f4:	96 39       	cpi	r25, 0x96	; 150
     1f6:	96 39       	cpi	r25, 0x96	; 150
     1f8:	8a 39       	cpi	r24, 0x9A	; 154
     1fa:	96 39       	cpi	r25, 0x96	; 150
     1fc:	96 39       	cpi	r25, 0x96	; 150
     1fe:	96 39       	cpi	r25, 0x96	; 150
     200:	96 39       	cpi	r25, 0x96	; 150
     202:	96 39       	cpi	r25, 0x96	; 150
     204:	96 39       	cpi	r25, 0x96	; 150
     206:	96 39       	cpi	r25, 0x96	; 150
     208:	96 39       	cpi	r25, 0x96	; 150
     20a:	96 39       	cpi	r25, 0x96	; 150
     20c:	96 39       	cpi	r25, 0x96	; 150
     20e:	96 39       	cpi	r25, 0x96	; 150
     210:	96 39       	cpi	r25, 0x96	; 150
     212:	96 39       	cpi	r25, 0x96	; 150
     214:	96 39       	cpi	r25, 0x96	; 150
     216:	96 39       	cpi	r25, 0x96	; 150
     218:	96 39       	cpi	r25, 0x96	; 150
     21a:	96 39       	cpi	r25, 0x96	; 150
     21c:	96 39       	cpi	r25, 0x96	; 150
     21e:	96 39       	cpi	r25, 0x96	; 150
     220:	96 39       	cpi	r25, 0x96	; 150
     222:	96 39       	cpi	r25, 0x96	; 150
     224:	96 39       	cpi	r25, 0x96	; 150
     226:	96 39       	cpi	r25, 0x96	; 150
     228:	96 39       	cpi	r25, 0x96	; 150
     22a:	96 39       	cpi	r25, 0x96	; 150
     22c:	96 39       	cpi	r25, 0x96	; 150
     22e:	96 39       	cpi	r25, 0x96	; 150
     230:	96 39       	cpi	r25, 0x96	; 150
     232:	96 39       	cpi	r25, 0x96	; 150
     234:	96 39       	cpi	r25, 0x96	; 150
     236:	96 39       	cpi	r25, 0x96	; 150
     238:	96 39       	cpi	r25, 0x96	; 150
     23a:	96 39       	cpi	r25, 0x96	; 150
     23c:	96 39       	cpi	r25, 0x96	; 150
     23e:	96 39       	cpi	r25, 0x96	; 150
     240:	96 39       	cpi	r25, 0x96	; 150
     242:	96 39       	cpi	r25, 0x96	; 150
     244:	96 39       	cpi	r25, 0x96	; 150
     246:	96 39       	cpi	r25, 0x96	; 150
     248:	96 39       	cpi	r25, 0x96	; 150
     24a:	96 39       	cpi	r25, 0x96	; 150
     24c:	96 39       	cpi	r25, 0x96	; 150
     24e:	96 39       	cpi	r25, 0x96	; 150
     250:	96 39       	cpi	r25, 0x96	; 150
     252:	96 39       	cpi	r25, 0x96	; 150
     254:	96 39       	cpi	r25, 0x96	; 150
     256:	96 39       	cpi	r25, 0x96	; 150
     258:	95 39       	cpi	r25, 0x95	; 149

0000025a <__trampolines_end>:
     25a:	00 01       	movw	r0, r0
     25c:	02 03       	mulsu	r16, r18
     25e:	04 05       	cpc	r16, r4
     260:	06 07       	cpc	r16, r22
     262:	00 01       	movw	r0, r0
     264:	02 03       	mulsu	r16, r18
     266:	04 05       	cpc	r16, r4
     268:	00 01       	movw	r0, r0
     26a:	02 03       	mulsu	r16, r18
     26c:	04 05       	cpc	r16, r4

0000026e <port_to_mode_PGM>:
     26e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000278 <port_to_output_PGM>:
     278:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000282 <port_to_input_PGM>:
     282:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000028c <digital_pin_to_port_PGM>:
     28c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     29c:	03 03 03 03                                         ....

000002a0 <digital_pin_to_bit_mask_PGM>:
     2a0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2b0:	04 08 10 20                                         ... 

000002b4 <digital_pin_to_timer_PGM>:
     2b4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     2c4:	00 00 00 00                                         ....

000002c8 <_ZL4font>:
     2c8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     2d8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     2e8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     2f8:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     308:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     318:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     328:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     338:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     348:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     358:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     368:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     378:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     388:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     398:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     3a8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     3b8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     3c8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     3d8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     3e8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     3f8:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     408:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     418:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     428:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     438:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     448:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     458:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     468:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     478:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     488:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     498:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     4a8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     4b8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     4c8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     4d8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     4e8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     4f8:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     508:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     518:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     528:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     538:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     548:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     558:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     568:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     578:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     588:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     598:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     5a8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     5b8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     5c8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     5d8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     5e8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     5f8:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     608:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     618:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     628:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     638:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     648:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     658:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     668:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     678:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     688:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     698:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     6a8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     6b8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     6c8:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     6d8:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     6e8:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     6f8:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     708:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     718:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     728:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     738:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     748:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     758:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     768:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     778:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     788:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     798:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     7a8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     7b8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000007c8 <__ctors_start>:
     7c8:	57 0d       	add	r21, r7
     7ca:	4c 14       	cp	r4, r12
     7cc:	e3 36       	cpi	r30, 0x63	; 99

000007ce <__ctors_end>:
     7ce:	11 24       	eor	r1, r1
     7d0:	1f be       	out	0x3f, r1	; 63
     7d2:	cf ef       	ldi	r28, 0xFF	; 255
     7d4:	d8 e0       	ldi	r29, 0x08	; 8
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	cd bf       	out	0x3d, r28	; 61

000007da <__do_copy_data>:
     7da:	13 e0       	ldi	r17, 0x03	; 3
     7dc:	a0 e0       	ldi	r26, 0x00	; 0
     7de:	b1 e0       	ldi	r27, 0x01	; 1
     7e0:	ec ec       	ldi	r30, 0xCC	; 204
     7e2:	f4 e7       	ldi	r31, 0x74	; 116
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <__do_copy_data+0x10>
     7e6:	05 90       	lpm	r0, Z+
     7e8:	0d 92       	st	X+, r0
     7ea:	ae 3f       	cpi	r26, 0xFE	; 254
     7ec:	b1 07       	cpc	r27, r17
     7ee:	d9 f7       	brne	.-10     	; 0x7e6 <__do_copy_data+0xc>

000007f0 <__do_clear_bss>:
     7f0:	26 e0       	ldi	r18, 0x06	; 6
     7f2:	ae ef       	ldi	r26, 0xFE	; 254
     7f4:	b3 e0       	ldi	r27, 0x03	; 3
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <.do_clear_bss_start>

000007f8 <.do_clear_bss_loop>:
     7f8:	1d 92       	st	X+, r1

000007fa <.do_clear_bss_start>:
     7fa:	a9 30       	cpi	r26, 0x09	; 9
     7fc:	b2 07       	cpc	r27, r18
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <.do_clear_bss_loop>

00000800 <__do_global_ctors>:
     800:	13 e0       	ldi	r17, 0x03	; 3
     802:	c7 ee       	ldi	r28, 0xE7	; 231
     804:	d3 e0       	ldi	r29, 0x03	; 3
     806:	04 c0       	rjmp	.+8      	; 0x810 <__do_global_ctors+0x10>
     808:	21 97       	sbiw	r28, 0x01	; 1
     80a:	fe 01       	movw	r30, r28
     80c:	0e 94 2f 3a 	call	0x745e	; 0x745e <__tablejump2__>
     810:	c4 3e       	cpi	r28, 0xE4	; 228
     812:	d1 07       	cpc	r29, r17
     814:	c9 f7       	brne	.-14     	; 0x808 <__do_global_ctors+0x8>
     816:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <main>
     81a:	0c 94 64 3a 	jmp	0x74c8	; 0x74c8 <_exit>

0000081e <__bad_interrupt>:
     81e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000822 <_Z8doPD2Intv>:
  digipot_write_spi(MCP_WRITEPB1, SineOffsetLvl, digipot_ss_pin);
}

void loop() 
{
  oled_draw();
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	0e 94 82 18 	call	0x3104	; 0x3104 <millis>
     832:	00 91 38 04 	lds	r16, 0x0438	; 0x800438 <pd2_last_interrupt_time>
     836:	10 91 39 04 	lds	r17, 0x0439	; 0x800439 <pd2_last_interrupt_time+0x1>
     83a:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <pd2_last_interrupt_time+0x2>
     83e:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <pd2_last_interrupt_time+0x3>
     842:	6b 01       	movw	r12, r22
     844:	7c 01       	movw	r14, r24
     846:	c0 1a       	sub	r12, r16
     848:	d1 0a       	sbc	r13, r17
     84a:	e2 0a       	sbc	r14, r18
     84c:	f3 0a       	sbc	r15, r19
     84e:	4d e2       	ldi	r20, 0x2D	; 45
     850:	c4 16       	cp	r12, r20
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	d4 06       	cpc	r13, r20
     856:	e1 04       	cpc	r14, r1
     858:	f1 04       	cpc	r15, r1
     85a:	e0 f0       	brcs	.+56     	; 0x894 <_Z8doPD2Intv+0x72>
     85c:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <mode>
     860:	21 11       	cpse	r18, r1
     862:	14 c0       	rjmp	.+40     	; 0x88c <_Z8doPD2Intv+0x6a>
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <mode>
     86a:	00 91 77 04 	lds	r16, 0x0477	; 0x800477 <selectedLowerFreq>
     86e:	10 91 78 04 	lds	r17, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
     872:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
     876:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
     87a:	00 93 82 04 	sts	0x0482, r16	; 0x800482 <sweepcounter>
     87e:	10 93 83 04 	sts	0x0483, r17	; 0x800483 <sweepcounter+0x1>
     882:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <sweepcounter+0x2>
     886:	30 93 85 04 	sts	0x0485, r19	; 0x800485 <sweepcounter+0x3>
     88a:	04 c0       	rjmp	.+8      	; 0x894 <_Z8doPD2Intv+0x72>
     88c:	21 30       	cpi	r18, 0x01	; 1
     88e:	11 f4       	brne	.+4      	; 0x894 <_Z8doPD2Intv+0x72>
     890:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <mode>
     894:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <pd2_last_interrupt_time>
     898:	70 93 39 04 	sts	0x0439, r23	; 0x800439 <pd2_last_interrupt_time+0x1>
     89c:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <pd2_last_interrupt_time+0x2>
     8a0:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <pd2_last_interrupt_time+0x3>
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	08 95       	ret

000008b2 <_Z8doPD5Intv>:
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	0e 94 82 18 	call	0x3104	; 0x3104 <millis>
     8c2:	00 91 2c 04 	lds	r16, 0x042C	; 0x80042c <pd5_last_interrupt_time>
     8c6:	10 91 2d 04 	lds	r17, 0x042D	; 0x80042d <pd5_last_interrupt_time+0x1>
     8ca:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <pd5_last_interrupt_time+0x2>
     8ce:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <pd5_last_interrupt_time+0x3>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
     8d6:	c0 1a       	sub	r12, r16
     8d8:	d1 0a       	sbc	r13, r17
     8da:	e2 0a       	sbc	r14, r18
     8dc:	f3 0a       	sbc	r15, r19
     8de:	4d e2       	ldi	r20, 0x2D	; 45
     8e0:	c4 16       	cp	r12, r20
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	d4 06       	cpc	r13, r20
     8e6:	e1 04       	cpc	r14, r1
     8e8:	f1 04       	cpc	r15, r1
     8ea:	e8 f1       	brcs	.+122    	; 0x966 <__stack+0x67>
     8ec:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     8f0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     8f4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     8f8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     8fc:	08 3e       	cpi	r16, 0xE8	; 232
     8fe:	13 40       	sbci	r17, 0x03	; 3
     900:	21 05       	cpc	r18, r1
     902:	31 05       	cpc	r19, r1
     904:	29 f4       	brne	.+10     	; 0x910 <__stack+0x11>
     906:	00 e1       	ldi	r16, 0x10	; 16
     908:	17 e2       	ldi	r17, 0x27	; 39
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	23 c0       	rjmp	.+70     	; 0x956 <__stack+0x57>
     910:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     914:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     918:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     91c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     920:	00 31       	cpi	r16, 0x10	; 16
     922:	17 42       	sbci	r17, 0x27	; 39
     924:	21 05       	cpc	r18, r1
     926:	31 05       	cpc	r19, r1
     928:	29 f4       	brne	.+10     	; 0x934 <__stack+0x35>
     92a:	00 ea       	ldi	r16, 0xA0	; 160
     92c:	16 e8       	ldi	r17, 0x86	; 134
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	11 c0       	rjmp	.+34     	; 0x956 <__stack+0x57>
     934:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     938:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     93c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     940:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     944:	00 3a       	cpi	r16, 0xA0	; 160
     946:	16 48       	sbci	r17, 0x86	; 134
     948:	21 40       	sbci	r18, 0x01	; 1
     94a:	31 05       	cpc	r19, r1
     94c:	61 f4       	brne	.+24     	; 0x966 <__stack+0x67>
     94e:	08 ee       	ldi	r16, 0xE8	; 232
     950:	13 e0       	ldi	r17, 0x03	; 3
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <maxFreq>
     95a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <maxFreq+0x1>
     95e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <maxFreq+0x2>
     962:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <maxFreq+0x3>
     966:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <pd5_last_interrupt_time>
     96a:	70 93 2d 04 	sts	0x042D, r23	; 0x80042d <pd5_last_interrupt_time+0x1>
     96e:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <pd5_last_interrupt_time+0x2>
     972:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <pd5_last_interrupt_time+0x3>
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	08 95       	ret

00000984 <_Z8doPD6Intv>:
     984:	0e 94 82 18 	call	0x3104	; 0x3104 <millis>
     988:	60 93 30 04 	sts	0x0430, r22	; 0x800430 <pd6_last_interrupt_time>
     98c:	70 93 31 04 	sts	0x0431, r23	; 0x800431 <pd6_last_interrupt_time+0x1>
     990:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <pd6_last_interrupt_time+0x2>
     994:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <pd6_last_interrupt_time+0x3>
     998:	08 95       	ret

0000099a <_ZN8SPIClass14endTransactionEv.part.0>:
     99a:	9f b7       	in	r25, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <_ZN8SPIClass13interruptModeE>
     9a2:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN8SPIClass13interruptSaveE>
     9a6:	21 30       	cpi	r18, 0x01	; 1
     9a8:	19 f4       	brne	.+6      	; 0x9b0 <_ZN8SPIClass14endTransactionEv.part.0+0x16>
     9aa:	8d bb       	out	0x1d, r24	; 29
     9ac:	9f bf       	out	0x3f, r25	; 63
     9ae:	08 95       	ret
     9b0:	8f bf       	out	0x3f, r24	; 63
     9b2:	08 95       	ret

000009b4 <_Z9adc_setupv>:
     9b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     9b8:	ea e7       	ldi	r30, 0x7A	; 122
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	80 68       	ori	r24, 0x80	; 128
     9c0:	80 83       	st	Z, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	80 62       	ori	r24, 0x20	; 32
     9c6:	80 83       	st	Z, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	88 60       	ori	r24, 0x08	; 8
     9cc:	80 83       	st	Z, r24
     9ce:	80 81       	ld	r24, Z
     9d0:	81 60       	ori	r24, 0x01	; 1
     9d2:	80 83       	st	Z, r24
     9d4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     9d8:	80 81       	ld	r24, Z
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	80 83       	st	Z, r24
     9de:	08 95       	ret

000009e0 <__vector_21>:
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	ef 93       	push	r30
     a08:	ff 93       	push	r31
     a0a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatunsisf>
     a18:	6b 01       	movw	r12, r22
     a1a:	7c 01       	movw	r14, r24
     a1c:	60 93 96 04 	sts	0x0496, r22	; 0x800496 <rawAdcValue>
     a20:	70 93 97 04 	sts	0x0497, r23	; 0x800497 <rawAdcValue+0x1>
     a24:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <rawAdcValue+0x2>
     a28:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <rawAdcValue+0x3>
     a2c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	76 2f       	mov	r23, r22
     a34:	66 27       	eor	r22, r22
     a36:	07 2e       	mov	r0, r23
     a38:	00 0c       	add	r0, r0
     a3a:	88 0b       	sbc	r24, r24
     a3c:	99 0b       	sbc	r25, r25
     a3e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__floatsisf>
     a42:	a7 01       	movw	r20, r14
     a44:	96 01       	movw	r18, r12
     a46:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__addsf3>
     a4a:	60 93 96 04 	sts	0x0496, r22	; 0x800496 <rawAdcValue>
     a4e:	70 93 97 04 	sts	0x0497, r23	; 0x800497 <rawAdcValue+0x1>
     a52:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <rawAdcValue+0x2>
     a56:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <rawAdcValue+0x3>
     a5a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     a5e:	22 30       	cpi	r18, 0x02	; 2
     a60:	11 f1       	breq	.+68     	; 0xaa6 <__vector_21+0xc6>
     a62:	60 f4       	brcc	.+24     	; 0xa7c <__vector_21+0x9c>
     a64:	22 23       	and	r18, r18
     a66:	b9 f0       	breq	.+46     	; 0xa96 <__vector_21+0xb6>
     a68:	21 30       	cpi	r18, 0x01	; 1
     a6a:	79 f5       	brne	.+94     	; 0xaca <__vector_21+0xea>
     a6c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixsfsi>
     a70:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <ADCInput+0x1>
     a74:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <ADCInput>
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	1c c0       	rjmp	.+56     	; 0xab4 <__vector_21+0xd4>
     a7c:	23 30       	cpi	r18, 0x03	; 3
     a7e:	e9 f0       	breq	.+58     	; 0xaba <__vector_21+0xda>
     a80:	26 30       	cpi	r18, 0x06	; 6
     a82:	19 f5       	brne	.+70     	; 0xaca <__vector_21+0xea>
     a84:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixsfsi>
     a88:	70 93 8f 04 	sts	0x048F, r23	; 0x80048f <ADCInput3+0x1>
     a8c:	60 93 8e 04 	sts	0x048E, r22	; 0x80048e <ADCInput3>
     a90:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     a94:	1a c0       	rjmp	.+52     	; 0xaca <__vector_21+0xea>
     a96:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixsfsi>
     a9a:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <ADCInput6+0x1>
     a9e:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <ADCInput6>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__vector_21+0xd4>
     aa6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixsfsi>
     aaa:	70 93 93 04 	sts	0x0493, r23	; 0x800493 <ADCInput1+0x1>
     aae:	60 93 92 04 	sts	0x0492, r22	; 0x800492 <ADCInput1>
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     ab8:	08 c0       	rjmp	.+16     	; 0xaca <__vector_21+0xea>
     aba:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixsfsi>
     abe:	70 93 91 04 	sts	0x0491, r23	; 0x800491 <ADCInput2+0x1>
     ac2:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <ADCInput2>
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	f5 cf       	rjmp	.-22     	; 0xab4 <__vector_21+0xd4>
     aca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ace:	80 64       	ori	r24, 0x40	; 64
     ad0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <_ZN8SPIClass16beginTransactionE11SPISettings>:
     afe:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <_ZN8SPIClass13interruptModeE>
     b02:	22 23       	and	r18, r18
     b04:	99 f0       	breq	.+38     	; 0xb2c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     b06:	4f b7       	in	r20, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <_ZN8SPIClass13interruptModeE>
     b0e:	21 30       	cpi	r18, 0x01	; 1
     b10:	59 f4       	brne	.+22     	; 0xb28 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     b12:	2d b3       	in	r18, 0x1d	; 29
     b14:	20 93 43 05 	sts	0x0543, r18	; 0x800543 <_ZN8SPIClass13interruptSaveE>
     b18:	3d b3       	in	r19, 0x1d	; 29
     b1a:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <_ZN8SPIClass13interruptMaskE>
     b1e:	20 95       	com	r18
     b20:	23 23       	and	r18, r19
     b22:	2d bb       	out	0x1d, r18	; 29
     b24:	4f bf       	out	0x3f, r20	; 63
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     b28:	40 93 43 05 	sts	0x0543, r20	; 0x800543 <_ZN8SPIClass13interruptSaveE>
     b2c:	8c bd       	out	0x2c, r24	; 44
     b2e:	9d bd       	out	0x2d, r25	; 45
     b30:	08 95       	ret

00000b32 <_ZN8SPIClass8transferEh>:
     b32:	8e bd       	out	0x2e, r24	; 46
     b34:	00 00       	nop
     b36:	0d b4       	in	r0, 0x2d	; 45
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <_ZN8SPIClass8transferEh+0x4>
     b3c:	8e b5       	in	r24, 0x2e	; 46
     b3e:	08 95       	ret

00000b40 <_ZN8SPIClass10transfer16Ej>:
     b40:	0c b4       	in	r0, 0x2c	; 44
     b42:	05 fc       	sbrc	r0, 5
     b44:	0d c0       	rjmp	.+26     	; 0xb60 <_ZN8SPIClass10transfer16Ej+0x20>
     b46:	9e bd       	out	0x2e, r25	; 46
     b48:	00 00       	nop
     b4a:	0d b4       	in	r0, 0x2d	; 45
     b4c:	07 fe       	sbrs	r0, 7
     b4e:	fd cf       	rjmp	.-6      	; 0xb4a <_ZN8SPIClass10transfer16Ej+0xa>
     b50:	9e b5       	in	r25, 0x2e	; 46
     b52:	8e bd       	out	0x2e, r24	; 46
     b54:	00 00       	nop
     b56:	0d b4       	in	r0, 0x2d	; 45
     b58:	07 fe       	sbrs	r0, 7
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <_ZN8SPIClass10transfer16Ej+0x16>
     b5c:	8e b5       	in	r24, 0x2e	; 46
     b5e:	08 95       	ret
     b60:	8e bd       	out	0x2e, r24	; 46
     b62:	00 00       	nop
     b64:	0d b4       	in	r0, 0x2d	; 45
     b66:	07 fe       	sbrs	r0, 7
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <_ZN8SPIClass10transfer16Ej+0x24>
     b6a:	8e b5       	in	r24, 0x2e	; 46
     b6c:	9e bd       	out	0x2e, r25	; 46
     b6e:	00 00       	nop
     b70:	0d b4       	in	r0, 0x2d	; 45
     b72:	07 fe       	sbrs	r0, 7
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <_ZN8SPIClass10transfer16Ej+0x30>
     b76:	9e b5       	in	r25, 0x2e	; 46
     b78:	08 95       	ret

00000b7a <_Z17digipot_write_spiiih>:
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	d8 2f       	mov	r29, r24
     b80:	c6 2f       	mov	r28, r22
     b82:	88 e5       	ldi	r24, 0x58	; 88
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN8SPIClass16beginTransactionE11SPISettings>
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	89 e0       	ldi	r24, 0x09	; 9
     b8e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     b92:	8d 2f       	mov	r24, r29
     b94:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN8SPIClass8transferEh>
     b98:	8c 2f       	mov	r24, r28
     b9a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN8SPIClass8transferEh>
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	89 e0       	ldi	r24, 0x09	; 9
     ba2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     ba6:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN8SPIClass13interruptModeE>
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <_Z17digipot_write_spiiih+0x3c>
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_ZN8SPIClass14endTransactionEv.part.0>
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <_Z8doPD3Intv>:
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0e 94 82 18 	call	0x3104	; 0x3104 <millis>
     bc8:	6b 01       	movw	r12, r22
     bca:	7c 01       	movw	r14, r24
     bcc:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <pd3_last_interrupt_time>
     bd0:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <pd3_last_interrupt_time+0x1>
     bd4:	a0 91 36 04 	lds	r26, 0x0436	; 0x800436 <pd3_last_interrupt_time+0x2>
     bd8:	b0 91 37 04 	lds	r27, 0x0437	; 0x800437 <pd3_last_interrupt_time+0x3>
     bdc:	a7 01       	movw	r20, r14
     bde:	96 01       	movw	r18, r12
     be0:	28 1b       	sub	r18, r24
     be2:	39 0b       	sbc	r19, r25
     be4:	4a 0b       	sbc	r20, r26
     be6:	5b 0b       	sbc	r21, r27
     be8:	da 01       	movw	r26, r20
     bea:	c9 01       	movw	r24, r18
     bec:	8d 32       	cpi	r24, 0x2D	; 45
     bee:	91 40       	sbci	r25, 0x01	; 1
     bf0:	a1 05       	cpc	r26, r1
     bf2:	b1 05       	cpc	r27, r1
     bf4:	08 f4       	brcc	.+2      	; 0xbf8 <_Z8doPD3Intv+0x3c>
     bf6:	42 c0       	rjmp	.+132    	; 0xc7c <_Z8doPD3Intv+0xc0>
     bf8:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <func>
     bfc:	81 11       	cpse	r24, r1
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <_Z8doPD3Intv+0x4c>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <func>
     c06:	20 c0       	rjmp	.+64     	; 0xc48 <_Z8doPD3Intv+0x8c>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	d1 f4       	brne	.+52     	; 0xc40 <_Z8doPD3Intv+0x84>
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <func>
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e8       	ldi	r26, 0x80	; 128
     c18:	bf e3       	ldi	r27, 0x3F	; 63
     c1a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gainCompensation>
     c1e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gainCompensation+0x1>
     c22:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <gainCompensation+0x2>
     c26:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <gainCompensation+0x3>
     c2a:	49 e0       	ldi	r20, 0x09	; 9
     c2c:	6e e1       	ldi	r22, 0x1E	; 30
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	81 e1       	ldi	r24, 0x11	; 17
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
     c38:	49 e0       	ldi	r20, 0x09	; 9
     c3a:	6a e0       	ldi	r22, 0x0A	; 10
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	1a c0       	rjmp	.+52     	; 0xc74 <_Z8doPD3Intv+0xb8>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	e1 f4       	brne	.+56     	; 0xc7c <_Z8doPD3Intv+0xc0>
     c44:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <func>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e8       	ldi	r26, 0x80	; 128
     c4e:	bf e3       	ldi	r27, 0x3F	; 63
     c50:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gainCompensation>
     c54:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gainCompensation+0x1>
     c58:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <gainCompensation+0x2>
     c5c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <gainCompensation+0x3>
     c60:	49 e0       	ldi	r20, 0x09	; 9
     c62:	6f ef       	ldi	r22, 0xFF	; 255
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	81 e1       	ldi	r24, 0x11	; 17
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
     c6e:	49 e0       	ldi	r20, 0x09	; 9
     c70:	67 e5       	ldi	r22, 0x57	; 87
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	82 e1       	ldi	r24, 0x12	; 18
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
     c7c:	c0 92 34 04 	sts	0x0434, r12	; 0x800434 <pd3_last_interrupt_time>
     c80:	d0 92 35 04 	sts	0x0435, r13	; 0x800435 <pd3_last_interrupt_time+0x1>
     c84:	e0 92 36 04 	sts	0x0436, r14	; 0x800436 <pd3_last_interrupt_time+0x2>
     c88:	f0 92 37 04 	sts	0x0437, r15	; 0x800437 <pd3_last_interrupt_time+0x3>
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	08 95       	ret

00000c96 <_Z13write_dds_spiv>:
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	8d e0       	ldi	r24, 0x0D	; 13
     c9a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	8b e0       	ldi	r24, 0x0B	; 11
     ca2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	8a e0       	ldi	r24, 0x0A	; 10
     caa:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
     cb2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     cb6:	88 e5       	ldi	r24, 0x58	; 88
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN8SPIClass16beginTransactionE11SPISettings>
     cbe:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <dds_out_data>
     cc2:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <dds_out_data+0x1>
     cc6:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <dds_out_data+0x2>
     cca:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <dds_out_data+0x3>
     cce:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN8SPIClass10transfer16Ej>
     cd2:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN8SPIClass13interruptModeE>
     cd6:	81 11       	cpse	r24, r1
     cd8:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN8SPIClass14endTransactionEv.part.0>
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	8b e0       	ldi	r24, 0x0B	; 11
     ce8:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <digitalWrite>

00000cec <_Z15setDDSFrequencyl>:
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__floatsisf>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e8       	ldi	r20, 0x80	; 128
     cfe:	5d e4       	ldi	r21, 0x4D	; 77
     d00:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
     d04:	20 e2       	ldi	r18, 0x20	; 32
     d06:	3c eb       	ldi	r19, 0xBC	; 188
     d08:	4e eb       	ldi	r20, 0xBE	; 190
     d0a:	5b e4       	ldi	r21, 0x4B	; 75
     d0c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
     d10:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fixsfsi>
     d14:	eb 01       	movw	r28, r22
     d16:	cc 0f       	add	r28, r28
     d18:	dd 1f       	adc	r29, r29
     d1a:	cc 0f       	add	r28, r28
     d1c:	dd 1f       	adc	r29, r29
     d1e:	d6 95       	lsr	r29
     d20:	c7 95       	ror	r28
     d22:	d6 95       	lsr	r29
     d24:	c7 95       	ror	r28
     d26:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <FREQZEROREG>
     d2a:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <FREQZEROREG+0x1>
     d2e:	c0 2b       	or	r28, r16
     d30:	d1 2b       	or	r29, r17
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	4e e0       	ldi	r20, 0x0E	; 14
     d38:	b5 95       	asr	r27
     d3a:	a7 95       	ror	r26
     d3c:	97 95       	ror	r25
     d3e:	87 95       	ror	r24
     d40:	4a 95       	dec	r20
     d42:	d1 f7       	brne	.-12     	; 0xd38 <_Z15setDDSFrequencyl+0x4c>
     d44:	08 2b       	or	r16, r24
     d46:	19 2b       	or	r17, r25
     d48:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <current_phase>
     d4c:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <current_phase+0x1>
     d50:	09 2e       	mov	r0, r25
     d52:	00 0c       	add	r0, r0
     d54:	aa 0b       	sbc	r26, r26
     d56:	bb 0b       	sbc	r27, r27
     d58:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <dds_out_data>
     d5c:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <dds_out_data+0x1>
     d60:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <dds_out_data+0x2>
     d64:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <dds_out_data+0x3>
     d68:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z13write_dds_spiv>
     d6c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <func>
     d70:	81 11       	cpse	r24, r1
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <_Z15setDDSFrequencyl+0x92>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e2       	ldi	r25, 0x20	; 32
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <_Z15setDDSFrequencyl+0xac>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	29 f4       	brne	.+10     	; 0xd8c <_Z15setDDSFrequencyl+0xa0>
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	90 e2       	ldi	r25, 0x20	; 32
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <_Z15setDDSFrequencyl+0xac>
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	61 f4       	brne	.+24     	; 0xda8 <_Z15setDDSFrequencyl+0xbc>
     d90:	88 e6       	ldi	r24, 0x68	; 104
     d92:	90 e2       	ldi	r25, 0x20	; 32
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <dds_out_data>
     d9c:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <dds_out_data+0x1>
     da0:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <dds_out_data+0x2>
     da4:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <dds_out_data+0x3>
     da8:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z13write_dds_spiv>
     dac:	ce 01       	movw	r24, r28
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <dds_out_data>
     db6:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <dds_out_data+0x1>
     dba:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <dds_out_data+0x2>
     dbe:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <dds_out_data+0x3>
     dc2:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z13write_dds_spiv>
     dc6:	c8 01       	movw	r24, r16
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <dds_out_data>
     dd0:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <dds_out_data+0x1>
     dd4:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <dds_out_data+0x2>
     dd8:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <dds_out_data+0x3>
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_Z13write_dds_spiv>

00000de8 <_Z17dds_callback_funcv>:
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     e02:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     e06:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     e0a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     e0e:	40 90 94 04 	lds	r4, 0x0494	; 0x800494 <ADCInput>
     e12:	50 90 95 04 	lds	r5, 0x0495	; 0x800495 <ADCInput+0x1>
     e16:	b2 01       	movw	r22, r4
     e18:	55 0c       	add	r5, r5
     e1a:	88 0b       	sbc	r24, r24
     e1c:	99 0b       	sbc	r25, r25
     e1e:	3f 93       	push	r19
     e20:	2f 93       	push	r18
     e22:	1f 93       	push	r17
     e24:	0f 93       	push	r16
     e26:	a1 2c       	mov	r10, r1
     e28:	b1 2c       	mov	r11, r1
     e2a:	65 01       	movw	r12, r10
     e2c:	a3 94       	inc	r10
     e2e:	e1 2c       	mov	r14, r1
     e30:	f1 2c       	mov	r15, r1
     e32:	87 01       	movw	r16, r14
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	34 e0       	ldi	r19, 0x04	; 4
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_Z3maplllll>
     e40:	60 93 7b 04 	sts	0x047B, r22	; 0x80047b <selectedUpperFreq>
     e44:	70 93 7c 04 	sts	0x047C, r23	; 0x80047c <selectedUpperFreq+0x1>
     e48:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <selectedUpperFreq+0x2>
     e4c:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <selectedUpperFreq+0x3>
     e50:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     e54:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     e58:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     e5c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     e60:	40 90 92 04 	lds	r4, 0x0492	; 0x800492 <ADCInput1>
     e64:	50 90 93 04 	lds	r5, 0x0493	; 0x800493 <ADCInput1+0x1>
     e68:	b2 01       	movw	r22, r4
     e6a:	55 0c       	add	r5, r5
     e6c:	88 0b       	sbc	r24, r24
     e6e:	99 0b       	sbc	r25, r25
     e70:	3f 93       	push	r19
     e72:	2f 93       	push	r18
     e74:	1f 93       	push	r17
     e76:	0f 93       	push	r16
     e78:	e1 2c       	mov	r14, r1
     e7a:	f1 2c       	mov	r15, r1
     e7c:	87 01       	movw	r16, r14
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	34 e0       	ldi	r19, 0x04	; 4
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_Z3maplllll>
     e8a:	60 93 77 04 	sts	0x0477, r22	; 0x800477 <selectedLowerFreq>
     e8e:	70 93 78 04 	sts	0x0478, r23	; 0x800478 <selectedLowerFreq+0x1>
     e92:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <selectedLowerFreq+0x2>
     e96:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <selectedLowerFreq+0x3>
     e9a:	8d b7       	in	r24, 0x3d	; 61
     e9c:	9e b7       	in	r25, 0x3e	; 62
     e9e:	08 96       	adiw	r24, 0x08	; 8
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	9e bf       	out	0x3e, r25	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	8d bf       	out	0x3d, r24	; 61
     eaa:	c0 91 81 04 	lds	r28, 0x0481	; 0x800481 <mode>
     eae:	c1 30       	cpi	r28, 0x01	; 1
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <_Z17dds_callback_funcv+0xcc>
     eb2:	17 c1       	rjmp	.+558    	; 0x10e2 <_Z17dds_callback_funcv+0x2fa>
     eb4:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <ADCInput6>
     eb8:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <ADCInput6+0x1>
     ebc:	07 2e       	mov	r0, r23
     ebe:	00 0c       	add	r0, r0
     ec0:	88 0b       	sbc	r24, r24
     ec2:	99 0b       	sbc	r25, r25
     ec4:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <maxclkspeed+0x3>
     ec8:	2f 93       	push	r18
     eca:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <maxclkspeed+0x2>
     ece:	2f 93       	push	r18
     ed0:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <maxclkspeed+0x1>
     ed4:	2f 93       	push	r18
     ed6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <maxclkspeed>
     eda:	2f 93       	push	r18
     edc:	e1 2c       	mov	r14, r1
     ede:	14 e0       	ldi	r17, 0x04	; 4
     ee0:	f1 2e       	mov	r15, r17
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_Z3maplllll>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	f3 e0       	ldi	r31, 0x03	; 3
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	aa 1f       	adc	r26, r26
     efc:	bb 1f       	adc	r27, r27
     efe:	fa 95       	dec	r31
     f00:	d1 f7       	brne	.-12     	; 0xef6 <_Z17dds_callback_funcv+0x10e>
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	a2 07       	cpc	r26, r18
     f10:	b1 05       	cpc	r27, r1
     f12:	18 f4       	brcc	.+6      	; 0xf1a <_Z17dds_callback_funcv+0x132>
     f14:	c0 93 46 05 	sts	0x0546, r28	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     f18:	42 c0       	rjmp	.+132    	; 0xf9e <_Z17dds_callback_funcv+0x1b6>
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	28 e0       	ldi	r18, 0x08	; 8
     f1e:	a2 07       	cpc	r26, r18
     f20:	b1 05       	cpc	r27, r1
     f22:	58 f4       	brcc	.+22     	; 0xf3a <_Z17dds_callback_funcv+0x152>
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     f2a:	53 e0       	ldi	r21, 0x03	; 3
     f2c:	b6 95       	lsr	r27
     f2e:	a7 95       	ror	r26
     f30:	97 95       	ror	r25
     f32:	87 95       	ror	r24
     f34:	5a 95       	dec	r21
     f36:	d1 f7       	brne	.-12     	; 0xf2c <_Z17dds_callback_funcv+0x144>
     f38:	32 c0       	rjmp	.+100    	; 0xf9e <_Z17dds_callback_funcv+0x1b6>
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	20 e4       	ldi	r18, 0x40	; 64
     f3e:	a2 07       	cpc	r26, r18
     f40:	b1 05       	cpc	r27, r1
     f42:	58 f4       	brcc	.+22     	; 0xf5a <_Z17dds_callback_funcv+0x172>
     f44:	23 e0       	ldi	r18, 0x03	; 3
     f46:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     f4a:	46 e0       	ldi	r20, 0x06	; 6
     f4c:	b6 95       	lsr	r27
     f4e:	a7 95       	ror	r26
     f50:	97 95       	ror	r25
     f52:	87 95       	ror	r24
     f54:	4a 95       	dec	r20
     f56:	d1 f7       	brne	.-12     	; 0xf4c <_Z17dds_callback_funcv+0x164>
     f58:	22 c0       	rjmp	.+68     	; 0xf9e <_Z17dds_callback_funcv+0x1b6>
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	a1 05       	cpc	r26, r1
     f5e:	21 e0       	ldi	r18, 0x01	; 1
     f60:	b2 07       	cpc	r27, r18
     f62:	40 f4       	brcc	.+16     	; 0xf74 <_Z17dds_callback_funcv+0x18c>
     f64:	24 e0       	ldi	r18, 0x04	; 4
     f66:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     f6a:	89 2f       	mov	r24, r25
     f6c:	9a 2f       	mov	r25, r26
     f6e:	ab 2f       	mov	r26, r27
     f70:	bb 27       	eor	r27, r27
     f72:	15 c0       	rjmp	.+42     	; 0xf9e <_Z17dds_callback_funcv+0x1b6>
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 05       	cpc	r26, r1
     f78:	24 e0       	ldi	r18, 0x04	; 4
     f7a:	b2 07       	cpc	r27, r18
     f7c:	58 f4       	brcc	.+22     	; 0xf94 <_Z17dds_callback_funcv+0x1ac>
     f7e:	25 e0       	ldi	r18, 0x05	; 5
     f80:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     f84:	2a e0       	ldi	r18, 0x0A	; 10
     f86:	b6 95       	lsr	r27
     f88:	a7 95       	ror	r26
     f8a:	97 95       	ror	r25
     f8c:	87 95       	ror	r24
     f8e:	2a 95       	dec	r18
     f90:	d1 f7       	brne	.-12     	; 0xf86 <_Z17dds_callback_funcv+0x19e>
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <_Z17dds_callback_funcv+0x1b6>
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <_ZN8TimerOne9pwmPeriodE+0x1>
     fa2:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <_ZN8TimerOne9pwmPeriodE>
     fa6:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8TimerOne9pwmPeriodE>
     faa:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8TimerOne9pwmPeriodE+0x1>
     fae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     fb2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     fb6:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
     fba:	80 61       	ori	r24, 0x10	; 16
     fbc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     fc0:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <selectedLowerFreq>
     fc4:	50 91 78 04 	lds	r21, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
     fc8:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
     fcc:	70 91 7a 04 	lds	r23, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
     fd0:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <selectedUpperFreq>
     fd4:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
     fd8:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
     fdc:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
     fe0:	48 17       	cp	r20, r24
     fe2:	59 07       	cpc	r21, r25
     fe4:	6a 07       	cpc	r22, r26
     fe6:	7b 07       	cpc	r23, r27
     fe8:	24 f1       	brlt	.+72     	; 0x1032 <_Z17dds_callback_funcv+0x24a>
     fea:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <selectedLowerFreq>
     fee:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
     ff2:	a0 91 79 04 	lds	r26, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
     ff6:	b0 91 7a 04 	lds	r27, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
     ffa:	02 97       	sbiw	r24, 0x02	; 2
     ffc:	a1 05       	cpc	r26, r1
     ffe:	b1 05       	cpc	r27, r1
    1000:	64 f0       	brlt	.+24     	; 0x101a <_Z17dds_callback_funcv+0x232>
    1002:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <selectedUpperFreq>
    1006:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    100a:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    100e:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	a1 09       	sbc	r26, r1
    1016:	b1 09       	sbc	r27, r1
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <_Z17dds_callback_funcv+0x23a>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <selectedLowerFreq>
    1026:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <selectedLowerFreq+0x1>
    102a:	a0 93 79 04 	sts	0x0479, r26	; 0x800479 <selectedLowerFreq+0x2>
    102e:	b0 93 7a 04 	sts	0x047A, r27	; 0x80047a <selectedLowerFreq+0x3>
    1032:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <sweep_direction>
    1036:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <sweepcounter>
    103a:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <sweepcounter+0x1>
    103e:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <sweepcounter+0x2>
    1042:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <sweepcounter+0x3>
    1046:	21 11       	cpse	r18, r1
    1048:	15 c0       	rjmp	.+42     	; 0x1074 <_Z17dds_callback_funcv+0x28c>
    104a:	40 91 7b 04 	lds	r20, 0x047B	; 0x80047b <selectedUpperFreq>
    104e:	50 91 7c 04 	lds	r21, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    1052:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    1056:	70 91 7e 04 	lds	r23, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    105a:	84 17       	cp	r24, r20
    105c:	95 07       	cpc	r25, r21
    105e:	a6 07       	cpc	r26, r22
    1060:	b7 07       	cpc	r27, r23
    1062:	24 f4       	brge	.+8      	; 0x106c <_Z17dds_callback_funcv+0x284>
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	a1 1d       	adc	r26, r1
    1068:	b1 1d       	adc	r27, r1
    106a:	16 c0       	rjmp	.+44     	; 0x1098 <_Z17dds_callback_funcv+0x2b0>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <sweep_direction>
    1072:	1d c0       	rjmp	.+58     	; 0x10ae <_Z17dds_callback_funcv+0x2c6>
    1074:	21 30       	cpi	r18, 0x01	; 1
    1076:	d9 f4       	brne	.+54     	; 0x10ae <_Z17dds_callback_funcv+0x2c6>
    1078:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <selectedLowerFreq>
    107c:	50 91 78 04 	lds	r21, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
    1080:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
    1084:	70 91 7a 04 	lds	r23, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
    1088:	48 17       	cp	r20, r24
    108a:	59 07       	cpc	r21, r25
    108c:	6a 07       	cpc	r22, r26
    108e:	7b 07       	cpc	r23, r27
    1090:	64 f4       	brge	.+24     	; 0x10aa <_Z17dds_callback_funcv+0x2c2>
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	a1 09       	sbc	r26, r1
    1096:	b1 09       	sbc	r27, r1
    1098:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <sweepcounter>
    109c:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <sweepcounter+0x1>
    10a0:	a0 93 84 04 	sts	0x0484, r26	; 0x800484 <sweepcounter+0x2>
    10a4:	b0 93 85 04 	sts	0x0485, r27	; 0x800485 <sweepcounter+0x3>
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <_Z17dds_callback_funcv+0x2c6>
    10aa:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <sweep_direction>
    10ae:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <sweepcounter>
    10b2:	70 91 83 04 	lds	r23, 0x0483	; 0x800483 <sweepcounter+0x1>
    10b6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <sweepcounter+0x2>
    10ba:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <sweepcounter+0x3>
    10be:	0e 94 76 06 	call	0xcec	; 0xcec <_Z15setDDSFrequencyl>
    10c2:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <sweepcounter>
    10c6:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <sweepcounter+0x1>
    10ca:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <sweepcounter+0x2>
    10ce:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <sweepcounter+0x3>
    10d2:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <currentFreq>
    10d6:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <currentFreq+0x1>
    10da:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <currentFreq+0x2>
    10de:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <currentFreq+0x3>
    10e2:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <mode>
    10e6:	81 11       	cpse	r24, r1
    10e8:	2d c0       	rjmp	.+90     	; 0x1144 <_Z17dds_callback_funcv+0x35c>
    10ea:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <selectedUpperFreq>
    10ee:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    10f2:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    10f6:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	a1 09       	sbc	r26, r1
    10fe:	b1 09       	sbc	r27, r1
    1100:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <selectedLowerFreq>
    1104:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <selectedLowerFreq+0x1>
    1108:	a0 93 79 04 	sts	0x0479, r26	; 0x800479 <selectedLowerFreq+0x2>
    110c:	b0 93 7a 04 	sts	0x047A, r27	; 0x80047a <selectedLowerFreq+0x3>
    1110:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <selectedUpperFreq>
    1114:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    1118:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    111c:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    1120:	0e 94 76 06 	call	0xcec	; 0xcec <_Z15setDDSFrequencyl>
    1124:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <selectedUpperFreq>
    1128:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    112c:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    1130:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    1134:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <currentFreq>
    1138:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <currentFreq+0x1>
    113c:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <currentFreq+0x2>
    1140:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <currentFreq+0x3>
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	5f 90       	pop	r5
    1158:	4f 90       	pop	r4
    115a:	08 95       	ret

0000115c <_Z11doTimer1Intv>:
    115c:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <_Z17dds_callback_funcv>

00001160 <_Z15enableInterrupthPFvvEh>:
    1160:	e8 2f       	mov	r30, r24
    1162:	ef 77       	andi	r30, 0x7F	; 127
    1164:	87 fd       	sbrc	r24, 7
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <_Z15enableInterrupthPFvvEh+0x12>
    1168:	8e ef       	ldi	r24, 0xFE	; 254
    116a:	8e 0f       	add	r24, r30
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	08 f4       	brcc	.+2      	; 0x1172 <_Z15enableInterrupthPFvvEh+0x12>
    1170:	9a c0       	rjmp	.+308    	; 0x12a6 <_Z15enableInterrupthPFvvEh+0x146>
    1172:	8e 2f       	mov	r24, r30
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	fc 01       	movw	r30, r24
    1178:	e0 56       	subi	r30, 0x60	; 96
    117a:	fd 4f       	sbci	r31, 0xFD	; 253
    117c:	24 91       	lpm	r18, Z
    117e:	fc 01       	movw	r30, r24
    1180:	e4 57       	subi	r30, 0x74	; 116
    1182:	fd 4f       	sbci	r31, 0xFD	; 253
    1184:	34 91       	lpm	r19, Z
    1186:	54 2f       	mov	r21, r20
    1188:	5d 7f       	andi	r21, 0xFD	; 253
    118a:	51 30       	cpi	r21, 0x01	; 1
    118c:	b9 f4       	brne	.+46     	; 0x11bc <_Z15enableInterrupthPFvvEh+0x5c>
    118e:	32 30       	cpi	r19, 0x02	; 2
    1190:	31 f4       	brne	.+12     	; 0x119e <_Z15enableInterrupthPFvvEh+0x3e>
    1192:	50 91 44 04 	lds	r21, 0x0444	; 0x800444 <risingPinsPORTB>
    1196:	52 2b       	or	r21, r18
    1198:	50 93 44 04 	sts	0x0444, r21	; 0x800444 <risingPinsPORTB>
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <_Z15enableInterrupthPFvvEh+0x5c>
    119e:	33 30       	cpi	r19, 0x03	; 3
    11a0:	31 f4       	brne	.+12     	; 0x11ae <_Z15enableInterrupthPFvvEh+0x4e>
    11a2:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <risingPinsPORTC>
    11a6:	52 2b       	or	r21, r18
    11a8:	50 93 41 04 	sts	0x0441, r21	; 0x800441 <risingPinsPORTC>
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <_Z15enableInterrupthPFvvEh+0x5c>
    11ae:	34 30       	cpi	r19, 0x04	; 4
    11b0:	29 f4       	brne	.+10     	; 0x11bc <_Z15enableInterrupthPFvvEh+0x5c>
    11b2:	50 91 3e 04 	lds	r21, 0x043E	; 0x80043e <risingPinsPORTD>
    11b6:	52 2b       	or	r21, r18
    11b8:	50 93 3e 04 	sts	0x043E, r21	; 0x80043e <risingPinsPORTD>
    11bc:	41 50       	subi	r20, 0x01	; 1
    11be:	42 30       	cpi	r20, 0x02	; 2
    11c0:	b8 f4       	brcc	.+46     	; 0x11f0 <_Z15enableInterrupthPFvvEh+0x90>
    11c2:	32 30       	cpi	r19, 0x02	; 2
    11c4:	31 f4       	brne	.+12     	; 0x11d2 <_Z15enableInterrupthPFvvEh+0x72>
    11c6:	40 91 43 04 	lds	r20, 0x0443	; 0x800443 <fallingPinsPORTB>
    11ca:	42 2b       	or	r20, r18
    11cc:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <fallingPinsPORTB>
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <_Z15enableInterrupthPFvvEh+0x90>
    11d2:	33 30       	cpi	r19, 0x03	; 3
    11d4:	31 f4       	brne	.+12     	; 0x11e2 <_Z15enableInterrupthPFvvEh+0x82>
    11d6:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <fallingPinsPORTC>
    11da:	42 2b       	or	r20, r18
    11dc:	40 93 40 04 	sts	0x0440, r20	; 0x800440 <fallingPinsPORTC>
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <_Z15enableInterrupthPFvvEh+0x90>
    11e2:	34 30       	cpi	r19, 0x04	; 4
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <_Z15enableInterrupthPFvvEh+0x90>
    11e6:	40 91 3d 04 	lds	r20, 0x043D	; 0x80043d <fallingPinsPORTD>
    11ea:	42 2b       	or	r20, r18
    11ec:	40 93 3d 04 	sts	0x043D, r20	; 0x80043d <fallingPinsPORTD>
    11f0:	fc 01       	movw	r30, r24
    11f2:	e6 5a       	subi	r30, 0xA6	; 166
    11f4:	fd 4f       	sbci	r31, 0xFD	; 253
    11f6:	a4 91       	lpm	r26, Z
    11f8:	32 30       	cpi	r19, 0x02	; 2
    11fa:	c1 f4       	brne	.+48     	; 0x122c <_Z15enableInterrupthPFvvEh+0xcc>
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	aa 0f       	add	r26, r26
    1200:	bb 1f       	adc	r27, r27
    1202:	af 59       	subi	r26, 0x9F	; 159
    1204:	bb 4f       	sbci	r27, 0xFB	; 251
    1206:	6d 93       	st	X+, r22
    1208:	7c 93       	st	X, r23
    120a:	e6 e8       	ldi	r30, 0x86	; 134
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	a5 91       	lpm	r26, Z+
    1210:	b4 91       	lpm	r27, Z
    1212:	8c 91       	ld	r24, X
    1214:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_ZL13portSnapshotB>
    1218:	8b e6       	ldi	r24, 0x6B	; 107
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <pcmsk+0x1>
    1220:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <pcmsk>
    1224:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	33 c0       	rjmp	.+102    	; 0x1292 <_Z15enableInterrupthPFvvEh+0x132>
    122c:	33 30       	cpi	r19, 0x03	; 3
    122e:	c1 f4       	brne	.+48     	; 0x1260 <_Z15enableInterrupthPFvvEh+0x100>
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	aa 0f       	add	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	ab 5a       	subi	r26, 0xAB	; 171
    1238:	bb 4f       	sbci	r27, 0xFB	; 251
    123a:	6d 93       	st	X+, r22
    123c:	7c 93       	st	X, r23
    123e:	e8 e8       	ldi	r30, 0x88	; 136
    1240:	f2 e0       	ldi	r31, 0x02	; 2
    1242:	a5 91       	lpm	r26, Z+
    1244:	b4 91       	lpm	r27, Z
    1246:	8c 91       	ld	r24, X
    1248:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <_ZL13portSnapshotC>
    124c:	8c e6       	ldi	r24, 0x6C	; 108
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <pcmsk+0x1>
    1254:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <pcmsk>
    1258:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    125c:	82 60       	ori	r24, 0x02	; 2
    125e:	19 c0       	rjmp	.+50     	; 0x1292 <_Z15enableInterrupthPFvvEh+0x132>
    1260:	34 30       	cpi	r19, 0x04	; 4
    1262:	c9 f4       	brne	.+50     	; 0x1296 <_Z15enableInterrupthPFvvEh+0x136>
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	aa 0f       	add	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	ab 5b       	subi	r26, 0xBB	; 187
    126c:	bb 4f       	sbci	r27, 0xFB	; 251
    126e:	6d 93       	st	X+, r22
    1270:	7c 93       	st	X, r23
    1272:	ea e8       	ldi	r30, 0x8A	; 138
    1274:	f2 e0       	ldi	r31, 0x02	; 2
    1276:	a5 91       	lpm	r26, Z+
    1278:	b4 91       	lpm	r27, Z
    127a:	8c 91       	ld	r24, X
    127c:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL13portSnapshotD>
    1280:	8d e6       	ldi	r24, 0x6D	; 109
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <pcmsk+0x1>
    1288:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <pcmsk>
    128c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1296:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <pcmsk>
    129a:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <pcmsk+0x1>
    129e:	ec 91       	ld	r30, X
    12a0:	2e 2b       	or	r18, r30
    12a2:	2c 93       	st	X, r18
    12a4:	08 95       	ret
    12a6:	9f b7       	in	r25, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	e2 30       	cpi	r30, 0x02	; 2
    12ac:	99 f4       	brne	.+38     	; 0x12d4 <_Z15enableInterrupthPFvvEh+0x174>
    12ae:	70 93 6e 04 	sts	0x046E, r23	; 0x80046e <functionPointerArrayEXTERNAL+0x1>
    12b2:	60 93 6d 04 	sts	0x046D, r22	; 0x80046d <functionPointerArrayEXTERNAL>
    12b6:	e8 98       	cbi	0x1d, 0	; 29
    12b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12bc:	8c 7f       	andi	r24, 0xFC	; 252
    12be:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12c6:	48 2b       	or	r20, r24
    12c8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12cc:	e0 9a       	sbi	0x1c, 0	; 28
    12ce:	e8 9a       	sbi	0x1d, 0	; 29
    12d0:	9f bf       	out	0x3f, r25	; 63
    12d2:	08 95       	ret
    12d4:	70 93 70 04 	sts	0x0470, r23	; 0x800470 <functionPointerArrayEXTERNAL+0x3>
    12d8:	60 93 6f 04 	sts	0x046F, r22	; 0x80046f <functionPointerArrayEXTERNAL+0x2>
    12dc:	e9 98       	cbi	0x1d, 1	; 29
    12de:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12e2:	83 7f       	andi	r24, 0xF3	; 243
    12e4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12ec:	24 e0       	ldi	r18, 0x04	; 4
    12ee:	42 9f       	mul	r20, r18
    12f0:	a0 01       	movw	r20, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	48 2b       	or	r20, r24
    12f6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    12fa:	e1 9a       	sbi	0x1c, 1	; 28
    12fc:	e9 9a       	sbi	0x1d, 1	; 29
    12fe:	e8 cf       	rjmp	.-48     	; 0x12d0 <_Z15enableInterrupthPFvvEh+0x170>

00001300 <__vector_1>:
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
    1322:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <functionPointerArrayEXTERNAL>
    1326:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <functionPointerArrayEXTERNAL+0x1>
    132a:	09 95       	icall
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_2>:
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <functionPointerArrayEXTERNAL+0x2>
    1374:	f0 91 70 04 	lds	r31, 0x0470	; 0x800470 <functionPointerArrayEXTERNAL+0x3>
    1378:	09 95       	icall
    137a:	ff 91       	pop	r31
    137c:	ef 91       	pop	r30
    137e:	bf 91       	pop	r27
    1380:	af 91       	pop	r26
    1382:	9f 91       	pop	r25
    1384:	8f 91       	pop	r24
    1386:	7f 91       	pop	r23
    1388:	6f 91       	pop	r22
    138a:	5f 91       	pop	r21
    138c:	4f 91       	pop	r20
    138e:	3f 91       	pop	r19
    1390:	2f 91       	pop	r18
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	0f 90       	pop	r0
    1398:	1f 90       	pop	r1
    139a:	18 95       	reti

0000139c <__vector_3>:
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	cf 93       	push	r28
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	23 b1       	in	r18, 0x03	; 3
    13c2:	c0 91 42 04 	lds	r28, 0x0442	; 0x800442 <_ZL13portSnapshotB>
    13c6:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <risingPinsPORTB>
    13ca:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <fallingPinsPORTB>
    13ce:	32 2f       	mov	r19, r18
    13d0:	30 95       	com	r19
    13d2:	93 23       	and	r25, r19
    13d4:	82 23       	and	r24, r18
    13d6:	89 2b       	or	r24, r25
    13d8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    13dc:	c2 27       	eor	r28, r18
    13de:	c9 23       	and	r28, r25
    13e0:	c8 23       	and	r28, r24
    13e2:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <_ZL13portSnapshotB>
    13e6:	cc 23       	and	r28, r28
    13e8:	51 f1       	breq	.+84     	; 0x143e <__vector_3+0xa2>
    13ea:	c0 ff       	sbrs	r28, 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <__vector_3+0x5c>
    13ee:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <portBFunctions>
    13f2:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <portBFunctions+0x1>
    13f6:	09 95       	icall
    13f8:	c1 ff       	sbrs	r28, 1
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <__vector_3+0x6a>
    13fc:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <portBFunctions+0x2>
    1400:	f0 91 64 04 	lds	r31, 0x0464	; 0x800464 <portBFunctions+0x3>
    1404:	09 95       	icall
    1406:	c2 ff       	sbrs	r28, 2
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <__vector_3+0x78>
    140a:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <portBFunctions+0x4>
    140e:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <portBFunctions+0x5>
    1412:	09 95       	icall
    1414:	c3 ff       	sbrs	r28, 3
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <__vector_3+0x86>
    1418:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <portBFunctions+0x6>
    141c:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <portBFunctions+0x7>
    1420:	09 95       	icall
    1422:	c4 ff       	sbrs	r28, 4
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <__vector_3+0x94>
    1426:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <portBFunctions+0x8>
    142a:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <portBFunctions+0x9>
    142e:	09 95       	icall
    1430:	c5 ff       	sbrs	r28, 5
    1432:	05 c0       	rjmp	.+10     	; 0x143e <__vector_3+0xa2>
    1434:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <portBFunctions+0xa>
    1438:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <portBFunctions+0xb>
    143c:	09 95       	icall
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	cf 91       	pop	r28
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <__vector_4>:
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	cf 93       	push	r28
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    1486:	26 b1       	in	r18, 0x06	; 6
    1488:	c0 91 3f 04 	lds	r28, 0x043F	; 0x80043f <_ZL13portSnapshotC>
    148c:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <risingPinsPORTC>
    1490:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <fallingPinsPORTC>
    1494:	32 2f       	mov	r19, r18
    1496:	30 95       	com	r19
    1498:	93 23       	and	r25, r19
    149a:	82 23       	and	r24, r18
    149c:	89 2b       	or	r24, r25
    149e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
    14a2:	c2 27       	eor	r28, r18
    14a4:	c9 23       	and	r28, r25
    14a6:	c8 23       	and	r28, r24
    14a8:	20 93 3f 04 	sts	0x043F, r18	; 0x80043f <_ZL13portSnapshotC>
    14ac:	cc 23       	and	r28, r28
    14ae:	51 f1       	breq	.+84     	; 0x1504 <__vector_4+0xa2>
    14b0:	c0 ff       	sbrs	r28, 0
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <__vector_4+0x5c>
    14b4:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <portCFunctions>
    14b8:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <portCFunctions+0x1>
    14bc:	09 95       	icall
    14be:	c1 ff       	sbrs	r28, 1
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <__vector_4+0x6a>
    14c2:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <portCFunctions+0x2>
    14c6:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <portCFunctions+0x3>
    14ca:	09 95       	icall
    14cc:	c2 ff       	sbrs	r28, 2
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <__vector_4+0x78>
    14d0:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <portCFunctions+0x4>
    14d4:	f0 91 5a 04 	lds	r31, 0x045A	; 0x80045a <portCFunctions+0x5>
    14d8:	09 95       	icall
    14da:	c3 ff       	sbrs	r28, 3
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <__vector_4+0x86>
    14de:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <portCFunctions+0x6>
    14e2:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <portCFunctions+0x7>
    14e6:	09 95       	icall
    14e8:	c4 ff       	sbrs	r28, 4
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <__vector_4+0x94>
    14ec:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <portCFunctions+0x8>
    14f0:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <portCFunctions+0x9>
    14f4:	09 95       	icall
    14f6:	c5 ff       	sbrs	r28, 5
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <__vector_4+0xa2>
    14fa:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <portCFunctions+0xa>
    14fe:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <portCFunctions+0xb>
    1502:	09 95       	icall
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	cf 91       	pop	r28
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <__vector_5>:
    1528:	1f 92       	push	r1
    152a:	0f 92       	push	r0
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	0f 92       	push	r0
    1530:	11 24       	eor	r1, r1
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	cf 93       	push	r28
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
    154c:	29 b1       	in	r18, 0x09	; 9
    154e:	c0 91 3c 04 	lds	r28, 0x043C	; 0x80043c <_ZL13portSnapshotD>
    1552:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <risingPinsPORTD>
    1556:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <fallingPinsPORTD>
    155a:	32 2f       	mov	r19, r18
    155c:	30 95       	com	r19
    155e:	93 23       	and	r25, r19
    1560:	82 23       	and	r24, r18
    1562:	89 2b       	or	r24, r25
    1564:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    1568:	c2 27       	eor	r28, r18
    156a:	c9 23       	and	r28, r25
    156c:	c8 23       	and	r28, r24
    156e:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <_ZL13portSnapshotD>
    1572:	cc 23       	and	r28, r28
    1574:	c1 f1       	breq	.+112    	; 0x15e6 <__vector_5+0xbe>
    1576:	c0 ff       	sbrs	r28, 0
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <__vector_5+0x5c>
    157a:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <portDFunctions>
    157e:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <portDFunctions+0x1>
    1582:	09 95       	icall
    1584:	c1 ff       	sbrs	r28, 1
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <__vector_5+0x6a>
    1588:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <portDFunctions+0x2>
    158c:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <portDFunctions+0x3>
    1590:	09 95       	icall
    1592:	c2 ff       	sbrs	r28, 2
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <__vector_5+0x78>
    1596:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <portDFunctions+0x4>
    159a:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <portDFunctions+0x5>
    159e:	09 95       	icall
    15a0:	c3 ff       	sbrs	r28, 3
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <__vector_5+0x86>
    15a4:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <portDFunctions+0x6>
    15a8:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <portDFunctions+0x7>
    15ac:	09 95       	icall
    15ae:	c4 ff       	sbrs	r28, 4
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <__vector_5+0x94>
    15b2:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <portDFunctions+0x8>
    15b6:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <portDFunctions+0x9>
    15ba:	09 95       	icall
    15bc:	c5 ff       	sbrs	r28, 5
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <__vector_5+0xa2>
    15c0:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <portDFunctions+0xa>
    15c4:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <portDFunctions+0xb>
    15c8:	09 95       	icall
    15ca:	c6 ff       	sbrs	r28, 6
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <__vector_5+0xb0>
    15ce:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <portDFunctions+0xc>
    15d2:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <portDFunctions+0xd>
    15d6:	09 95       	icall
    15d8:	c7 ff       	sbrs	r28, 7
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <__vector_5+0xbe>
    15dc:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <portDFunctions+0xe>
    15e0:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <portDFunctions+0xf>
    15e4:	09 95       	icall
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	cf 91       	pop	r28
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <_Z11setup_pcintv>:
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	61 e1       	ldi	r22, 0x11	; 17
    160e:	74 e0       	ldi	r23, 0x04	; 4
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z15enableInterrupthPFvvEh>
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	6e ed       	ldi	r22, 0xDE	; 222
    161a:	75 e0       	ldi	r23, 0x05	; 5
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z15enableInterrupthPFvvEh>
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	69 e5       	ldi	r22, 0x59	; 89
    1626:	74 e0       	ldi	r23, 0x04	; 4
    1628:	85 e0       	ldi	r24, 0x05	; 5
    162a:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z15enableInterrupthPFvvEh>
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	62 ec       	ldi	r22, 0xC2	; 194
    1632:	74 e0       	ldi	r23, 0x04	; 4
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <_Z15enableInterrupthPFvvEh>

0000163a <_Z10oled_setupv>:
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	4c e3       	ldi	r20, 0x3C	; 60
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	8e ef       	ldi	r24, 0xFE	; 254
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 34 2b 	call	0x5668	; 0x5668 <_ZN16Adafruit_SSD13065beginEhhb>
    1648:	8e ef       	ldi	r24, 0xFE	; 254
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 ee 2d 	call	0x5bdc	; 0x5bdc <_ZN16Adafruit_SSD13067displayEv>
    1650:	8e ef       	ldi	r24, 0xFE	; 254
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <_ZN16Adafruit_SSD130612clearDisplayEv>

00001658 <_Z13oled_set_textii>:
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	eb 01       	movw	r28, r22
    165e:	68 2f       	mov	r22, r24
    1660:	8e ef       	ldi	r24, 0xFE	; 254
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	0e 94 01 28 	call	0x5002	; 0x5002 <_ZN12Adafruit_GFX11setTextSizeEh>
    1668:	be 01       	movw	r22, r28
    166a:	8e ef       	ldi	r24, 0xFE	; 254
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <_ZN12Adafruit_GFX12setTextColorEj>

00001676 <_Z10oled_resetv>:
    1676:	8e ef       	ldi	r24, 0xFE	; 254
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <_ZN16Adafruit_SSD130612clearDisplayEv>
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	8e ef       	ldi	r24, 0xFE	; 254
    1688:	93 e0       	ldi	r25, 0x03	; 3
    168a:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <_ZN12Adafruit_GFX9setCursorEii>

0000168e <_Z16printCurrentFreqv>:
    168e:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <currentFreq>
    1692:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <currentFreq+0x1>
    1696:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <currentFreq+0x2>
    169a:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <currentFreq+0x3>
    169e:	88 3e       	cpi	r24, 0xE8	; 232
    16a0:	93 40       	sbci	r25, 0x03	; 3
    16a2:	a1 05       	cpc	r26, r1
    16a4:	b1 05       	cpc	r27, r1
    16a6:	dc f0       	brlt	.+54     	; 0x16de <_Z16printCurrentFreqv+0x50>
    16a8:	60 91 73 04 	lds	r22, 0x0473	; 0x800473 <currentFreq>
    16ac:	70 91 74 04 	lds	r23, 0x0474	; 0x800474 <currentFreq+0x1>
    16b0:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <currentFreq+0x2>
    16b4:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <currentFreq+0x3>
    16b8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__floatsisf>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	54 e4       	ldi	r21, 0x44	; 68
    16c4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    16c8:	ab 01       	movw	r20, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	22 e0       	ldi	r18, 0x02	; 2
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	8e ef       	ldi	r24, 0xFE	; 254
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <_ZN5Print5printEdi>
    16d8:	6a e3       	ldi	r22, 0x3A	; 58
    16da:	73 e0       	ldi	r23, 0x03	; 3
    16dc:	10 c0       	rjmp	.+32     	; 0x16fe <_Z16printCurrentFreqv+0x70>
    16de:	40 91 73 04 	lds	r20, 0x0473	; 0x800473 <currentFreq>
    16e2:	50 91 74 04 	lds	r21, 0x0474	; 0x800474 <currentFreq+0x1>
    16e6:	60 91 75 04 	lds	r22, 0x0475	; 0x800475 <currentFreq+0x2>
    16ea:	70 91 76 04 	lds	r23, 0x0476	; 0x800476 <currentFreq+0x3>
    16ee:	2a e0       	ldi	r18, 0x0A	; 10
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	8e ef       	ldi	r24, 0xFE	; 254
    16f4:	93 e0       	ldi	r25, 0x03	; 3
    16f6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN5Print5printEli>
    16fa:	6b e3       	ldi	r22, 0x3B	; 59
    16fc:	73 e0       	ldi	r23, 0x03	; 3
    16fe:	8e ef       	ldi	r24, 0xFE	; 254
    1700:	93 e0       	ldi	r25, 0x03	; 3
    1702:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <_ZN5Print5printEPKc>

00001706 <_Z14printLowerFreqv>:
    1706:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <selectedLowerFreq>
    170a:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
    170e:	a0 91 79 04 	lds	r26, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
    1712:	b0 91 7a 04 	lds	r27, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
    1716:	88 3e       	cpi	r24, 0xE8	; 232
    1718:	93 40       	sbci	r25, 0x03	; 3
    171a:	a1 05       	cpc	r26, r1
    171c:	b1 05       	cpc	r27, r1
    171e:	dc f0       	brlt	.+54     	; 0x1756 <_Z14printLowerFreqv+0x50>
    1720:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <selectedLowerFreq>
    1724:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
    1728:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
    172c:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
    1730:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__floatsisf>
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a e7       	ldi	r20, 0x7A	; 122
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    1740:	ab 01       	movw	r20, r22
    1742:	bc 01       	movw	r22, r24
    1744:	22 e0       	ldi	r18, 0x02	; 2
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	8e ef       	ldi	r24, 0xFE	; 254
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <_ZN5Print5printEdi>
    1750:	6a e3       	ldi	r22, 0x3A	; 58
    1752:	73 e0       	ldi	r23, 0x03	; 3
    1754:	10 c0       	rjmp	.+32     	; 0x1776 <_Z14printLowerFreqv+0x70>
    1756:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <selectedLowerFreq>
    175a:	50 91 78 04 	lds	r21, 0x0478	; 0x800478 <selectedLowerFreq+0x1>
    175e:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <selectedLowerFreq+0x2>
    1762:	70 91 7a 04 	lds	r23, 0x047A	; 0x80047a <selectedLowerFreq+0x3>
    1766:	2a e0       	ldi	r18, 0x0A	; 10
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8e ef       	ldi	r24, 0xFE	; 254
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN5Print5printEli>
    1772:	6b e3       	ldi	r22, 0x3B	; 59
    1774:	73 e0       	ldi	r23, 0x03	; 3
    1776:	8e ef       	ldi	r24, 0xFE	; 254
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <_ZN5Print5printEPKc>

0000177e <_Z14printUpperFreqv>:
    177e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <selectedUpperFreq>
    1782:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    1786:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    178a:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    178e:	88 3e       	cpi	r24, 0xE8	; 232
    1790:	93 40       	sbci	r25, 0x03	; 3
    1792:	a1 05       	cpc	r26, r1
    1794:	b1 05       	cpc	r27, r1
    1796:	dc f0       	brlt	.+54     	; 0x17ce <_Z14printUpperFreqv+0x50>
    1798:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <selectedUpperFreq>
    179c:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    17a0:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    17a4:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    17a8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__floatsisf>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a e7       	ldi	r20, 0x7A	; 122
    17b2:	54 e4       	ldi	r21, 0x44	; 68
    17b4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    17b8:	ab 01       	movw	r20, r22
    17ba:	bc 01       	movw	r22, r24
    17bc:	22 e0       	ldi	r18, 0x02	; 2
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8e ef       	ldi	r24, 0xFE	; 254
    17c2:	93 e0       	ldi	r25, 0x03	; 3
    17c4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <_ZN5Print5printEdi>
    17c8:	6a e3       	ldi	r22, 0x3A	; 58
    17ca:	73 e0       	ldi	r23, 0x03	; 3
    17cc:	10 c0       	rjmp	.+32     	; 0x17ee <_Z14printUpperFreqv+0x70>
    17ce:	40 91 7b 04 	lds	r20, 0x047B	; 0x80047b <selectedUpperFreq>
    17d2:	50 91 7c 04 	lds	r21, 0x047C	; 0x80047c <selectedUpperFreq+0x1>
    17d6:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <selectedUpperFreq+0x2>
    17da:	70 91 7e 04 	lds	r23, 0x047E	; 0x80047e <selectedUpperFreq+0x3>
    17de:	2a e0       	ldi	r18, 0x0A	; 10
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8e ef       	ldi	r24, 0xFE	; 254
    17e4:	93 e0       	ldi	r25, 0x03	; 3
    17e6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN5Print5printEli>
    17ea:	6b e3       	ldi	r22, 0x3B	; 59
    17ec:	73 e0       	ldi	r23, 0x03	; 3
    17ee:	8e ef       	ldi	r24, 0xFE	; 254
    17f0:	93 e0       	ldi	r25, 0x03	; 3
    17f2:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <_ZN5Print5printEPKc>

000017f6 <_Z9oled_drawv>:
    17f6:	0e 94 3b 0b 	call	0x1676	; 0x1676 <_Z10oled_resetv>
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z13oled_set_textii>
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	8e ef       	ldi	r24, 0xFE	; 254
    1810:	93 e0       	ldi	r25, 0x03	; 3
    1812:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <_ZN12Adafruit_GFX9setCursorEii>
    1816:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <func>
    181a:	81 11       	cpse	r24, r1
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <_Z9oled_drawv+0x2e>
    181e:	6e e3       	ldi	r22, 0x3E	; 62
    1820:	73 e0       	ldi	r23, 0x03	; 3
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <_Z9oled_drawv+0x40>
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	19 f4       	brne	.+6      	; 0x182e <_Z9oled_drawv+0x38>
    1828:	63 e4       	ldi	r22, 0x43	; 67
    182a:	73 e0       	ldi	r23, 0x03	; 3
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <_Z9oled_drawv+0x40>
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	31 f4       	brne	.+12     	; 0x183e <_Z9oled_drawv+0x48>
    1832:	66 e4       	ldi	r22, 0x46	; 70
    1834:	73 e0       	ldi	r23, 0x03	; 3
    1836:	8e ef       	ldi	r24, 0xFE	; 254
    1838:	93 e0       	ldi	r25, 0x03	; 3
    183a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    183e:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <mode>
    1842:	81 11       	cpse	r24, r1
    1844:	1f c0       	rjmp	.+62     	; 0x1884 <_Z9oled_drawv+0x8e>
    1846:	6a e4       	ldi	r22, 0x4A	; 74
    1848:	73 e0       	ldi	r23, 0x03	; 3
    184a:	8e ef       	ldi	r24, 0xFE	; 254
    184c:	93 e0       	ldi	r25, 0x03	; 3
    184e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    1852:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1856:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    185a:	64 e1       	ldi	r22, 0x14	; 20
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	8e ef       	ldi	r24, 0xFE	; 254
    1860:	93 e0       	ldi	r25, 0x03	; 3
    1862:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <_ZN12Adafruit_GFX9setCursorEii>
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z13oled_set_textii>
    1872:	0e 94 47 0b 	call	0x168e	; 0x168e <_Z16printCurrentFreqv>
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z13oled_set_textii>
    1882:	40 c0       	rjmp	.+128    	; 0x1904 <_Z9oled_drawv+0x10e>
    1884:	62 e5       	ldi	r22, 0x52	; 82
    1886:	73 e0       	ldi	r23, 0x03	; 3
    1888:	8e ef       	ldi	r24, 0xFE	; 254
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    1890:	69 e5       	ldi	r22, 0x59	; 89
    1892:	73 e0       	ldi	r23, 0x03	; 3
    1894:	8e ef       	ldi	r24, 0xFE	; 254
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    189c:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <ADCInput6>
    18a0:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <ADCInput6+0x1>
    18a4:	4a e0       	ldi	r20, 0x0A	; 10
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	8e ef       	ldi	r24, 0xFE	; 254
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZN5Print5printEii>
    18b0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    18b4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    18b8:	64 e1       	ldi	r22, 0x14	; 20
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	8e ef       	ldi	r24, 0xFE	; 254
    18be:	93 e0       	ldi	r25, 0x03	; 3
    18c0:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <_ZN12Adafruit_GFX9setCursorEii>
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z13oled_set_textii>
    18d0:	0e 94 47 0b 	call	0x168e	; 0x168e <_Z16printCurrentFreqv>
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z13oled_set_textii>
    18e0:	49 e1       	ldi	r20, 0x19	; 25
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	8e ef       	ldi	r24, 0xFE	; 254
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <_ZN12Adafruit_GFX9setCursorEii>
    18f0:	0e 94 83 0b 	call	0x1706	; 0x1706 <_Z14printLowerFreqv>
    18f4:	6f e5       	ldi	r22, 0x5F	; 95
    18f6:	73 e0       	ldi	r23, 0x03	; 3
    18f8:	8e ef       	ldi	r24, 0xFE	; 254
    18fa:	93 e0       	ldi	r25, 0x03	; 3
    18fc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    1900:	0e 94 bf 0b 	call	0x177e	; 0x177e <_Z14printUpperFreqv>
    1904:	8e ef       	ldi	r24, 0xFE	; 254
    1906:	93 e0       	ldi	r25, 0x03	; 3
    1908:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <_ZN16Adafruit_SSD13067displayEv>

0000190c <setup>:
    190c:	26 e0       	ldi	r18, 0x06	; 6
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	55 e2       	ldi	r21, 0x25	; 37
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	8a e9       	ldi	r24, 0x9A	; 154
    1918:	94 e0       	ldi	r25, 0x04	; 4
    191a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN14HardwareSerial5beginEmh>
    191e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <clkspeed>
    1922:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <clkspeed+0x1>
    1926:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <clkspeed+0x2>
    192a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <clkspeed+0x3>
    192e:	20 e1       	ldi	r18, 0x10	; 16
    1930:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1934:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1938:	63 e0       	ldi	r22, 0x03	; 3
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	aa 1f       	adc	r26, r26
    1940:	bb 1f       	adc	r27, r27
    1942:	6a 95       	dec	r22
    1944:	d1 f7       	brne	.-12     	; 0x193a <setup+0x2e>
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	21 e0       	ldi	r18, 0x01	; 1
    194a:	a2 07       	cpc	r26, r18
    194c:	b1 05       	cpc	r27, r1
    194e:	20 f4       	brcc	.+8      	; 0x1958 <setup+0x4c>
    1950:	21 e0       	ldi	r18, 0x01	; 1
    1952:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    1956:	42 c0       	rjmp	.+132    	; 0x19dc <setup+0xd0>
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	28 e0       	ldi	r18, 0x08	; 8
    195c:	a2 07       	cpc	r26, r18
    195e:	b1 05       	cpc	r27, r1
    1960:	58 f4       	brcc	.+22     	; 0x1978 <setup+0x6c>
    1962:	22 e0       	ldi	r18, 0x02	; 2
    1964:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    1968:	53 e0       	ldi	r21, 0x03	; 3
    196a:	b6 95       	lsr	r27
    196c:	a7 95       	ror	r26
    196e:	97 95       	ror	r25
    1970:	87 95       	ror	r24
    1972:	5a 95       	dec	r21
    1974:	d1 f7       	brne	.-12     	; 0x196a <setup+0x5e>
    1976:	32 c0       	rjmp	.+100    	; 0x19dc <setup+0xd0>
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	20 e4       	ldi	r18, 0x40	; 64
    197c:	a2 07       	cpc	r26, r18
    197e:	b1 05       	cpc	r27, r1
    1980:	58 f4       	brcc	.+22     	; 0x1998 <setup+0x8c>
    1982:	23 e0       	ldi	r18, 0x03	; 3
    1984:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    1988:	46 e0       	ldi	r20, 0x06	; 6
    198a:	b6 95       	lsr	r27
    198c:	a7 95       	ror	r26
    198e:	97 95       	ror	r25
    1990:	87 95       	ror	r24
    1992:	4a 95       	dec	r20
    1994:	d1 f7       	brne	.-12     	; 0x198a <setup+0x7e>
    1996:	22 c0       	rjmp	.+68     	; 0x19dc <setup+0xd0>
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	a1 05       	cpc	r26, r1
    199c:	21 e0       	ldi	r18, 0x01	; 1
    199e:	b2 07       	cpc	r27, r18
    19a0:	40 f4       	brcc	.+16     	; 0x19b2 <setup+0xa6>
    19a2:	24 e0       	ldi	r18, 0x04	; 4
    19a4:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    19a8:	89 2f       	mov	r24, r25
    19aa:	9a 2f       	mov	r25, r26
    19ac:	ab 2f       	mov	r26, r27
    19ae:	bb 27       	eor	r27, r27
    19b0:	15 c0       	rjmp	.+42     	; 0x19dc <setup+0xd0>
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	a1 05       	cpc	r26, r1
    19b6:	24 e0       	ldi	r18, 0x04	; 4
    19b8:	b2 07       	cpc	r27, r18
    19ba:	58 f4       	brcc	.+22     	; 0x19d2 <setup+0xc6>
    19bc:	25 e0       	ldi	r18, 0x05	; 5
    19be:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	b6 95       	lsr	r27
    19c6:	a7 95       	ror	r26
    19c8:	97 95       	ror	r25
    19ca:	87 95       	ror	r24
    19cc:	2a 95       	dec	r18
    19ce:	d1 f7       	brne	.-12     	; 0x19c4 <setup+0xb8>
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <setup+0xd0>
    19d2:	85 e0       	ldi	r24, 0x05	; 5
    19d4:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <_ZN8TimerOne9pwmPeriodE+0x1>
    19e0:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <_ZN8TimerOne9pwmPeriodE>
    19e4:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8TimerOne9pwmPeriodE>
    19e8:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8TimerOne9pwmPeriodE+0x1>
    19ec:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    19f0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    19f4:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <_ZN8TimerOne15clockSelectBitsE>
    19f8:	80 61       	ori	r24, 0x10	; 16
    19fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19fe:	8e ea       	ldi	r24, 0xAE	; 174
    1a00:	98 e0       	ldi	r25, 0x08	; 8
    1a02:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <_ZN8TimerOne11isrCallbackE+0x1>
    1a06:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <_ZN8TimerOne11isrCallbackE>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a10:	0e 94 05 0b 	call	0x160a	; 0x160a <_Z11setup_pcintv>
    1a14:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z9adc_setupv>
    1a18:	0e 94 1d 0b 	call	0x163a	; 0x163a <_Z10oled_setupv>
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	89 e0       	ldi	r24, 0x09	; 9
    1a20:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	89 e0       	ldi	r24, 0x09	; 9
    1a28:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	8a e0       	ldi	r24, 0x0A	; 10
    1a30:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	8a e0       	ldi	r24, 0x0A	; 10
    1a38:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    1a3c:	0e 94 65 34 	call	0x68ca	; 0x68ca <_ZN8SPIClass5beginEv>
    1a40:	49 e0       	ldi	r20, 0x09	; 9
    1a42:	6f ef       	ldi	r22, 0xFF	; 255
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	81 e1       	ldi	r24, 0x11	; 17
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
    1a4e:	49 e0       	ldi	r20, 0x09	; 9
    1a50:	6e e1       	ldi	r22, 0x1E	; 30
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	81 e1       	ldi	r24, 0x11	; 17
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
    1a5c:	49 e0       	ldi	r20, 0x09	; 9
    1a5e:	6f ef       	ldi	r22, 0xFF	; 255
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	81 e1       	ldi	r24, 0x11	; 17
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
    1a6a:	49 e0       	ldi	r20, 0x09	; 9
    1a6c:	67 e5       	ldi	r22, 0x57	; 87
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	82 e1       	ldi	r24, 0x12	; 18
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
    1a78:	49 e0       	ldi	r20, 0x09	; 9
    1a7a:	6a e0       	ldi	r22, 0x0A	; 10
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	82 e1       	ldi	r24, 0x12	; 18
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>
    1a86:	49 e0       	ldi	r20, 0x09	; 9
    1a88:	67 e5       	ldi	r22, 0x57	; 87
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	82 e1       	ldi	r24, 0x12	; 18
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <_Z17digipot_write_spiiih>

00001a94 <main>:


int main(void)
{
	
	init();
    1a94:	0e 94 75 19 	call	0x32ea	; 0x32ea <init>

	//initVariant();

		
	
	setup();
    1a98:	0e 94 86 0c 	call	0x190c	; 0x190c <setup>
	
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1a9c:	c4 e7       	ldi	r28, 0x74	; 116
    1a9e:	df e0       	ldi	r29, 0x0F	; 15
  digipot_write_spi(MCP_WRITEPB1, SineOffsetLvl, digipot_ss_pin);
}

void loop() 
{
  oled_draw();
    1aa0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_Z9oled_drawv>
	
	setup();
	
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1aa4:	20 97       	sbiw	r28, 0x00	; 0
    1aa6:	e1 f3       	breq	.-8      	; 0x1aa0 <main+0xc>
    1aa8:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_Z14serialEventRunv>
    1aac:	f9 cf       	rjmp	.-14     	; 0x1aa0 <main+0xc>

00001aae <_GLOBAL__sub_I__Z17printBinaryNIBBLEh>:
// phase presets and current setting
int PHASE0 = 0xC000;
int PHASE90 = 0xC400;
int PHASE180 = 0xC800;
int PHASE270 = 0xCC00;
int current_phase = PHASE0;
    1aae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PHASE0>
    1ab2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <PHASE0+0x1>
    1ab6:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <current_phase+0x1>
    1aba:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <current_phase>
#include <Adafruit_SSD1306.h>
#include "dds.h"
#include "pcint.h"

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	8e ef       	ldi	r24, 0xFE	; 254
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <_ZN16Adafruit_SSD1306C1Ea>

00001ac8 <__subsf3>:
    1ac8:	50 58       	subi	r21, 0x80	; 128

00001aca <__addsf3>:
    1aca:	bb 27       	eor	r27, r27
    1acc:	aa 27       	eor	r26, r26
    1ace:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__addsf3x>
    1ad2:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__fp_round>
    1ad6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscA>
    1ada:	38 f0       	brcs	.+14     	; 0x1aea <__addsf3+0x20>
    1adc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_pscB>
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <__addsf3+0x20>
    1ae2:	39 f4       	brne	.+14     	; 0x1af2 <__addsf3+0x28>
    1ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <__addsf3+0x24>
    1ae8:	26 f4       	brtc	.+8      	; 0x1af2 <__addsf3+0x28>
    1aea:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_nan>
    1aee:	0e f4       	brtc	.+2      	; 0x1af2 <__addsf3+0x28>
    1af0:	e0 95       	com	r30
    1af2:	e7 fb       	bst	r30, 7
    1af4:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>

00001af8 <__addsf3x>:
    1af8:	e9 2f       	mov	r30, r25
    1afa:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_split3>
    1afe:	58 f3       	brcs	.-42     	; 0x1ad6 <__addsf3+0xc>
    1b00:	ba 17       	cp	r27, r26
    1b02:	62 07       	cpc	r22, r18
    1b04:	73 07       	cpc	r23, r19
    1b06:	84 07       	cpc	r24, r20
    1b08:	95 07       	cpc	r25, r21
    1b0a:	20 f0       	brcs	.+8      	; 0x1b14 <__addsf3x+0x1c>
    1b0c:	79 f4       	brne	.+30     	; 0x1b2c <__addsf3x+0x34>
    1b0e:	a6 f5       	brtc	.+104    	; 0x1b78 <__addsf3x+0x80>
    1b10:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__fp_zero>
    1b14:	0e f4       	brtc	.+2      	; 0x1b18 <__addsf3x+0x20>
    1b16:	e0 95       	com	r30
    1b18:	0b 2e       	mov	r0, r27
    1b1a:	ba 2f       	mov	r27, r26
    1b1c:	a0 2d       	mov	r26, r0
    1b1e:	0b 01       	movw	r0, r22
    1b20:	b9 01       	movw	r22, r18
    1b22:	90 01       	movw	r18, r0
    1b24:	0c 01       	movw	r0, r24
    1b26:	ca 01       	movw	r24, r20
    1b28:	a0 01       	movw	r20, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	ff 27       	eor	r31, r31
    1b2e:	59 1b       	sub	r21, r25
    1b30:	99 f0       	breq	.+38     	; 0x1b58 <__addsf3x+0x60>
    1b32:	59 3f       	cpi	r21, 0xF9	; 249
    1b34:	50 f4       	brcc	.+20     	; 0x1b4a <__addsf3x+0x52>
    1b36:	50 3e       	cpi	r21, 0xE0	; 224
    1b38:	68 f1       	brcs	.+90     	; 0x1b94 <__addsf3x+0x9c>
    1b3a:	1a 16       	cp	r1, r26
    1b3c:	f0 40       	sbci	r31, 0x00	; 0
    1b3e:	a2 2f       	mov	r26, r18
    1b40:	23 2f       	mov	r18, r19
    1b42:	34 2f       	mov	r19, r20
    1b44:	44 27       	eor	r20, r20
    1b46:	58 5f       	subi	r21, 0xF8	; 248
    1b48:	f3 cf       	rjmp	.-26     	; 0x1b30 <__addsf3x+0x38>
    1b4a:	46 95       	lsr	r20
    1b4c:	37 95       	ror	r19
    1b4e:	27 95       	ror	r18
    1b50:	a7 95       	ror	r26
    1b52:	f0 40       	sbci	r31, 0x00	; 0
    1b54:	53 95       	inc	r21
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <__addsf3x+0x52>
    1b58:	7e f4       	brtc	.+30     	; 0x1b78 <__addsf3x+0x80>
    1b5a:	1f 16       	cp	r1, r31
    1b5c:	ba 0b       	sbc	r27, r26
    1b5e:	62 0b       	sbc	r22, r18
    1b60:	73 0b       	sbc	r23, r19
    1b62:	84 0b       	sbc	r24, r20
    1b64:	ba f0       	brmi	.+46     	; 0x1b94 <__addsf3x+0x9c>
    1b66:	91 50       	subi	r25, 0x01	; 1
    1b68:	a1 f0       	breq	.+40     	; 0x1b92 <__addsf3x+0x9a>
    1b6a:	ff 0f       	add	r31, r31
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	66 1f       	adc	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	c2 f7       	brpl	.-16     	; 0x1b66 <__addsf3x+0x6e>
    1b76:	0e c0       	rjmp	.+28     	; 0x1b94 <__addsf3x+0x9c>
    1b78:	ba 0f       	add	r27, r26
    1b7a:	62 1f       	adc	r22, r18
    1b7c:	73 1f       	adc	r23, r19
    1b7e:	84 1f       	adc	r24, r20
    1b80:	48 f4       	brcc	.+18     	; 0x1b94 <__addsf3x+0x9c>
    1b82:	87 95       	ror	r24
    1b84:	77 95       	ror	r23
    1b86:	67 95       	ror	r22
    1b88:	b7 95       	ror	r27
    1b8a:	f7 95       	ror	r31
    1b8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <__addsf3x+0x9a>
    1b90:	b0 cf       	rjmp	.-160    	; 0x1af2 <__addsf3+0x28>
    1b92:	93 95       	inc	r25
    1b94:	88 0f       	add	r24, r24
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <__addsf3x+0xa2>
    1b98:	99 27       	eor	r25, r25
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	97 95       	ror	r25
    1b9e:	87 95       	ror	r24
    1ba0:	08 95       	ret

00001ba2 <__divsf3>:
    1ba2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__divsf3x>
    1ba6:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__fp_round>
    1baa:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_pscB>
    1bae:	58 f0       	brcs	.+22     	; 0x1bc6 <__divsf3+0x24>
    1bb0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscA>
    1bb4:	40 f0       	brcs	.+16     	; 0x1bc6 <__divsf3+0x24>
    1bb6:	29 f4       	brne	.+10     	; 0x1bc2 <__divsf3+0x20>
    1bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bba:	29 f0       	breq	.+10     	; 0x1bc6 <__divsf3+0x24>
    1bbc:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1bc0:	51 11       	cpse	r21, r1
    1bc2:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__fp_szero>
    1bc6:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_nan>

00001bca <__divsf3x>:
    1bca:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_split3>
    1bce:	68 f3       	brcs	.-38     	; 0x1baa <__divsf3+0x8>

00001bd0 <__divsf3_pse>:
    1bd0:	99 23       	and	r25, r25
    1bd2:	b1 f3       	breq	.-20     	; 0x1bc0 <__divsf3+0x1e>
    1bd4:	55 23       	and	r21, r21
    1bd6:	91 f3       	breq	.-28     	; 0x1bbc <__divsf3+0x1a>
    1bd8:	95 1b       	sub	r25, r21
    1bda:	55 0b       	sbc	r21, r21
    1bdc:	bb 27       	eor	r27, r27
    1bde:	aa 27       	eor	r26, r26
    1be0:	62 17       	cp	r22, r18
    1be2:	73 07       	cpc	r23, r19
    1be4:	84 07       	cpc	r24, r20
    1be6:	38 f0       	brcs	.+14     	; 0x1bf6 <__divsf3_pse+0x26>
    1be8:	9f 5f       	subi	r25, 0xFF	; 255
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255
    1bec:	22 0f       	add	r18, r18
    1bee:	33 1f       	adc	r19, r19
    1bf0:	44 1f       	adc	r20, r20
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	a9 f3       	breq	.-22     	; 0x1be0 <__divsf3_pse+0x10>
    1bf6:	35 d0       	rcall	.+106    	; 0x1c62 <__divsf3_pse+0x92>
    1bf8:	0e 2e       	mov	r0, r30
    1bfa:	3a f0       	brmi	.+14     	; 0x1c0a <__divsf3_pse+0x3a>
    1bfc:	e0 e8       	ldi	r30, 0x80	; 128
    1bfe:	32 d0       	rcall	.+100    	; 0x1c64 <__divsf3_pse+0x94>
    1c00:	91 50       	subi	r25, 0x01	; 1
    1c02:	50 40       	sbci	r21, 0x00	; 0
    1c04:	e6 95       	lsr	r30
    1c06:	00 1c       	adc	r0, r0
    1c08:	ca f7       	brpl	.-14     	; 0x1bfc <__divsf3_pse+0x2c>
    1c0a:	2b d0       	rcall	.+86     	; 0x1c62 <__divsf3_pse+0x92>
    1c0c:	fe 2f       	mov	r31, r30
    1c0e:	29 d0       	rcall	.+82     	; 0x1c62 <__divsf3_pse+0x92>
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	bb 1f       	adc	r27, r27
    1c18:	26 17       	cp	r18, r22
    1c1a:	37 07       	cpc	r19, r23
    1c1c:	48 07       	cpc	r20, r24
    1c1e:	ab 07       	cpc	r26, r27
    1c20:	b0 e8       	ldi	r27, 0x80	; 128
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <__divsf3_pse+0x56>
    1c24:	bb 0b       	sbc	r27, r27
    1c26:	80 2d       	mov	r24, r0
    1c28:	bf 01       	movw	r22, r30
    1c2a:	ff 27       	eor	r31, r31
    1c2c:	93 58       	subi	r25, 0x83	; 131
    1c2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c30:	3a f0       	brmi	.+14     	; 0x1c40 <__divsf3_pse+0x70>
    1c32:	9e 3f       	cpi	r25, 0xFE	; 254
    1c34:	51 05       	cpc	r21, r1
    1c36:	78 f0       	brcs	.+30     	; 0x1c56 <__divsf3_pse+0x86>
    1c38:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1c3c:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__fp_szero>
    1c40:	5f 3f       	cpi	r21, 0xFF	; 255
    1c42:	e4 f3       	brlt	.-8      	; 0x1c3c <__divsf3_pse+0x6c>
    1c44:	98 3e       	cpi	r25, 0xE8	; 232
    1c46:	d4 f3       	brlt	.-12     	; 0x1c3c <__divsf3_pse+0x6c>
    1c48:	86 95       	lsr	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	b7 95       	ror	r27
    1c50:	f7 95       	ror	r31
    1c52:	9f 5f       	subi	r25, 0xFF	; 255
    1c54:	c9 f7       	brne	.-14     	; 0x1c48 <__divsf3_pse+0x78>
    1c56:	88 0f       	add	r24, r24
    1c58:	91 1d       	adc	r25, r1
    1c5a:	96 95       	lsr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	97 f9       	bld	r25, 7
    1c60:	08 95       	ret
    1c62:	e1 e0       	ldi	r30, 0x01	; 1
    1c64:	66 0f       	add	r22, r22
    1c66:	77 1f       	adc	r23, r23
    1c68:	88 1f       	adc	r24, r24
    1c6a:	bb 1f       	adc	r27, r27
    1c6c:	62 17       	cp	r22, r18
    1c6e:	73 07       	cpc	r23, r19
    1c70:	84 07       	cpc	r24, r20
    1c72:	ba 07       	cpc	r27, r26
    1c74:	20 f0       	brcs	.+8      	; 0x1c7e <__divsf3_pse+0xae>
    1c76:	62 1b       	sub	r22, r18
    1c78:	73 0b       	sbc	r23, r19
    1c7a:	84 0b       	sbc	r24, r20
    1c7c:	ba 0b       	sbc	r27, r26
    1c7e:	ee 1f       	adc	r30, r30
    1c80:	88 f7       	brcc	.-30     	; 0x1c64 <__divsf3_pse+0x94>
    1c82:	e0 95       	com	r30
    1c84:	08 95       	ret

00001c86 <__fixsfsi>:
    1c86:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fixunssfsi>
    1c8a:	68 94       	set
    1c8c:	b1 11       	cpse	r27, r1
    1c8e:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__fp_szero>
    1c92:	08 95       	ret

00001c94 <__fixunssfsi>:
    1c94:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__fp_splitA>
    1c98:	88 f0       	brcs	.+34     	; 0x1cbc <__fixunssfsi+0x28>
    1c9a:	9f 57       	subi	r25, 0x7F	; 127
    1c9c:	98 f0       	brcs	.+38     	; 0x1cc4 <__fixunssfsi+0x30>
    1c9e:	b9 2f       	mov	r27, r25
    1ca0:	99 27       	eor	r25, r25
    1ca2:	b7 51       	subi	r27, 0x17	; 23
    1ca4:	b0 f0       	brcs	.+44     	; 0x1cd2 <__fixunssfsi+0x3e>
    1ca6:	e1 f0       	breq	.+56     	; 0x1ce0 <__fixunssfsi+0x4c>
    1ca8:	66 0f       	add	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	88 1f       	adc	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	1a f0       	brmi	.+6      	; 0x1cb8 <__fixunssfsi+0x24>
    1cb2:	ba 95       	dec	r27
    1cb4:	c9 f7       	brne	.-14     	; 0x1ca8 <__fixunssfsi+0x14>
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <__fixunssfsi+0x4c>
    1cb8:	b1 30       	cpi	r27, 0x01	; 1
    1cba:	91 f0       	breq	.+36     	; 0x1ce0 <__fixunssfsi+0x4c>
    1cbc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__fp_zero>
    1cc0:	b1 e0       	ldi	r27, 0x01	; 1
    1cc2:	08 95       	ret
    1cc4:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__fp_zero>
    1cc8:	67 2f       	mov	r22, r23
    1cca:	78 2f       	mov	r23, r24
    1ccc:	88 27       	eor	r24, r24
    1cce:	b8 5f       	subi	r27, 0xF8	; 248
    1cd0:	39 f0       	breq	.+14     	; 0x1ce0 <__fixunssfsi+0x4c>
    1cd2:	b9 3f       	cpi	r27, 0xF9	; 249
    1cd4:	cc f3       	brlt	.-14     	; 0x1cc8 <__fixunssfsi+0x34>
    1cd6:	86 95       	lsr	r24
    1cd8:	77 95       	ror	r23
    1cda:	67 95       	ror	r22
    1cdc:	b3 95       	inc	r27
    1cde:	d9 f7       	brne	.-10     	; 0x1cd6 <__fixunssfsi+0x42>
    1ce0:	3e f4       	brtc	.+14     	; 0x1cf0 <__fixunssfsi+0x5c>
    1ce2:	90 95       	com	r25
    1ce4:	80 95       	com	r24
    1ce6:	70 95       	com	r23
    1ce8:	61 95       	neg	r22
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	8f 4f       	sbci	r24, 0xFF	; 255
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	08 95       	ret

00001cf2 <__floatunsisf>:
    1cf2:	e8 94       	clt
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <__floatsisf+0x12>

00001cf6 <__floatsisf>:
    1cf6:	97 fb       	bst	r25, 7
    1cf8:	3e f4       	brtc	.+14     	; 0x1d08 <__floatsisf+0x12>
    1cfa:	90 95       	com	r25
    1cfc:	80 95       	com	r24
    1cfe:	70 95       	com	r23
    1d00:	61 95       	neg	r22
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
    1d04:	8f 4f       	sbci	r24, 0xFF	; 255
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	99 23       	and	r25, r25
    1d0a:	a9 f0       	breq	.+42     	; 0x1d36 <__floatsisf+0x40>
    1d0c:	f9 2f       	mov	r31, r25
    1d0e:	96 e9       	ldi	r25, 0x96	; 150
    1d10:	bb 27       	eor	r27, r27
    1d12:	93 95       	inc	r25
    1d14:	f6 95       	lsr	r31
    1d16:	87 95       	ror	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	b7 95       	ror	r27
    1d1e:	f1 11       	cpse	r31, r1
    1d20:	f8 cf       	rjmp	.-16     	; 0x1d12 <__floatsisf+0x1c>
    1d22:	fa f4       	brpl	.+62     	; 0x1d62 <__floatsisf+0x6c>
    1d24:	bb 0f       	add	r27, r27
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <__floatsisf+0x36>
    1d28:	60 ff       	sbrs	r22, 0
    1d2a:	1b c0       	rjmp	.+54     	; 0x1d62 <__floatsisf+0x6c>
    1d2c:	6f 5f       	subi	r22, 0xFF	; 255
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	8f 4f       	sbci	r24, 0xFF	; 255
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	16 c0       	rjmp	.+44     	; 0x1d62 <__floatsisf+0x6c>
    1d36:	88 23       	and	r24, r24
    1d38:	11 f0       	breq	.+4      	; 0x1d3e <__floatsisf+0x48>
    1d3a:	96 e9       	ldi	r25, 0x96	; 150
    1d3c:	11 c0       	rjmp	.+34     	; 0x1d60 <__floatsisf+0x6a>
    1d3e:	77 23       	and	r23, r23
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <__floatsisf+0x54>
    1d42:	9e e8       	ldi	r25, 0x8E	; 142
    1d44:	87 2f       	mov	r24, r23
    1d46:	76 2f       	mov	r23, r22
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <__floatsisf+0x5e>
    1d4a:	66 23       	and	r22, r22
    1d4c:	71 f0       	breq	.+28     	; 0x1d6a <__floatsisf+0x74>
    1d4e:	96 e8       	ldi	r25, 0x86	; 134
    1d50:	86 2f       	mov	r24, r22
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	2a f0       	brmi	.+10     	; 0x1d62 <__floatsisf+0x6c>
    1d58:	9a 95       	dec	r25
    1d5a:	66 0f       	add	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	88 1f       	adc	r24, r24
    1d60:	da f7       	brpl	.-10     	; 0x1d58 <__floatsisf+0x62>
    1d62:	88 0f       	add	r24, r24
    1d64:	96 95       	lsr	r25
    1d66:	87 95       	ror	r24
    1d68:	97 f9       	bld	r25, 7
    1d6a:	08 95       	ret

00001d6c <__fp_inf>:
    1d6c:	97 f9       	bld	r25, 7
    1d6e:	9f 67       	ori	r25, 0x7F	; 127
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	08 95       	ret

00001d78 <__fp_nan>:
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	80 ec       	ldi	r24, 0xC0	; 192
    1d7c:	08 95       	ret

00001d7e <__fp_pscA>:
    1d7e:	00 24       	eor	r0, r0
    1d80:	0a 94       	dec	r0
    1d82:	16 16       	cp	r1, r22
    1d84:	17 06       	cpc	r1, r23
    1d86:	18 06       	cpc	r1, r24
    1d88:	09 06       	cpc	r0, r25
    1d8a:	08 95       	ret

00001d8c <__fp_pscB>:
    1d8c:	00 24       	eor	r0, r0
    1d8e:	0a 94       	dec	r0
    1d90:	12 16       	cp	r1, r18
    1d92:	13 06       	cpc	r1, r19
    1d94:	14 06       	cpc	r1, r20
    1d96:	05 06       	cpc	r0, r21
    1d98:	08 95       	ret

00001d9a <__fp_round>:
    1d9a:	09 2e       	mov	r0, r25
    1d9c:	03 94       	inc	r0
    1d9e:	00 0c       	add	r0, r0
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <__fp_round+0xc>
    1da2:	88 23       	and	r24, r24
    1da4:	52 f0       	brmi	.+20     	; 0x1dba <__fp_round+0x20>
    1da6:	bb 0f       	add	r27, r27
    1da8:	40 f4       	brcc	.+16     	; 0x1dba <__fp_round+0x20>
    1daa:	bf 2b       	or	r27, r31
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <__fp_round+0x18>
    1dae:	60 ff       	sbrs	r22, 0
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <__fp_round+0x20>
    1db2:	6f 5f       	subi	r22, 0xFF	; 255
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	8f 4f       	sbci	r24, 0xFF	; 255
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	08 95       	ret

00001dbc <__fp_split3>:
    1dbc:	57 fd       	sbrc	r21, 7
    1dbe:	90 58       	subi	r25, 0x80	; 128
    1dc0:	44 0f       	add	r20, r20
    1dc2:	55 1f       	adc	r21, r21
    1dc4:	59 f0       	breq	.+22     	; 0x1ddc <__fp_splitA+0x10>
    1dc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc8:	71 f0       	breq	.+28     	; 0x1de6 <__fp_splitA+0x1a>
    1dca:	47 95       	ror	r20

00001dcc <__fp_splitA>:
    1dcc:	88 0f       	add	r24, r24
    1dce:	97 fb       	bst	r25, 7
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	61 f0       	breq	.+24     	; 0x1dec <__fp_splitA+0x20>
    1dd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd6:	79 f0       	breq	.+30     	; 0x1df6 <__fp_splitA+0x2a>
    1dd8:	87 95       	ror	r24
    1dda:	08 95       	ret
    1ddc:	12 16       	cp	r1, r18
    1dde:	13 06       	cpc	r1, r19
    1de0:	14 06       	cpc	r1, r20
    1de2:	55 1f       	adc	r21, r21
    1de4:	f2 cf       	rjmp	.-28     	; 0x1dca <__fp_split3+0xe>
    1de6:	46 95       	lsr	r20
    1de8:	f1 df       	rcall	.-30     	; 0x1dcc <__fp_splitA>
    1dea:	08 c0       	rjmp	.+16     	; 0x1dfc <__fp_splitA+0x30>
    1dec:	16 16       	cp	r1, r22
    1dee:	17 06       	cpc	r1, r23
    1df0:	18 06       	cpc	r1, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	f1 cf       	rjmp	.-30     	; 0x1dd8 <__fp_splitA+0xc>
    1df6:	86 95       	lsr	r24
    1df8:	71 05       	cpc	r23, r1
    1dfa:	61 05       	cpc	r22, r1
    1dfc:	08 94       	sec
    1dfe:	08 95       	ret

00001e00 <__fp_zero>:
    1e00:	e8 94       	clt

00001e02 <__fp_szero>:
    1e02:	bb 27       	eor	r27, r27
    1e04:	66 27       	eor	r22, r22
    1e06:	77 27       	eor	r23, r23
    1e08:	cb 01       	movw	r24, r22
    1e0a:	97 f9       	bld	r25, 7
    1e0c:	08 95       	ret

00001e0e <__mulsf3>:
    1e0e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__mulsf3x>
    1e12:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__fp_round>
    1e16:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_pscA>
    1e1a:	38 f0       	brcs	.+14     	; 0x1e2a <__mulsf3+0x1c>
    1e1c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_pscB>
    1e20:	20 f0       	brcs	.+8      	; 0x1e2a <__mulsf3+0x1c>
    1e22:	95 23       	and	r25, r21
    1e24:	11 f0       	breq	.+4      	; 0x1e2a <__mulsf3+0x1c>
    1e26:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1e2a:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_nan>
    1e2e:	11 24       	eor	r1, r1
    1e30:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__fp_szero>

00001e34 <__mulsf3x>:
    1e34:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_split3>
    1e38:	70 f3       	brcs	.-36     	; 0x1e16 <__mulsf3+0x8>

00001e3a <__mulsf3_pse>:
    1e3a:	95 9f       	mul	r25, r21
    1e3c:	c1 f3       	breq	.-16     	; 0x1e2e <__mulsf3+0x20>
    1e3e:	95 0f       	add	r25, r21
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	55 1f       	adc	r21, r21
    1e44:	62 9f       	mul	r22, r18
    1e46:	f0 01       	movw	r30, r0
    1e48:	72 9f       	mul	r23, r18
    1e4a:	bb 27       	eor	r27, r27
    1e4c:	f0 0d       	add	r31, r0
    1e4e:	b1 1d       	adc	r27, r1
    1e50:	63 9f       	mul	r22, r19
    1e52:	aa 27       	eor	r26, r26
    1e54:	f0 0d       	add	r31, r0
    1e56:	b1 1d       	adc	r27, r1
    1e58:	aa 1f       	adc	r26, r26
    1e5a:	64 9f       	mul	r22, r20
    1e5c:	66 27       	eor	r22, r22
    1e5e:	b0 0d       	add	r27, r0
    1e60:	a1 1d       	adc	r26, r1
    1e62:	66 1f       	adc	r22, r22
    1e64:	82 9f       	mul	r24, r18
    1e66:	22 27       	eor	r18, r18
    1e68:	b0 0d       	add	r27, r0
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	62 1f       	adc	r22, r18
    1e6e:	73 9f       	mul	r23, r19
    1e70:	b0 0d       	add	r27, r0
    1e72:	a1 1d       	adc	r26, r1
    1e74:	62 1f       	adc	r22, r18
    1e76:	83 9f       	mul	r24, r19
    1e78:	a0 0d       	add	r26, r0
    1e7a:	61 1d       	adc	r22, r1
    1e7c:	22 1f       	adc	r18, r18
    1e7e:	74 9f       	mul	r23, r20
    1e80:	33 27       	eor	r19, r19
    1e82:	a0 0d       	add	r26, r0
    1e84:	61 1d       	adc	r22, r1
    1e86:	23 1f       	adc	r18, r19
    1e88:	84 9f       	mul	r24, r20
    1e8a:	60 0d       	add	r22, r0
    1e8c:	21 1d       	adc	r18, r1
    1e8e:	82 2f       	mov	r24, r18
    1e90:	76 2f       	mov	r23, r22
    1e92:	6a 2f       	mov	r22, r26
    1e94:	11 24       	eor	r1, r1
    1e96:	9f 57       	subi	r25, 0x7F	; 127
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	9a f0       	brmi	.+38     	; 0x1ec2 <__mulsf3_pse+0x88>
    1e9c:	f1 f0       	breq	.+60     	; 0x1eda <__mulsf3_pse+0xa0>
    1e9e:	88 23       	and	r24, r24
    1ea0:	4a f0       	brmi	.+18     	; 0x1eb4 <__mulsf3_pse+0x7a>
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	66 1f       	adc	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	91 50       	subi	r25, 0x01	; 1
    1eb0:	50 40       	sbci	r21, 0x00	; 0
    1eb2:	a9 f7       	brne	.-22     	; 0x1e9e <__mulsf3_pse+0x64>
    1eb4:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb6:	51 05       	cpc	r21, r1
    1eb8:	80 f0       	brcs	.+32     	; 0x1eda <__mulsf3_pse+0xa0>
    1eba:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1ebe:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__fp_szero>
    1ec2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec4:	e4 f3       	brlt	.-8      	; 0x1ebe <__mulsf3_pse+0x84>
    1ec6:	98 3e       	cpi	r25, 0xE8	; 232
    1ec8:	d4 f3       	brlt	.-12     	; 0x1ebe <__mulsf3_pse+0x84>
    1eca:	86 95       	lsr	r24
    1ecc:	77 95       	ror	r23
    1ece:	67 95       	ror	r22
    1ed0:	b7 95       	ror	r27
    1ed2:	f7 95       	ror	r31
    1ed4:	e7 95       	ror	r30
    1ed6:	9f 5f       	subi	r25, 0xFF	; 255
    1ed8:	c1 f7       	brne	.-16     	; 0x1eca <__mulsf3_pse+0x90>
    1eda:	fe 2b       	or	r31, r30
    1edc:	88 0f       	add	r24, r24
    1ede:	91 1d       	adc	r25, r1
    1ee0:	96 95       	lsr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	97 f9       	bld	r25, 7
    1ee6:	08 95       	ret

00001ee8 <_Z14serialEventRunv>:
  cbi(*_ucsrb, RXCIE0);
  cbi(*_ucsrb, UDRIE0);
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	94 e1       	ldi	r25, 0x14	; 20
    1ef4:	89 2b       	or	r24, r25
    1ef6:	51 f0       	breq	.+20     	; 0x1f0c <_Z14serialEventRunv+0x24>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	89 2b       	or	r24, r25
    1efe:	31 f0       	breq	.+12     	; 0x1f0c <_Z14serialEventRunv+0x24>
    1f00:	0e 94 00 14 	call	0x2800	; 0x2800 <_Z17Serial0_availablev>
    1f04:	88 23       	and	r24, r24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <_Z14serialEventRunv+0x24>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <_Z14serialEventRunv+0x26>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	88 23       	and	r24, r24
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <_Z14serialEventRunv+0x2e>
    1f12:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f16:	00 00       	nop
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	08 95       	ret

00001f1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
    1f24:	1f 92       	push	r1
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	8a 83       	std	Y+2, r24	; 0x02
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	fc 01       	movw	r30, r24
    1f34:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	83 5a       	subi	r24, 0xA3	; 163
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	fc 01       	movw	r30, r24
    1f48:	80 81       	ld	r24, Z
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	fc 01       	movw	r30, r24
    1f52:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	8f 73       	andi	r24, 0x3F	; 63
    1f5c:	90 78       	andi	r25, 0x80	; 128
    1f5e:	99 23       	and	r25, r25
    1f60:	24 f4       	brge	.+8      	; 0x1f6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4c>
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	80 6c       	ori	r24, 0xC0	; 192
    1f66:	9f 6f       	ori	r25, 0xFF	; 255
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f70:	fc 01       	movw	r30, r24
    1f72:	24 8f       	std	Z+28, r18	; 0x1c
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	fc 01       	movw	r30, r24
    1f7a:	86 89       	ldd	r24, Z+22	; 0x16
    1f7c:	97 89       	ldd	r25, Z+23	; 0x17
    1f7e:	29 81       	ldd	r18, Y+1	; 0x01
    1f80:	fc 01       	movw	r30, r24
    1f82:	20 83       	st	Z, r18
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	fc 01       	movw	r30, r24
    1f8a:	80 89       	ldd	r24, Z+16	; 0x10
    1f8c:	91 89       	ldd	r25, Z+17	; 0x11
    1f8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f90:	3b 81       	ldd	r19, Y+3	; 0x03
    1f92:	f9 01       	movw	r30, r18
    1f94:	20 89       	ldd	r18, Z+16	; 0x10
    1f96:	31 89       	ldd	r19, Z+17	; 0x11
    1f98:	f9 01       	movw	r30, r18
    1f9a:	20 81       	ld	r18, Z
    1f9c:	20 64       	ori	r18, 0x40	; 64
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	20 83       	st	Z, r18
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	23 8d       	ldd	r18, Z+27	; 0x1b
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	fc 01       	movw	r30, r24
    1fb0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	29 17       	cp	r18, r25
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9c>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	88 23       	and	r24, r24
    1fbc:	79 f0       	breq	.+30     	; 0x1fdc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbe>
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	82 89       	ldd	r24, Z+18	; 0x12
    1fc6:	93 89       	ldd	r25, Z+19	; 0x13
    1fc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1fca:	3b 81       	ldd	r19, Y+3	; 0x03
    1fcc:	f9 01       	movw	r30, r18
    1fce:	22 89       	ldd	r18, Z+18	; 0x12
    1fd0:	33 89       	ldd	r19, Z+19	; 0x13
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	20 81       	ld	r18, Z
    1fd6:	2f 7d       	andi	r18, 0xDF	; 223
    1fd8:	fc 01       	movw	r30, r24
    1fda:	20 83       	st	Z, r18
    1fdc:	00 00       	nop
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	08 95       	ret

00001fea <_ZN14HardwareSerial5beginEmh>:
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	29 97       	sbiw	r28, 0x09	; 9
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	4d 83       	std	Y+5, r20	; 0x05
    2004:	5e 83       	std	Y+6, r21	; 0x06
    2006:	6f 83       	std	Y+7, r22	; 0x07
    2008:	78 87       	std	Y+8, r23	; 0x08
    200a:	29 87       	std	Y+9, r18	; 0x09
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	99 e0       	ldi	r25, 0x09	; 9
    2010:	ad e3       	ldi	r26, 0x3D	; 61
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	2d 81       	ldd	r18, Y+5	; 0x05
    2016:	3e 81       	ldd	r19, Y+6	; 0x06
    2018:	4f 81       	ldd	r20, Y+7	; 0x07
    201a:	58 85       	ldd	r21, Y+8	; 0x08
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__udivmodsi4>
    2024:	da 01       	movw	r26, r20
    2026:	c9 01       	movw	r24, r18
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	a1 09       	sbc	r26, r1
    202c:	b1 09       	sbc	r27, r1
    202e:	b6 95       	lsr	r27
    2030:	a7 95       	ror	r26
    2032:	97 95       	ror	r25
    2034:	87 95       	ror	r24
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	fc 01       	movw	r30, r24
    2040:	80 89       	ldd	r24, Z+16	; 0x10
    2042:	91 89       	ldd	r25, Z+17	; 0x11
    2044:	22 e0       	ldi	r18, 0x02	; 2
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	af 81       	ldd	r26, Y+7	; 0x07
    2050:	b8 85       	ldd	r27, Y+8	; 0x08
    2052:	81 15       	cp	r24, r1
    2054:	91 4e       	sbci	r25, 0xE1	; 225
    2056:	a1 05       	cpc	r26, r1
    2058:	b1 05       	cpc	r27, r1
    205a:	29 f0       	breq	.+10     	; 0x2066 <_ZN14HardwareSerial5beginEmh+0x7c>
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	81 15       	cp	r24, r1
    2062:	90 41       	sbci	r25, 0x10	; 16
    2064:	f0 f0       	brcs	.+60     	; 0x20a2 <_ZN14HardwareSerial5beginEmh+0xb8>
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	fc 01       	movw	r30, r24
    206c:	80 89       	ldd	r24, Z+16	; 0x10
    206e:	91 89       	ldd	r25, Z+17	; 0x11
    2070:	fc 01       	movw	r30, r24
    2072:	10 82       	st	Z, r1
    2074:	80 e8       	ldi	r24, 0x80	; 128
    2076:	94 e8       	ldi	r25, 0x84	; 132
    2078:	ae e1       	ldi	r26, 0x1E	; 30
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	2d 81       	ldd	r18, Y+5	; 0x05
    207e:	3e 81       	ldd	r19, Y+6	; 0x06
    2080:	4f 81       	ldd	r20, Y+7	; 0x07
    2082:	58 85       	ldd	r21, Y+8	; 0x08
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__udivmodsi4>
    208c:	da 01       	movw	r26, r20
    208e:	c9 01       	movw	r24, r18
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	a1 09       	sbc	r26, r1
    2094:	b1 09       	sbc	r27, r1
    2096:	b6 95       	lsr	r27
    2098:	a7 95       	ror	r26
    209a:	97 95       	ror	r25
    209c:	87 95       	ror	r24
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	fc 01       	movw	r30, r24
    20a8:	84 85       	ldd	r24, Z+12	; 0x0c
    20aa:	95 85       	ldd	r25, Z+13	; 0x0d
    20ac:	29 81       	ldd	r18, Y+1	; 0x01
    20ae:	3a 81       	ldd	r19, Y+2	; 0x02
    20b0:	23 2f       	mov	r18, r19
    20b2:	33 27       	eor	r19, r19
    20b4:	fc 01       	movw	r30, r24
    20b6:	20 83       	st	Z, r18
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	fc 01       	movw	r30, r24
    20be:	86 85       	ldd	r24, Z+14	; 0x0e
    20c0:	97 85       	ldd	r25, Z+15	; 0x0f
    20c2:	29 81       	ldd	r18, Y+1	; 0x01
    20c4:	fc 01       	movw	r30, r24
    20c6:	20 83       	st	Z, r18
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	fc 01       	movw	r30, r24
    20ce:	10 8e       	std	Z+24, r1	; 0x18
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	fc 01       	movw	r30, r24
    20d6:	84 89       	ldd	r24, Z+20	; 0x14
    20d8:	95 89       	ldd	r25, Z+21	; 0x15
    20da:	29 85       	ldd	r18, Y+9	; 0x09
    20dc:	fc 01       	movw	r30, r24
    20de:	20 83       	st	Z, r18
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	fc 01       	movw	r30, r24
    20e6:	82 89       	ldd	r24, Z+18	; 0x12
    20e8:	93 89       	ldd	r25, Z+19	; 0x13
    20ea:	2b 81       	ldd	r18, Y+3	; 0x03
    20ec:	3c 81       	ldd	r19, Y+4	; 0x04
    20ee:	f9 01       	movw	r30, r18
    20f0:	22 89       	ldd	r18, Z+18	; 0x12
    20f2:	33 89       	ldd	r19, Z+19	; 0x13
    20f4:	f9 01       	movw	r30, r18
    20f6:	20 81       	ld	r18, Z
    20f8:	20 61       	ori	r18, 0x10	; 16
    20fa:	fc 01       	movw	r30, r24
    20fc:	20 83       	st	Z, r18
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	fc 01       	movw	r30, r24
    2104:	82 89       	ldd	r24, Z+18	; 0x12
    2106:	93 89       	ldd	r25, Z+19	; 0x13
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	f9 01       	movw	r30, r18
    210e:	22 89       	ldd	r18, Z+18	; 0x12
    2110:	33 89       	ldd	r19, Z+19	; 0x13
    2112:	f9 01       	movw	r30, r18
    2114:	20 81       	ld	r18, Z
    2116:	28 60       	ori	r18, 0x08	; 8
    2118:	fc 01       	movw	r30, r24
    211a:	20 83       	st	Z, r18
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	fc 01       	movw	r30, r24
    2122:	82 89       	ldd	r24, Z+18	; 0x12
    2124:	93 89       	ldd	r25, Z+19	; 0x13
    2126:	2b 81       	ldd	r18, Y+3	; 0x03
    2128:	3c 81       	ldd	r19, Y+4	; 0x04
    212a:	f9 01       	movw	r30, r18
    212c:	22 89       	ldd	r18, Z+18	; 0x12
    212e:	33 89       	ldd	r19, Z+19	; 0x13
    2130:	f9 01       	movw	r30, r18
    2132:	20 81       	ld	r18, Z
    2134:	20 68       	ori	r18, 0x80	; 128
    2136:	fc 01       	movw	r30, r24
    2138:	20 83       	st	Z, r18
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	fc 01       	movw	r30, r24
    2140:	82 89       	ldd	r24, Z+18	; 0x12
    2142:	93 89       	ldd	r25, Z+19	; 0x13
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	f9 01       	movw	r30, r18
    214a:	22 89       	ldd	r18, Z+18	; 0x12
    214c:	33 89       	ldd	r19, Z+19	; 0x13
    214e:	f9 01       	movw	r30, r18
    2150:	20 81       	ld	r18, Z
    2152:	2f 7d       	andi	r18, 0xDF	; 223
    2154:	fc 01       	movw	r30, r24
    2156:	20 83       	st	Z, r18
    2158:	00 00       	nop
    215a:	29 96       	adiw	r28, 0x09	; 9
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	00 d0       	rcall	.+0      	; 0x2172 <_ZN14HardwareSerial9availableEv+0x6>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	fc 01       	movw	r30, r24
    2180:	81 8d       	ldd	r24, Z+25	; 0x19
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 01       	movw	r18, r24
    2188:	20 5c       	subi	r18, 0xC0	; 192
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	fc 01       	movw	r30, r24
    2192:	82 8d       	ldd	r24, Z+26	; 0x1a
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a9 01       	movw	r20, r18
    219a:	48 1b       	sub	r20, r24
    219c:	59 0b       	sbc	r21, r25
    219e:	ca 01       	movw	r24, r20
    21a0:	8f 73       	andi	r24, 0x3F	; 63
    21a2:	99 27       	eor	r25, r25
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <_ZN14HardwareSerial4peekEv+0x6>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer_head == _rx_buffer_tail) {
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	fc 01       	movw	r30, r24
    21c2:	21 8d       	ldd	r18, Z+25	; 0x19
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	fc 01       	movw	r30, r24
    21ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	29 17       	cp	r18, r25
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <_ZN14HardwareSerial4peekEv+0x26>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	88 23       	and	r24, r24
    21d6:	19 f0       	breq	.+6      	; 0x21de <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	9f ef       	ldi	r25, 0xFF	; 255
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <_ZN14HardwareSerial4peekEv+0x4e>
  } else {
    return _rx_buffer[_rx_buffer_tail];
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	fc 01       	movw	r30, r24
    21e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	29 81       	ldd	r18, Y+1	; 0x01
    21ec:	3a 81       	ldd	r19, Y+2	; 0x02
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	4d 96       	adiw	r24, 0x1d	; 29
    21f4:	fc 01       	movw	r30, r24
    21f6:	80 81       	ld	r24, Z
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	00 d0       	rcall	.+0      	; 0x220c <_ZN14HardwareSerial4readEv+0x6>
    220c:	1f 92       	push	r1
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	9b 83       	std	Y+3, r25	; 0x03
    2214:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	fc 01       	movw	r30, r24
    221c:	21 8d       	ldd	r18, Z+25	; 0x19
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	fc 01       	movw	r30, r24
    2224:	92 8d       	ldd	r25, Z+26	; 0x1a
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	29 17       	cp	r18, r25
    222a:	09 f0       	breq	.+2      	; 0x222e <_ZN14HardwareSerial4readEv+0x28>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	88 23       	and	r24, r24
    2230:	19 f0       	breq	.+6      	; 0x2238 <_ZN14HardwareSerial4readEv+0x32>
    return -1;
    2232:	8f ef       	ldi	r24, 0xFF	; 255
    2234:	9f ef       	ldi	r25, 0xFF	; 255
    2236:	1c c0       	rjmp	.+56     	; 0x2270 <_ZN14HardwareSerial4readEv+0x6a>
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	fc 01       	movw	r30, r24
    223e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	2a 81       	ldd	r18, Y+2	; 0x02
    2246:	3b 81       	ldd	r19, Y+3	; 0x03
    2248:	82 0f       	add	r24, r18
    224a:	93 1f       	adc	r25, r19
    224c:	4d 96       	adiw	r24, 0x1d	; 29
    224e:	fc 01       	movw	r30, r24
    2250:	80 81       	ld	r24, Z
    2252:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	fc 01       	movw	r30, r24
    225a:	82 8d       	ldd	r24, Z+26	; 0x1a
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	28 2f       	mov	r18, r24
    2260:	2f 73       	andi	r18, 0x3F	; 63
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	fc 01       	movw	r30, r24
    2268:	22 8f       	std	Z+26, r18	; 0x1a
    return c;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <_ZN14HardwareSerial17availableForWriteEv>:

int HardwareSerial::availableForWrite(void)
{
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 d0       	rcall	.+0      	; 0x2282 <_ZN14HardwareSerial17availableForWriteEv+0x6>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <_ZN14HardwareSerial17availableForWriteEv+0x8>
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	fc 01       	movw	r30, r24
    2292:	83 8d       	ldd	r24, Z+27	; 0x1b
    2294:	89 83       	std	Y+1, r24	; 0x01
  tx_buffer_index_t tail = _tx_buffer_tail;
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	fc 01       	movw	r30, r24
    229c:	84 8d       	ldd	r24, Z+28	; 0x1c
    229e:	8a 83       	std	Y+2, r24	; 0x02
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    22a0:	99 81       	ldd	r25, Y+1	; 0x01
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	98 17       	cp	r25, r24
    22a6:	68 f0       	brcs	.+26     	; 0x22c2 <_ZN14HardwareSerial17availableForWriteEv+0x46>
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	2f e3       	ldi	r18, 0x3F	; 63
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	28 1b       	sub	r18, r24
    22b4:	39 0b       	sbc	r19, r25
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	82 0f       	add	r24, r18
    22be:	93 1f       	adc	r25, r19
    22c0:	0b c0       	rjmp	.+22     	; 0x22d8 <_ZN14HardwareSerial17availableForWriteEv+0x5c>
  return tail - head - 1;
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a9 01       	movw	r20, r18
    22d0:	48 1b       	sub	r20, r24
    22d2:	59 0b       	sbc	r21, r25
    22d4:	ca 01       	movw	r24, r20
    22d6:	01 97       	sbiw	r24, 0x01	; 1
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	08 95       	ret

000022e6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <_ZN14HardwareSerial5flushEv+0x6>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	fc 01       	movw	r30, r24
    22fa:	90 8d       	ldd	r25, Z+24	; 0x18
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	89 27       	eor	r24, r25
    2300:	88 23       	and	r24, r24
    2302:	09 f0       	breq	.+2      	; 0x2306 <_ZN14HardwareSerial5flushEv+0x20>
    2304:	4e c0       	rjmp	.+156    	; 0x23a2 <_ZN14HardwareSerial5flushEv+0xbc>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	fc 01       	movw	r30, r24
    230c:	82 89       	ldd	r24, Z+18	; 0x12
    230e:	93 89       	ldd	r25, Z+19	; 0x13
    2310:	fc 01       	movw	r30, r24
    2312:	80 81       	ld	r24, Z
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	80 72       	andi	r24, 0x20	; 32
    231a:	99 27       	eor	r25, r25
    231c:	89 2b       	or	r24, r25
    231e:	69 f4       	brne	.+26     	; 0x233a <_ZN14HardwareSerial5flushEv+0x54>
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	fc 01       	movw	r30, r24
    2326:	80 89       	ldd	r24, Z+16	; 0x10
    2328:	91 89       	ldd	r25, Z+17	; 0x11
    232a:	fc 01       	movw	r30, r24
    232c:	80 81       	ld	r24, Z
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	80 74       	andi	r24, 0x40	; 64
    2334:	99 27       	eor	r25, r25
    2336:	89 2b       	or	r24, r25
    2338:	11 f4       	brne	.+4      	; 0x233e <_ZN14HardwareSerial5flushEv+0x58>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <_ZN14HardwareSerial5flushEv+0x5a>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	88 23       	and	r24, r24
    2342:	81 f1       	breq	.+96     	; 0x23a4 <_ZN14HardwareSerial5flushEv+0xbe>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2344:	8f e5       	ldi	r24, 0x5F	; 95
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	fc 01       	movw	r30, r24
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	7c f0       	brlt	.+30     	; 0x236e <_ZN14HardwareSerial5flushEv+0x88>
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	fc 01       	movw	r30, r24
    2356:	82 89       	ldd	r24, Z+18	; 0x12
    2358:	93 89       	ldd	r25, Z+19	; 0x13
    235a:	fc 01       	movw	r30, r24
    235c:	80 81       	ld	r24, Z
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	80 72       	andi	r24, 0x20	; 32
    2364:	99 27       	eor	r25, r25
    2366:	89 2b       	or	r24, r25
    2368:	11 f0       	breq	.+4      	; 0x236e <_ZN14HardwareSerial5flushEv+0x88>
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	01 c0       	rjmp	.+2      	; 0x2370 <_ZN14HardwareSerial5flushEv+0x8a>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	88 23       	and	r24, r24
    2372:	49 f2       	breq	.-110    	; 0x2306 <_ZN14HardwareSerial5flushEv+0x20>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	fc 01       	movw	r30, r24
    237a:	80 89       	ldd	r24, Z+16	; 0x10
    237c:	91 89       	ldd	r25, Z+17	; 0x11
    237e:	fc 01       	movw	r30, r24
    2380:	80 81       	ld	r24, Z
    2382:	88 2f       	mov	r24, r24
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	80 72       	andi	r24, 0x20	; 32
    2388:	99 27       	eor	r25, r25
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	89 2b       	or	r24, r25
    238e:	09 f4       	brne	.+2      	; 0x2392 <_ZN14HardwareSerial5flushEv+0xac>
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	22 23       	and	r18, r18
    2394:	09 f4       	brne	.+2      	; 0x2398 <_ZN14HardwareSerial5flushEv+0xb2>
    2396:	b7 cf       	rjmp	.-146    	; 0x2306 <_ZN14HardwareSerial5flushEv+0x20>
	  _tx_udr_empty_irq();
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    23a0:	b2 cf       	rjmp	.-156    	; 0x2306 <_ZN14HardwareSerial5flushEv+0x20>
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;
    23a2:	00 00       	nop
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <_ZN14HardwareSerial5writeEh+0x6>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <_ZN14HardwareSerial5writeEh+0x8>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	9b 83       	std	Y+3, r25	; 0x03
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	6c 83       	std	Y+4, r22	; 0x04
  _written = true;
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	21 e0       	ldi	r18, 0x01	; 1
    23c6:	fc 01       	movw	r30, r24
    23c8:	20 8f       	std	Z+24, r18	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	fc 01       	movw	r30, r24
    23d0:	23 8d       	ldd	r18, Z+27	; 0x1b
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	fc 01       	movw	r30, r24
    23d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    23da:	28 17       	cp	r18, r24
    23dc:	79 f4       	brne	.+30     	; 0x23fc <_ZN14HardwareSerial5writeEh+0x4e>
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
    23e2:	fc 01       	movw	r30, r24
    23e4:	80 89       	ldd	r24, Z+16	; 0x10
    23e6:	91 89       	ldd	r25, Z+17	; 0x11
    23e8:	fc 01       	movw	r30, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	80 72       	andi	r24, 0x20	; 32
    23f2:	99 27       	eor	r25, r25
    23f4:	89 2b       	or	r24, r25
    23f6:	11 f0       	breq	.+4      	; 0x23fc <_ZN14HardwareSerial5writeEh+0x4e>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <_ZN14HardwareSerial5writeEh+0x50>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	88 23       	and	r24, r24
    2400:	d1 f0       	breq	.+52     	; 0x2436 <_ZN14HardwareSerial5writeEh+0x88>
    *_udr = c;
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	fc 01       	movw	r30, r24
    2408:	86 89       	ldd	r24, Z+22	; 0x16
    240a:	97 89       	ldd	r25, Z+23	; 0x17
    240c:	2c 81       	ldd	r18, Y+4	; 0x04
    240e:	fc 01       	movw	r30, r24
    2410:	20 83       	st	Z, r18
    sbi(*_ucsra, TXC0);
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	9b 81       	ldd	r25, Y+3	; 0x03
    2416:	fc 01       	movw	r30, r24
    2418:	80 89       	ldd	r24, Z+16	; 0x10
    241a:	91 89       	ldd	r25, Z+17	; 0x11
    241c:	2a 81       	ldd	r18, Y+2	; 0x02
    241e:	3b 81       	ldd	r19, Y+3	; 0x03
    2420:	f9 01       	movw	r30, r18
    2422:	20 89       	ldd	r18, Z+16	; 0x10
    2424:	31 89       	ldd	r19, Z+17	; 0x11
    2426:	f9 01       	movw	r30, r18
    2428:	20 81       	ld	r18, Z
    242a:	20 64       	ori	r18, 0x40	; 64
    242c:	fc 01       	movw	r30, r24
    242e:	20 83       	st	Z, r18
    return 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	60 c0       	rjmp	.+192    	; 0x24f6 <_ZN14HardwareSerial5writeEh+0x148>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	fc 01       	movw	r30, r24
    243c:	83 8d       	ldd	r24, Z+27	; 0x1b
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	8f 73       	andi	r24, 0x3F	; 63
    2446:	90 78       	andi	r25, 0x80	; 128
    2448:	99 23       	and	r25, r25
    244a:	24 f4       	brge	.+8      	; 0x2454 <_ZN14HardwareSerial5writeEh+0xa6>
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	80 6c       	ori	r24, 0xC0	; 192
    2450:	9f 6f       	ori	r25, 0xFF	; 255
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	fc 01       	movw	r30, r24
    245c:	24 8d       	ldd	r18, Z+28	; 0x1c
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	99 81       	ldd	r25, Y+1	; 0x01
    2462:	29 17       	cp	r18, r25
    2464:	09 f0       	breq	.+2      	; 0x2468 <_ZN14HardwareSerial5writeEh+0xba>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	88 23       	and	r24, r24
    246a:	01 f1       	breq	.+64     	; 0x24ac <_ZN14HardwareSerial5writeEh+0xfe>
    if (bit_is_clear(SREG, SREG_I)) {
    246c:	8f e5       	ldi	r24, 0x5F	; 95
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	fc 01       	movw	r30, r24
    2472:	80 81       	ld	r24, Z
    2474:	80 95       	com	r24
    2476:	88 1f       	adc	r24, r24
    2478:	88 27       	eor	r24, r24
    247a:	88 1f       	adc	r24, r24
    247c:	88 23       	and	r24, r24
    247e:	59 f3       	breq	.-42     	; 0x2456 <_ZN14HardwareSerial5writeEh+0xa8>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	fc 01       	movw	r30, r24
    2486:	80 89       	ldd	r24, Z+16	; 0x10
    2488:	91 89       	ldd	r25, Z+17	; 0x11
    248a:	fc 01       	movw	r30, r24
    248c:	80 81       	ld	r24, Z
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	80 72       	andi	r24, 0x20	; 32
    2494:	99 27       	eor	r25, r25
    2496:	21 e0       	ldi	r18, 0x01	; 1
    2498:	89 2b       	or	r24, r25
    249a:	09 f4       	brne	.+2      	; 0x249e <_ZN14HardwareSerial5writeEh+0xf0>
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	22 23       	and	r18, r18
    24a0:	d1 f2       	breq	.-76     	; 0x2456 <_ZN14HardwareSerial5writeEh+0xa8>
	_tx_udr_empty_irq();
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    24aa:	d5 cf       	rjmp	.-86     	; 0x2456 <_ZN14HardwareSerial5writeEh+0xa8>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	fc 01       	movw	r30, r24
    24b2:	83 8d       	ldd	r24, Z+27	; 0x1b
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	2a 81       	ldd	r18, Y+2	; 0x02
    24ba:	3b 81       	ldd	r19, Y+3	; 0x03
    24bc:	82 0f       	add	r24, r18
    24be:	93 1f       	adc	r25, r19
    24c0:	83 5a       	subi	r24, 0xA3	; 163
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	2c 81       	ldd	r18, Y+4	; 0x04
    24c6:	fc 01       	movw	r30, r24
    24c8:	20 83       	st	Z, r18
  _tx_buffer_head = i;
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	29 81       	ldd	r18, Y+1	; 0x01
    24d0:	fc 01       	movw	r30, r24
    24d2:	23 8f       	std	Z+27, r18	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	fc 01       	movw	r30, r24
    24da:	82 89       	ldd	r24, Z+18	; 0x12
    24dc:	93 89       	ldd	r25, Z+19	; 0x13
    24de:	2a 81       	ldd	r18, Y+2	; 0x02
    24e0:	3b 81       	ldd	r19, Y+3	; 0x03
    24e2:	f9 01       	movw	r30, r18
    24e4:	22 89       	ldd	r18, Z+18	; 0x12
    24e6:	33 89       	ldd	r19, Z+19	; 0x13
    24e8:	f9 01       	movw	r30, r18
    24ea:	20 81       	ld	r18, Z
    24ec:	20 62       	ori	r18, 0x20	; 32
    24ee:	fc 01       	movw	r30, r24
    24f0:	20 83       	st	Z, r18
  
  return 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	00 d0       	rcall	.+0      	; 0x250a <_ZN5PrintC1Ev+0x6>
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	2c e8       	ldi	r18, 0x8C	; 140
    2514:	33 e0       	ldi	r19, 0x03	; 3
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	fc 01       	movw	r30, r24
    251c:	31 83       	std	Z+1, r19	; 0x01
    251e:	20 83       	st	Z, r18
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	fc 01       	movw	r30, r24
    2526:	13 82       	std	Z+3, r1	; 0x03
    2528:	12 82       	std	Z+2, r1	; 0x02
    252a:	00 00       	nop
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	00 d0       	rcall	.+0      	; 0x253c <_ZN5Print17availableForWriteEv+0x6>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	08 95       	ret

00002552 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	00 d0       	rcall	.+0      	; 0x2558 <_ZN5Print5flushEv+0x6>
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	00 00       	nop
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	00 d0       	rcall	.+0      	; 0x2572 <_ZN6StreamC1Ev+0x6>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	0e 94 82 12 	call	0x2504	; 0x2504 <_ZN5PrintC1Ev>
    2582:	2a e7       	ldi	r18, 0x7A	; 122
    2584:	33 e0       	ldi	r19, 0x03	; 3
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	fc 01       	movw	r30, r24
    258c:	31 83       	std	Z+1, r19	; 0x01
    258e:	20 83       	st	Z, r18
    2590:	29 81       	ldd	r18, Y+1	; 0x01
    2592:	3a 81       	ldd	r19, Y+2	; 0x02
    2594:	88 ee       	ldi	r24, 0xE8	; 232
    2596:	93 e0       	ldi	r25, 0x03	; 3
    2598:	a0 e0       	ldi	r26, 0x00	; 0
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	f9 01       	movw	r30, r18
    259e:	84 83       	std	Z+4, r24	; 0x04
    25a0:	95 83       	std	Z+5, r25	; 0x05
    25a2:	a6 83       	std	Z+6, r26	; 0x06
    25a4:	b7 83       	std	Z+7, r27	; 0x07
    25a6:	00 00       	nop
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	2e 97       	sbiw	r28, 0x0e	; 14
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	7c 83       	std	Y+4, r23	; 0x04
    25d8:	6b 83       	std	Y+3, r22	; 0x03
    25da:	5e 83       	std	Y+6, r21	; 0x06
    25dc:	4d 83       	std	Y+5, r20	; 0x05
    25de:	38 87       	std	Y+8, r19	; 0x08
    25e0:	2f 83       	std	Y+7, r18	; 0x07
    25e2:	1a 87       	std	Y+10, r17	; 0x0a
    25e4:	09 87       	std	Y+9, r16	; 0x09
    25e6:	fc 86       	std	Y+12, r15	; 0x0c
    25e8:	eb 86       	std	Y+11, r14	; 0x0b
    25ea:	de 86       	std	Y+14, r13	; 0x0e
    25ec:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	0e 94 b6 12 	call	0x256c	; 0x256c <_ZN6StreamC1Ev>
    25f6:	28 e6       	ldi	r18, 0x68	; 104
    25f8:	33 e0       	ldi	r19, 0x03	; 3
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	fc 01       	movw	r30, r24
    2600:	31 83       	std	Z+1, r19	; 0x01
    2602:	20 83       	st	Z, r18
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	2b 81       	ldd	r18, Y+3	; 0x03
    260a:	3c 81       	ldd	r19, Y+4	; 0x04
    260c:	fc 01       	movw	r30, r24
    260e:	35 87       	std	Z+13, r19	; 0x0d
    2610:	24 87       	std	Z+12, r18	; 0x0c
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	2d 81       	ldd	r18, Y+5	; 0x05
    2618:	3e 81       	ldd	r19, Y+6	; 0x06
    261a:	fc 01       	movw	r30, r24
    261c:	37 87       	std	Z+15, r19	; 0x0f
    261e:	26 87       	std	Z+14, r18	; 0x0e
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	2f 81       	ldd	r18, Y+7	; 0x07
    2626:	38 85       	ldd	r19, Y+8	; 0x08
    2628:	fc 01       	movw	r30, r24
    262a:	31 8b       	std	Z+17, r19	; 0x11
    262c:	20 8b       	std	Z+16, r18	; 0x10
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	29 85       	ldd	r18, Y+9	; 0x09
    2634:	3a 85       	ldd	r19, Y+10	; 0x0a
    2636:	fc 01       	movw	r30, r24
    2638:	33 8b       	std	Z+19, r19	; 0x13
    263a:	22 8b       	std	Z+18, r18	; 0x12
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	2b 85       	ldd	r18, Y+11	; 0x0b
    2642:	3c 85       	ldd	r19, Y+12	; 0x0c
    2644:	fc 01       	movw	r30, r24
    2646:	35 8b       	std	Z+21, r19	; 0x15
    2648:	24 8b       	std	Z+20, r18	; 0x14
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2650:	3e 85       	ldd	r19, Y+14	; 0x0e
    2652:	fc 01       	movw	r30, r24
    2654:	37 8b       	std	Z+23, r19	; 0x17
    2656:	26 8b       	std	Z+22, r18	; 0x16
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	fc 01       	movw	r30, r24
    265e:	11 8e       	std	Z+25, r1	; 0x19
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	fc 01       	movw	r30, r24
    2666:	12 8e       	std	Z+26, r1	; 0x1a
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	fc 01       	movw	r30, r24
    266e:	13 8e       	std	Z+27, r1	; 0x1b
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	fc 01       	movw	r30, r24
    2676:	14 8e       	std	Z+28, r1	; 0x1c
{
}
    2678:	00 00       	nop
    267a:	2e 96       	adiw	r28, 0x0e	; 14
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	08 95       	ret

00002698 <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	00 d0       	rcall	.+0      	; 0x269e <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8>
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	9c 83       	std	Y+4, r25	; 0x04
    26a6:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	fc 01       	movw	r30, r24
    26ae:	80 89       	ldd	r24, Z+16	; 0x10
    26b0:	91 89       	ldd	r25, Z+17	; 0x11
    26b2:	fc 01       	movw	r30, r24
    26b4:	80 81       	ld	r24, Z
    26b6:	88 2f       	mov	r24, r24
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	84 70       	andi	r24, 0x04	; 4
    26bc:	99 27       	eor	r25, r25
    26be:	21 e0       	ldi	r18, 0x01	; 1
    26c0:	89 2b       	or	r24, r25
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	22 23       	and	r18, r18
    26c8:	71 f1       	breq	.+92     	; 0x2726 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	fc 01       	movw	r30, r24
    26d0:	86 89       	ldd	r24, Z+22	; 0x16
    26d2:	97 89       	ldd	r25, Z+23	; 0x17
    26d4:	fc 01       	movw	r30, r24
    26d6:	80 81       	ld	r24, Z
    26d8:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	9c 81       	ldd	r25, Y+4	; 0x04
    26de:	fc 01       	movw	r30, r24
    26e0:	81 8d       	ldd	r24, Z+25	; 0x19
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	8f 73       	andi	r24, 0x3F	; 63
    26e6:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	fc 01       	movw	r30, r24
    26ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	29 17       	cp	r18, r25
    26f6:	09 f4       	brne	.+2      	; 0x26fa <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	88 23       	and	r24, r24
    26fc:	d9 f0       	breq	.+54     	; 0x2734 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	9c 81       	ldd	r25, Y+4	; 0x04
    2702:	fc 01       	movw	r30, r24
    2704:	81 8d       	ldd	r24, Z+25	; 0x19
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	2b 81       	ldd	r18, Y+3	; 0x03
    270c:	3c 81       	ldd	r19, Y+4	; 0x04
    270e:	82 0f       	add	r24, r18
    2710:	93 1f       	adc	r25, r19
    2712:	4d 96       	adiw	r24, 0x1d	; 29
    2714:	29 81       	ldd	r18, Y+1	; 0x01
    2716:	fc 01       	movw	r30, r24
    2718:	20 83       	st	Z, r18
      _rx_buffer_head = i;
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	2a 81       	ldd	r18, Y+2	; 0x02
    2720:	fc 01       	movw	r30, r24
    2722:	21 8f       	std	Z+25, r18	; 0x19
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
  };
}
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
      _rx_buffer_head = i;
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	fc 01       	movw	r30, r24
    272c:	86 89       	ldd	r24, Z+22	; 0x16
    272e:	97 89       	ldd	r25, Z+23	; 0x17
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
  };
}
    2734:	00 00       	nop
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	08 95       	ret

00002744 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2744:	1f 92       	push	r1
    2746:	0f 92       	push	r0
    2748:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	2f 93       	push	r18
    2752:	3f 93       	push	r19
    2754:	4f 93       	push	r20
    2756:	5f 93       	push	r21
    2758:	6f 93       	push	r22
    275a:	7f 93       	push	r23
    275c:	8f 93       	push	r24
    275e:	9f 93       	push	r25
    2760:	af 93       	push	r26
    2762:	bf 93       	push	r27
    2764:	ef 93       	push	r30
    2766:	ff 93       	push	r31
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
    2770:	8a e9       	ldi	r24, 0x9A	; 154
    2772:	94 e0       	ldi	r25, 0x04	; 4
    2774:	0e 94 4c 13 	call	0x2698	; 0x2698 <_ZN14HardwareSerial16_rx_complete_irqEv>
  }
    2778:	00 00       	nop
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	ff 91       	pop	r31
    2780:	ef 91       	pop	r30
    2782:	bf 91       	pop	r27
    2784:	af 91       	pop	r26
    2786:	9f 91       	pop	r25
    2788:	8f 91       	pop	r24
    278a:	7f 91       	pop	r23
    278c:	6f 91       	pop	r22
    278e:	5f 91       	pop	r21
    2790:	4f 91       	pop	r20
    2792:	3f 91       	pop	r19
    2794:	2f 91       	pop	r18
    2796:	0f 90       	pop	r0
    2798:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    279c:	0f 90       	pop	r0
    279e:	1f 90       	pop	r1
    27a0:	18 95       	reti

000027a2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    27a2:	1f 92       	push	r1
    27a4:	0f 92       	push	r0
    27a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 93       	push	r18
    27b0:	3f 93       	push	r19
    27b2:	4f 93       	push	r20
    27b4:	5f 93       	push	r21
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
    27ce:	8a e9       	ldi	r24, 0x9A	; 154
    27d0:	94 e0       	ldi	r25, 0x04	; 4
    27d2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    27d6:	00 00       	nop
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	ff 91       	pop	r31
    27de:	ef 91       	pop	r30
    27e0:	bf 91       	pop	r27
    27e2:	af 91       	pop	r26
    27e4:	9f 91       	pop	r25
    27e6:	8f 91       	pop	r24
    27e8:	7f 91       	pop	r23
    27ea:	6f 91       	pop	r22
    27ec:	5f 91       	pop	r21
    27ee:	4f 91       	pop	r20
    27f0:	3f 91       	pop	r19
    27f2:	2f 91       	pop	r18
    27f4:	0f 90       	pop	r0
    27f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27fa:	0f 90       	pop	r0
    27fc:	1f 90       	pop	r1
    27fe:	18 95       	reti

00002800 <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
    2808:	8a e9       	ldi	r24, 0x9A	; 154
    280a:	94 e0       	ldi	r25, 0x04	; 4
    280c:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN14HardwareSerial9availableEv>
    2810:	21 e0       	ldi	r18, 0x01	; 1
    2812:	89 2b       	or	r24, r25
    2814:	09 f4       	brne	.+2      	; 0x2818 <_Z17Serial0_availablev+0x18>
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	82 2f       	mov	r24, r18
}
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret

00002820 <_Z41__static_initialization_and_destruction_0ii>:
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	00 d0       	rcall	.+0      	; 0x2832 <_Z41__static_initialization_and_destruction_0ii+0x12>
    2832:	00 d0       	rcall	.+0      	; 0x2834 <_Z41__static_initialization_and_destruction_0ii+0x14>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	7c 83       	std	Y+4, r23	; 0x04
    283e:	6b 83       	std	Y+3, r22	; 0x03
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	d1 f4       	brne	.+52     	; 0x287c <_Z41__static_initialization_and_destruction_0ii+0x5c>
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	b1 f4       	brne	.+44     	; 0x287c <_Z41__static_initialization_and_destruction_0ii+0x5c>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
    2850:	0f 2e       	mov	r0, r31
    2852:	f6 ec       	ldi	r31, 0xC6	; 198
    2854:	cf 2e       	mov	r12, r31
    2856:	d1 2c       	mov	r13, r1
    2858:	f0 2d       	mov	r31, r0
    285a:	0f 2e       	mov	r0, r31
    285c:	f2 ec       	ldi	r31, 0xC2	; 194
    285e:	ef 2e       	mov	r14, r31
    2860:	f1 2c       	mov	r15, r1
    2862:	f0 2d       	mov	r31, r0
    2864:	01 ec       	ldi	r16, 0xC1	; 193
    2866:	10 e0       	ldi	r17, 0x00	; 0
    2868:	20 ec       	ldi	r18, 0xC0	; 192
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	44 ec       	ldi	r20, 0xC4	; 196
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	65 ec       	ldi	r22, 0xC5	; 197
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	8a e9       	ldi	r24, 0x9A	; 154
    2876:	94 e0       	ldi	r25, 0x04	; 4
    2878:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    287c:	00 00       	nop
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	ff 90       	pop	r15
    2890:	ef 90       	pop	r14
    2892:	df 90       	pop	r13
    2894:	cf 90       	pop	r12
    2896:	08 95       	ret

00002898 <_GLOBAL__sub_I___vector_18>:
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	6f ef       	ldi	r22, 0xFF	; 255
    28a2:	7f ef       	ldi	r23, 0xFF	; 255
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 10 14 	call	0x2820	; 0x2820 <_Z41__static_initialization_and_destruction_0ii>
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <_ZN5Print5writeEPKc>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    28b2:	0f 93       	push	r16
    28b4:	1f 93       	push	r17
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <_ZN5Print5writeEPKc+0xa>
    28bc:	00 d0       	rcall	.+0      	; 0x28be <_ZN5Print5writeEPKc+0xc>
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	7c 83       	std	Y+4, r23	; 0x04
    28c8:	6b 83       	std	Y+3, r22	; 0x03
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	89 2b       	or	r24, r25
    28d0:	19 f4       	brne	.+6      	; 0x28d8 <_ZN5Print5writeEPKc+0x26>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	15 c0       	rjmp	.+42     	; 0x2902 <_ZN5Print5writeEPKc+0x50>
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	fc 01       	movw	r30, r24
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	02 96       	adiw	r24, 0x02	; 2
    28e4:	fc 01       	movw	r30, r24
    28e6:	00 81       	ld	r16, Z
    28e8:	11 81       	ldd	r17, Z+1	; 0x01
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <strlen>
    28f2:	ac 01       	movw	r20, r24
    28f4:	2b 81       	ldd	r18, Y+3	; 0x03
    28f6:	3c 81       	ldd	r19, Y+4	; 0x04
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	b9 01       	movw	r22, r18
    28fe:	f8 01       	movw	r30, r16
    2900:	09 95       	icall
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	08 95       	ret

00002914 <_ZN5Print5writeEPKhj>:
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	28 97       	sbiw	r28, 0x08	; 8
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	8b 83       	std	Y+3, r24	; 0x03
    292c:	7e 83       	std	Y+6, r23	; 0x06
    292e:	6d 83       	std	Y+5, r22	; 0x05
    2930:	58 87       	std	Y+8, r21	; 0x08
    2932:	4f 83       	std	Y+7, r20	; 0x07
    2934:	1a 82       	std	Y+2, r1	; 0x02
    2936:	19 82       	std	Y+1, r1	; 0x01
    2938:	8f 81       	ldd	r24, Y+7	; 0x07
    293a:	98 85       	ldd	r25, Y+8	; 0x08
    293c:	9c 01       	movw	r18, r24
    293e:	21 50       	subi	r18, 0x01	; 1
    2940:	31 09       	sbc	r19, r1
    2942:	38 87       	std	Y+8, r19	; 0x08
    2944:	2f 83       	std	Y+7, r18	; 0x07
    2946:	21 e0       	ldi	r18, 0x01	; 1
    2948:	89 2b       	or	r24, r25
    294a:	09 f4       	brne	.+2      	; 0x294e <_ZN5Print5writeEPKhj+0x3a>
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	22 23       	and	r18, r18
    2950:	19 f1       	breq	.+70     	; 0x2998 <_ZN5Print5writeEPKhj+0x84>
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	fc 01       	movw	r30, r24
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	fc 01       	movw	r30, r24
    295e:	20 81       	ld	r18, Z
    2960:	31 81       	ldd	r19, Z+1	; 0x01
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	ac 01       	movw	r20, r24
    2968:	4f 5f       	subi	r20, 0xFF	; 255
    296a:	5f 4f       	sbci	r21, 0xFF	; 255
    296c:	5e 83       	std	Y+6, r21	; 0x06
    296e:	4d 83       	std	Y+5, r20	; 0x05
    2970:	fc 01       	movw	r30, r24
    2972:	40 81       	ld	r20, Z
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	64 2f       	mov	r22, r20
    297a:	f9 01       	movw	r30, r18
    297c:	09 95       	icall
    297e:	21 e0       	ldi	r18, 0x01	; 1
    2980:	89 2b       	or	r24, r25
    2982:	09 f4       	brne	.+2      	; 0x2986 <_ZN5Print5writeEPKhj+0x72>
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	22 23       	and	r18, r18
    2988:	31 f0       	breq	.+12     	; 0x2996 <_ZN5Print5writeEPKhj+0x82>
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	d1 cf       	rjmp	.-94     	; 0x2938 <_ZN5Print5writeEPKhj+0x24>
    2996:	00 00       	nop
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	28 96       	adiw	r28, 0x08	; 8
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <_ZN5Print5printEPKc>:
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <_ZN5Print5printEPKc+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <_ZN5Print5printEPKc+0x8>
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	7c 83       	std	Y+4, r23	; 0x04
    29c0:	6b 83       	std	Y+3, r22	; 0x03
    29c2:	2b 81       	ldd	r18, Y+3	; 0x03
    29c4:	3c 81       	ldd	r19, Y+4	; 0x04
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	b9 01       	movw	r22, r18
    29cc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN5Print5writeEPKc>
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	08 95       	ret

000029de <_ZN5Print5printEc>:
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <_ZN5Print5printEc+0x6>
    29e4:	1f 92       	push	r1
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	6b 83       	std	Y+3, r22	; 0x03
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	fc 01       	movw	r30, r24
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	fc 01       	movw	r30, r24
    29fc:	20 81       	ld	r18, Z
    29fe:	31 81       	ldd	r19, Z+1	; 0x01
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	6b 81       	ldd	r22, Y+3	; 0x03
    2a06:	f9 01       	movw	r30, r18
    2a08:	09 95       	icall
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	08 95       	ret

00002a16 <_ZN5Print5printEii>:
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <_ZN5Print5printEii+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <_ZN5Print5printEii+0x8>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <_ZN5Print5printEii+0xa>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	7c 83       	std	Y+4, r23	; 0x04
    2a2a:	6b 83       	std	Y+3, r22	; 0x03
    2a2c:	5e 83       	std	Y+6, r21	; 0x06
    2a2e:	4d 83       	std	Y+5, r20	; 0x05
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	09 2e       	mov	r0, r25
    2a36:	00 0c       	add	r0, r0
    2a38:	aa 0b       	sbc	r26, r26
    2a3a:	bb 0b       	sbc	r27, r27
    2a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a40:	e9 81       	ldd	r30, Y+1	; 0x01
    2a42:	fa 81       	ldd	r31, Y+2	; 0x02
    2a44:	ac 01       	movw	r20, r24
    2a46:	bd 01       	movw	r22, r26
    2a48:	cf 01       	movw	r24, r30
    2a4a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN5Print5printEli>
    2a4e:	26 96       	adiw	r28, 0x06	; 6
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	08 95       	ret

00002a60 <_ZN5Print5printEji>:
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <_ZN5Print5printEji+0x6>
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <_ZN5Print5printEji+0x8>
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <_ZN5Print5printEji+0xa>
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	7c 83       	std	Y+4, r23	; 0x04
    2a74:	6b 83       	std	Y+3, r22	; 0x03
    2a76:	5e 83       	std	Y+6, r21	; 0x06
    2a78:	4d 83       	std	Y+5, r20	; 0x05
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	cc 01       	movw	r24, r24
    2a80:	a0 e0       	ldi	r26, 0x00	; 0
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	2d 81       	ldd	r18, Y+5	; 0x05
    2a86:	3e 81       	ldd	r19, Y+6	; 0x06
    2a88:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8c:	ac 01       	movw	r20, r24
    2a8e:	bd 01       	movw	r22, r26
    2a90:	cf 01       	movw	r24, r30
    2a92:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN5Print5printEmi>
    2a96:	26 96       	adiw	r28, 0x06	; 6
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <_ZN5Print5printEli>:
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
    2ac0:	4d 83       	std	Y+5, r20	; 0x05
    2ac2:	5e 83       	std	Y+6, r21	; 0x06
    2ac4:	6f 83       	std	Y+7, r22	; 0x07
    2ac6:	78 87       	std	Y+8, r23	; 0x08
    2ac8:	3a 87       	std	Y+10, r19	; 0x0a
    2aca:	29 87       	std	Y+9, r18	; 0x09
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	89 2b       	or	r24, r25
    2ad2:	79 f4       	brne	.+30     	; 0x2af2 <_ZN5Print5printEli+0x4a>
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	fc 01       	movw	r30, r24
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	fc 01       	movw	r30, r24
    2ae0:	20 81       	ld	r18, Z
    2ae2:	31 81       	ldd	r19, Z+1	; 0x01
    2ae4:	4d 81       	ldd	r20, Y+5	; 0x05
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	64 2f       	mov	r22, r20
    2aec:	f9 01       	movw	r30, r18
    2aee:	09 95       	icall
    2af0:	4b c0       	rjmp	.+150    	; 0x2b88 <_ZN5Print5printEli+0xe0>
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	0a 97       	sbiw	r24, 0x0a	; 10
    2af8:	d9 f5       	brne	.+118    	; 0x2b70 <_ZN5Print5printEli+0xc8>
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	af 81       	ldd	r26, Y+7	; 0x07
    2b00:	b8 85       	ldd	r27, Y+8	; 0x08
    2b02:	bb 23       	and	r27, r27
    2b04:	44 f5       	brge	.+80     	; 0x2b56 <_ZN5Print5printEli+0xae>
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	6d e2       	ldi	r22, 0x2D	; 45
    2b0c:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN5Print5printEc>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	af 81       	ldd	r26, Y+7	; 0x07
    2b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    2b1c:	b0 95       	com	r27
    2b1e:	a0 95       	com	r26
    2b20:	90 95       	com	r25
    2b22:	81 95       	neg	r24
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	af 4f       	sbci	r26, 0xFF	; 255
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	af 83       	std	Y+7, r26	; 0x07
    2b30:	b8 87       	std	Y+8, r27	; 0x08
    2b32:	8d 81       	ldd	r24, Y+5	; 0x05
    2b34:	9e 81       	ldd	r25, Y+6	; 0x06
    2b36:	af 81       	ldd	r26, Y+7	; 0x07
    2b38:	b8 85       	ldd	r27, Y+8	; 0x08
    2b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3e:	2a e0       	ldi	r18, 0x0A	; 10
    2b40:	ac 01       	movw	r20, r24
    2b42:	bd 01       	movw	r22, r26
    2b44:	cf 01       	movw	r24, r30
    2b46:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <_ZN5Print11printNumberEmh>
    2b4a:	9c 01       	movw	r18, r24
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	82 0f       	add	r24, r18
    2b52:	93 1f       	adc	r25, r19
    2b54:	19 c0       	rjmp	.+50     	; 0x2b88 <_ZN5Print5printEli+0xe0>
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	af 81       	ldd	r26, Y+7	; 0x07
    2b5c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b60:	fc 81       	ldd	r31, Y+4	; 0x04
    2b62:	2a e0       	ldi	r18, 0x0A	; 10
    2b64:	ac 01       	movw	r20, r24
    2b66:	bd 01       	movw	r22, r26
    2b68:	cf 01       	movw	r24, r30
    2b6a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <_ZN5Print11printNumberEmh>
    2b6e:	0c c0       	rjmp	.+24     	; 0x2b88 <_ZN5Print5printEli+0xe0>
    2b70:	29 85       	ldd	r18, Y+9	; 0x09
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	af 81       	ldd	r26, Y+7	; 0x07
    2b78:	b8 85       	ldd	r27, Y+8	; 0x08
    2b7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b7e:	ac 01       	movw	r20, r24
    2b80:	bd 01       	movw	r22, r26
    2b82:	cf 01       	movw	r24, r30
    2b84:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <_ZN5Print11printNumberEmh>
    2b88:	2a 96       	adiw	r28, 0x0a	; 10
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <_ZN5Print5printEmi>:
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	28 97       	sbiw	r28, 0x08	; 8
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	4b 83       	std	Y+3, r20	; 0x03
    2bb4:	5c 83       	std	Y+4, r21	; 0x04
    2bb6:	6d 83       	std	Y+5, r22	; 0x05
    2bb8:	7e 83       	std	Y+6, r23	; 0x06
    2bba:	38 87       	std	Y+8, r19	; 0x08
    2bbc:	2f 83       	std	Y+7, r18	; 0x07
    2bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc0:	98 85       	ldd	r25, Y+8	; 0x08
    2bc2:	89 2b       	or	r24, r25
    2bc4:	79 f4       	brne	.+30     	; 0x2be4 <_ZN5Print5printEmi+0x4a>
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	fc 01       	movw	r30, r24
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	20 81       	ld	r18, Z
    2bd4:	31 81       	ldd	r19, Z+1	; 0x01
    2bd6:	4b 81       	ldd	r20, Y+3	; 0x03
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	64 2f       	mov	r22, r20
    2bde:	f9 01       	movw	r30, r18
    2be0:	09 95       	icall
    2be2:	0c c0       	rjmp	.+24     	; 0x2bfc <_ZN5Print5printEmi+0x62>
    2be4:	2f 81       	ldd	r18, Y+7	; 0x07
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	ad 81       	ldd	r26, Y+5	; 0x05
    2bec:	be 81       	ldd	r27, Y+6	; 0x06
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	bd 01       	movw	r22, r26
    2bf6:	cf 01       	movw	r24, r30
    2bf8:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <_ZN5Print11printNumberEmh>
    2bfc:	28 96       	adiw	r28, 0x08	; 8
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	08 95       	ret

00002c0e <_ZN5Print5printEdi>:
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	28 97       	sbiw	r28, 0x08	; 8
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	4b 83       	std	Y+3, r20	; 0x03
    2c28:	5c 83       	std	Y+4, r21	; 0x04
    2c2a:	6d 83       	std	Y+5, r22	; 0x05
    2c2c:	7e 83       	std	Y+6, r23	; 0x06
    2c2e:	38 87       	std	Y+8, r19	; 0x08
    2c30:	2f 83       	std	Y+7, r18	; 0x07
    2c32:	2f 81       	ldd	r18, Y+7	; 0x07
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	ad 81       	ldd	r26, Y+5	; 0x05
    2c3a:	be 81       	ldd	r27, Y+6	; 0x06
    2c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c40:	ac 01       	movw	r20, r24
    2c42:	bd 01       	movw	r22, r26
    2c44:	cf 01       	movw	r24, r30
    2c46:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN5Print10printFloatEdh>
    2c4a:	28 96       	adiw	r28, 0x08	; 8
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	ab 97       	sbiw	r28, 0x2b	; 43
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	9e a3       	std	Y+38, r25	; 0x26
    2c72:	8d a3       	std	Y+37, r24	; 0x25
    2c74:	4f a3       	std	Y+39, r20	; 0x27
    2c76:	58 a7       	std	Y+40, r21	; 0x28
    2c78:	69 a7       	std	Y+41, r22	; 0x29
    2c7a:	7a a7       	std	Y+42, r23	; 0x2a
    2c7c:	2b a7       	std	Y+43, r18	; 0x2b
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    2c7e:	80 e2       	ldi	r24, 0x20	; 32
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9e 01       	movw	r18, r28
    2c84:	2c 5f       	subi	r18, 0xFC	; 252
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	fc 01       	movw	r30, r24
    2c96:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9a:	82 30       	cpi	r24, 0x02	; 2
    2c9c:	10 f4       	brcc	.+4      	; 0x2ca2 <_ZN5Print11printNumberEmh+0x46>
    2c9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ca0:	8b a7       	std	Y+43, r24	; 0x2b

  do {
    char c = n % base;
    2ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	8f a1       	ldd	r24, Y+39	; 0x27
    2cae:	98 a5       	ldd	r25, Y+40	; 0x28
    2cb0:	a9 a5       	ldd	r26, Y+41	; 0x29
    2cb2:	ba a5       	ldd	r27, Y+42	; 0x2a
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__udivmodsi4>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    n /= base;
    2cc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc4:	28 2f       	mov	r18, r24
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	8f a1       	ldd	r24, Y+39	; 0x27
    2cce:	98 a5       	ldd	r25, Y+40	; 0x28
    2cd0:	a9 a5       	ldd	r26, Y+41	; 0x29
    2cd2:	ba a5       	ldd	r27, Y+42	; 0x2a
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__udivmodsi4>
    2cdc:	da 01       	movw	r26, r20
    2cde:	c9 01       	movw	r24, r18
    2ce0:	8f a3       	std	Y+39, r24	; 0x27
    2ce2:	98 a7       	std	Y+40, r25	; 0x28
    2ce4:	a9 a7       	std	Y+41, r26	; 0x29
    2ce6:	ba a7       	std	Y+42, r27	; 0x2a

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	8a 30       	cpi	r24, 0x0A	; 10
    2cf6:	20 f4       	brcc	.+8      	; 0x2d00 <_ZN5Print11printNumberEmh+0xa4>
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	20 e3       	ldi	r18, 0x30	; 48
    2cfc:	28 0f       	add	r18, r24
    2cfe:	03 c0       	rjmp	.+6      	; 0x2d06 <_ZN5Print11printNumberEmh+0xaa>
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	27 e3       	ldi	r18, 0x37	; 55
    2d04:	28 0f       	add	r18, r24
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2d0e:	8f a1       	ldd	r24, Y+39	; 0x27
    2d10:	98 a5       	ldd	r25, Y+40	; 0x28
    2d12:	a9 a5       	ldd	r26, Y+41	; 0x29
    2d14:	ba a5       	ldd	r27, Y+42	; 0x2a
    2d16:	89 2b       	or	r24, r25
    2d18:	8a 2b       	or	r24, r26
    2d1a:	8b 2b       	or	r24, r27
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <_ZN5Print11printNumberEmh+0xc4>
    2d1e:	c1 cf       	rjmp	.-126    	; 0x2ca2 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    2d20:	29 81       	ldd	r18, Y+1	; 0x01
    2d22:	3a 81       	ldd	r19, Y+2	; 0x02
    2d24:	8d a1       	ldd	r24, Y+37	; 0x25
    2d26:	9e a1       	ldd	r25, Y+38	; 0x26
    2d28:	b9 01       	movw	r22, r18
    2d2a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN5Print5writeEPKc>
}
    2d2e:	ab 96       	adiw	r28, 0x2b	; 43
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	08 95       	ret

00002d40 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	68 97       	sbiw	r28, 0x18	; 24
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	9b 8b       	std	Y+19, r25	; 0x13
    2d60:	8a 8b       	std	Y+18, r24	; 0x12
    2d62:	4c 8b       	std	Y+20, r20	; 0x14
    2d64:	5d 8b       	std	Y+21, r21	; 0x15
    2d66:	6e 8b       	std	Y+22, r22	; 0x16
    2d68:	7f 8b       	std	Y+23, r23	; 0x17
    2d6a:	28 8f       	std	Y+24, r18	; 0x18
  size_t n = 0;
    2d6c:	1a 82       	std	Y+2, r1	; 0x02
    2d6e:	19 82       	std	Y+1, r1	; 0x01
  
  if (isnan(number)) return print("nan");
    2d70:	2c 89       	ldd	r18, Y+20	; 0x14
    2d72:	3d 89       	ldd	r19, Y+21	; 0x15
    2d74:	4e 89       	ldd	r20, Y+22	; 0x16
    2d76:	5f 89       	ldd	r21, Y+23	; 0x17
    2d78:	6c 89       	ldd	r22, Y+20	; 0x14
    2d7a:	7d 89       	ldd	r23, Y+21	; 0x15
    2d7c:	8e 89       	ldd	r24, Y+22	; 0x16
    2d7e:	9f 89       	ldd	r25, Y+23	; 0x17
    2d80:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__unordsf2>
    2d84:	88 23       	and	r24, r24
    2d86:	39 f0       	breq	.+14     	; 0x2d96 <_ZN5Print10printFloatEdh+0x56>
    2d88:	8a 89       	ldd	r24, Y+18	; 0x12
    2d8a:	9b 89       	ldd	r25, Y+19	; 0x13
    2d8c:	69 e2       	ldi	r22, 0x29	; 41
    2d8e:	73 e0       	ldi	r23, 0x03	; 3
    2d90:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    2d94:	36 c1       	rjmp	.+620    	; 0x3002 <_ZN5Print10printFloatEdh+0x2c2>
  if (isinf(number)) return print("inf");
    2d96:	8c 89       	ldd	r24, Y+20	; 0x14
    2d98:	9d 89       	ldd	r25, Y+21	; 0x15
    2d9a:	ae 89       	ldd	r26, Y+22	; 0x16
    2d9c:	bf 89       	ldd	r27, Y+23	; 0x17
    2d9e:	6c 01       	movw	r12, r24
    2da0:	7d 01       	movw	r14, r26
    2da2:	e8 94       	clt
    2da4:	f7 f8       	bld	r15, 7
    2da6:	11 e0       	ldi	r17, 0x01	; 1
    2da8:	2f ef       	ldi	r18, 0xFF	; 255
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	5f e7       	ldi	r21, 0x7F	; 127
    2db0:	c7 01       	movw	r24, r14
    2db2:	b6 01       	movw	r22, r12
    2db4:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__unordsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	59 f4       	brne	.+22     	; 0x2dd2 <_ZN5Print10printFloatEdh+0x92>
    2dbc:	2f ef       	ldi	r18, 0xFF	; 255
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	5f e7       	ldi	r21, 0x7F	; 127
    2dc4:	c7 01       	movw	r24, r14
    2dc6:	b6 01       	movw	r22, r12
    2dc8:	0e 94 ab 39 	call	0x7356	; 0x7356 <__cmpsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	0c f4       	brge	.+2      	; 0x2dd2 <_ZN5Print10printFloatEdh+0x92>
    2dd0:	10 e0       	ldi	r17, 0x00	; 0
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	81 27       	eor	r24, r17
    2dd6:	88 23       	and	r24, r24
    2dd8:	39 f0       	breq	.+14     	; 0x2de8 <_ZN5Print10printFloatEdh+0xa8>
    2dda:	8a 89       	ldd	r24, Y+18	; 0x12
    2ddc:	9b 89       	ldd	r25, Y+19	; 0x13
    2dde:	6d e2       	ldi	r22, 0x2D	; 45
    2de0:	73 e0       	ldi	r23, 0x03	; 3
    2de2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    2de6:	0d c1       	rjmp	.+538    	; 0x3002 <_ZN5Print10printFloatEdh+0x2c2>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2de8:	2f ef       	ldi	r18, 0xFF	; 255
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	5f e4       	ldi	r21, 0x4F	; 79
    2df0:	6c 89       	ldd	r22, Y+20	; 0x14
    2df2:	7d 89       	ldd	r23, Y+21	; 0x15
    2df4:	8e 89       	ldd	r24, Y+22	; 0x16
    2df6:	9f 89       	ldd	r25, Y+23	; 0x17
    2df8:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	3c f4       	brge	.+14     	; 0x2e0e <_ZN5Print10printFloatEdh+0xce>
    2e00:	8a 89       	ldd	r24, Y+18	; 0x12
    2e02:	9b 89       	ldd	r25, Y+19	; 0x13
    2e04:	61 e3       	ldi	r22, 0x31	; 49
    2e06:	73 e0       	ldi	r23, 0x03	; 3
    2e08:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    2e0c:	fa c0       	rjmp	.+500    	; 0x3002 <_ZN5Print10printFloatEdh+0x2c2>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2e0e:	2f ef       	ldi	r18, 0xFF	; 255
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	4f e7       	ldi	r20, 0x7F	; 127
    2e14:	5f ec       	ldi	r21, 0xCF	; 207
    2e16:	6c 89       	ldd	r22, Y+20	; 0x14
    2e18:	7d 89       	ldd	r23, Y+21	; 0x15
    2e1a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e1c:	9f 89       	ldd	r25, Y+23	; 0x17
    2e1e:	0e 94 ab 39 	call	0x7356	; 0x7356 <__cmpsf2>
    2e22:	88 23       	and	r24, r24
    2e24:	3c f4       	brge	.+14     	; 0x2e34 <_ZN5Print10printFloatEdh+0xf4>
    2e26:	8a 89       	ldd	r24, Y+18	; 0x12
    2e28:	9b 89       	ldd	r25, Y+19	; 0x13
    2e2a:	61 e3       	ldi	r22, 0x31	; 49
    2e2c:	73 e0       	ldi	r23, 0x03	; 3
    2e2e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN5Print5printEPKc>
    2e32:	e7 c0       	rjmp	.+462    	; 0x3002 <_ZN5Print10printFloatEdh+0x2c2>
  
  // Handle negative numbers
  if (number < 0.0)
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	a9 01       	movw	r20, r18
    2e3a:	6c 89       	ldd	r22, Y+20	; 0x14
    2e3c:	7d 89       	ldd	r23, Y+21	; 0x15
    2e3e:	8e 89       	ldd	r24, Y+22	; 0x16
    2e40:	9f 89       	ldd	r25, Y+23	; 0x17
    2e42:	0e 94 ab 39 	call	0x7356	; 0x7356 <__cmpsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	ac f4       	brge	.+42     	; 0x2e74 <_ZN5Print10printFloatEdh+0x134>
  {
     n += print('-');
    2e4a:	8a 89       	ldd	r24, Y+18	; 0x12
    2e4c:	9b 89       	ldd	r25, Y+19	; 0x13
    2e4e:	6d e2       	ldi	r22, 0x2D	; 45
    2e50:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN5Print5printEc>
    2e54:	9c 01       	movw	r18, r24
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	82 0f       	add	r24, r18
    2e5c:	93 1f       	adc	r25, r19
    2e5e:	9a 83       	std	Y+2, r25	; 0x02
    2e60:	89 83       	std	Y+1, r24	; 0x01
     number = -number;
    2e62:	8c 89       	ldd	r24, Y+20	; 0x14
    2e64:	9d 89       	ldd	r25, Y+21	; 0x15
    2e66:	ae 89       	ldd	r26, Y+22	; 0x16
    2e68:	bf 89       	ldd	r27, Y+23	; 0x17
    2e6a:	b0 58       	subi	r27, 0x80	; 128
    2e6c:	8c 8b       	std	Y+20, r24	; 0x14
    2e6e:	9d 8b       	std	Y+21, r25	; 0x15
    2e70:	ae 8b       	std	Y+22, r26	; 0x16
    2e72:	bf 8b       	std	Y+23, r27	; 0x17
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	a0 e0       	ldi	r26, 0x00	; 0
    2e7a:	bf e3       	ldi	r27, 0x3F	; 63
    2e7c:	8b 83       	std	Y+3, r24	; 0x03
    2e7e:	9c 83       	std	Y+4, r25	; 0x04
    2e80:	ad 83       	std	Y+5, r26	; 0x05
    2e82:	be 83       	std	Y+6, r27	; 0x06
  for (uint8_t i=0; i<digits; ++i)
    2e84:	1f 82       	std	Y+7, r1	; 0x07
    2e86:	9f 81       	ldd	r25, Y+7	; 0x07
    2e88:	88 8d       	ldd	r24, Y+24	; 0x18
    2e8a:	98 17       	cp	r25, r24
    2e8c:	a0 f4       	brcc	.+40     	; 0x2eb6 <_ZN5Print10printFloatEdh+0x176>
    rounding /= 10.0;
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	6b 81       	ldd	r22, Y+3	; 0x03
    2e98:	7c 81       	ldd	r23, Y+4	; 0x04
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
    2ea8:	9c 83       	std	Y+4, r25	; 0x04
    2eaa:	ad 83       	std	Y+5, r26	; 0x05
    2eac:	be 83       	std	Y+6, r27	; 0x06
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2eae:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	e8 cf       	rjmp	.-48     	; 0x2e86 <_ZN5Print10printFloatEdh+0x146>
    rounding /= 10.0;
  
  number += rounding;
    2eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    2eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    2eba:	4d 81       	ldd	r20, Y+5	; 0x05
    2ebc:	5e 81       	ldd	r21, Y+6	; 0x06
    2ebe:	6c 89       	ldd	r22, Y+20	; 0x14
    2ec0:	7d 89       	ldd	r23, Y+21	; 0x15
    2ec2:	8e 89       	ldd	r24, Y+22	; 0x16
    2ec4:	9f 89       	ldd	r25, Y+23	; 0x17
    2ec6:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__addsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	8c 8b       	std	Y+20, r24	; 0x14
    2ed0:	9d 8b       	std	Y+21, r25	; 0x15
    2ed2:	ae 8b       	std	Y+22, r26	; 0x16
    2ed4:	bf 8b       	std	Y+23, r27	; 0x17

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2ed6:	6c 89       	ldd	r22, Y+20	; 0x14
    2ed8:	7d 89       	ldd	r23, Y+21	; 0x15
    2eda:	8e 89       	ldd	r24, Y+22	; 0x16
    2edc:	9f 89       	ldd	r25, Y+23	; 0x17
    2ede:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	8c 87       	std	Y+12, r24	; 0x0c
    2ee8:	9d 87       	std	Y+13, r25	; 0x0d
    2eea:	ae 87       	std	Y+14, r26	; 0x0e
    2eec:	bf 87       	std	Y+15, r27	; 0x0f
  double remainder = number - (double)int_part;
    2eee:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ef0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ef2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ef6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatunsisf>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	9c 01       	movw	r18, r24
    2f00:	ad 01       	movw	r20, r26
    2f02:	6c 89       	ldd	r22, Y+20	; 0x14
    2f04:	7d 89       	ldd	r23, Y+21	; 0x15
    2f06:	8e 89       	ldd	r24, Y+22	; 0x16
    2f08:	9f 89       	ldd	r25, Y+23	; 0x17
    2f0a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__subsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	88 87       	std	Y+8, r24	; 0x08
    2f14:	99 87       	std	Y+9, r25	; 0x09
    2f16:	aa 87       	std	Y+10, r26	; 0x0a
    2f18:	bb 87       	std	Y+11, r27	; 0x0b
  n += print(int_part);
    2f1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f1e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f20:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f22:	ea 89       	ldd	r30, Y+18	; 0x12
    2f24:	fb 89       	ldd	r31, Y+19	; 0x13
    2f26:	2a e0       	ldi	r18, 0x0A	; 10
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	ac 01       	movw	r20, r24
    2f2c:	bd 01       	movw	r22, r26
    2f2e:	cf 01       	movw	r24, r30
    2f30:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN5Print5printEmi>
    2f34:	9c 01       	movw	r18, r24
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	9a 83       	std	Y+2, r25	; 0x02
    2f40:	89 83       	std	Y+1, r24	; 0x01

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2f42:	88 8d       	ldd	r24, Y+24	; 0x18
    2f44:	88 23       	and	r24, r24
    2f46:	61 f0       	breq	.+24     	; 0x2f60 <_ZN5Print10printFloatEdh+0x220>
    n += print('.'); 
    2f48:	8a 89       	ldd	r24, Y+18	; 0x12
    2f4a:	9b 89       	ldd	r25, Y+19	; 0x13
    2f4c:	6e e2       	ldi	r22, 0x2E	; 46
    2f4e:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN5Print5printEc>
    2f52:	9c 01       	movw	r18, r24
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	82 0f       	add	r24, r18
    2f5a:	93 1f       	adc	r25, r19
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2f60:	88 8d       	ldd	r24, Y+24	; 0x18
    2f62:	9f ef       	ldi	r25, 0xFF	; 255
    2f64:	98 0f       	add	r25, r24
    2f66:	98 8f       	std	Y+24, r25	; 0x18
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	88 23       	and	r24, r24
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <_ZN5Print10printFloatEdh+0x230>
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	99 23       	and	r25, r25
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <_ZN5Print10printFloatEdh+0x236>
    2f74:	44 c0       	rjmp	.+136    	; 0x2ffe <_ZN5Print10printFloatEdh+0x2be>
  {
    remainder *= 10.0;
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	68 85       	ldd	r22, Y+8	; 0x08
    2f80:	79 85       	ldd	r23, Y+9	; 0x09
    2f82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f86:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	88 87       	std	Y+8, r24	; 0x08
    2f90:	99 87       	std	Y+9, r25	; 0x09
    2f92:	aa 87       	std	Y+10, r26	; 0x0a
    2f94:	bb 87       	std	Y+11, r27	; 0x0b
    unsigned int toPrint = (unsigned int)(remainder);
    2f96:	68 85       	ldd	r22, Y+8	; 0x08
    2f98:	79 85       	ldd	r23, Y+9	; 0x09
    2f9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f9e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	99 8b       	std	Y+17, r25	; 0x11
    2fa8:	88 8b       	std	Y+16, r24	; 0x10
    n += print(toPrint);
    2faa:	28 89       	ldd	r18, Y+16	; 0x10
    2fac:	39 89       	ldd	r19, Y+17	; 0x11
    2fae:	8a 89       	ldd	r24, Y+18	; 0x12
    2fb0:	9b 89       	ldd	r25, Y+19	; 0x13
    2fb2:	4a e0       	ldi	r20, 0x0A	; 10
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	b9 01       	movw	r22, r18
    2fb8:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN5Print5printEji>
    2fbc:	9c 01       	movw	r18, r24
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc2:	82 0f       	add	r24, r18
    2fc4:	93 1f       	adc	r25, r19
    2fc6:	9a 83       	std	Y+2, r25	; 0x02
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    remainder -= toPrint; 
    2fca:	88 89       	ldd	r24, Y+16	; 0x10
    2fcc:	99 89       	ldd	r25, Y+17	; 0x11
    2fce:	cc 01       	movw	r24, r24
    2fd0:	a0 e0       	ldi	r26, 0x00	; 0
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatunsisf>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9c 01       	movw	r18, r24
    2fe2:	ad 01       	movw	r20, r26
    2fe4:	68 85       	ldd	r22, Y+8	; 0x08
    2fe6:	79 85       	ldd	r23, Y+9	; 0x09
    2fe8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fec:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__subsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	88 87       	std	Y+8, r24	; 0x08
    2ff6:	99 87       	std	Y+9, r25	; 0x09
    2ff8:	aa 87       	std	Y+10, r26	; 0x0a
    2ffa:	bb 87       	std	Y+11, r27	; 0x0b
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2ffc:	b1 cf       	rjmp	.-158    	; 0x2f60 <_ZN5Print10printFloatEdh+0x220>
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3002:	68 96       	adiw	r28, 0x18	; 24
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	08 95       	ret

0000301e <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    301e:	1f 92       	push	r1
    3020:	0f 92       	push	r0
    3022:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3026:	0f 92       	push	r0
    3028:	11 24       	eor	r1, r1
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	af 93       	push	r26
    3030:	bf 93       	push	r27
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	25 97       	sbiw	r28, 0x05	; 5
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer0_millis>
    3044:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer0_millis+0x1>
    3048:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer0_millis+0x2>
    304c:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer0_millis+0x3>
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	ab 83       	std	Y+3, r26	; 0x03
    3056:	bc 83       	std	Y+4, r27	; 0x04
    3058:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <timer0_fract>
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	9a 81       	ldd	r25, Y+2	; 0x02
    3062:	ab 81       	ldd	r26, Y+3	; 0x03
    3064:	bc 81       	ldd	r27, Y+4	; 0x04
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	a1 1d       	adc	r26, r1
    306a:	b1 1d       	adc	r27, r1
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	ab 83       	std	Y+3, r26	; 0x03
    3072:	bc 83       	std	Y+4, r27	; 0x04
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	8d 5f       	subi	r24, 0xFD	; 253
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	8d 81       	ldd	r24, Y+5	; 0x05
    307c:	8d 37       	cpi	r24, 0x7D	; 125
    307e:	70 f0       	brcs	.+28     	; 0x309c <__vector_16+0x7e>
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	8d 57       	subi	r24, 0x7D	; 125
    3084:	8d 83       	std	Y+5, r24	; 0x05
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	ab 81       	ldd	r26, Y+3	; 0x03
    308c:	bc 81       	ldd	r27, Y+4	; 0x04
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	a1 1d       	adc	r26, r1
    3092:	b1 1d       	adc	r27, r1
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	ab 83       	std	Y+3, r26	; 0x03
    309a:	bc 83       	std	Y+4, r27	; 0x04
    309c:	8d 81       	ldd	r24, Y+5	; 0x05
    309e:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <timer0_fract>
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	9a 81       	ldd	r25, Y+2	; 0x02
    30a6:	ab 81       	ldd	r26, Y+3	; 0x03
    30a8:	bc 81       	ldd	r27, Y+4	; 0x04
    30aa:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <timer0_millis>
    30ae:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <timer0_millis+0x1>
    30b2:	a0 93 3d 05 	sts	0x053D, r26	; 0x80053d <timer0_millis+0x2>
    30b6:	b0 93 3e 05 	sts	0x053E, r27	; 0x80053e <timer0_millis+0x3>
    30ba:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <timer0_overflow_count>
    30be:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <timer0_overflow_count+0x1>
    30c2:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <timer0_overflow_count+0x2>
    30c6:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <timer0_overflow_count+0x3>
    30ca:	01 96       	adiw	r24, 0x01	; 1
    30cc:	a1 1d       	adc	r26, r1
    30ce:	b1 1d       	adc	r27, r1
    30d0:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <timer0_overflow_count>
    30d4:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <timer0_overflow_count+0x1>
    30d8:	a0 93 39 05 	sts	0x0539, r26	; 0x800539 <timer0_overflow_count+0x2>
    30dc:	b0 93 3a 05 	sts	0x053A, r27	; 0x80053a <timer0_overflow_count+0x3>
    30e0:	00 00       	nop
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	bf 91       	pop	r27
    30f2:	af 91       	pop	r26
    30f4:	9f 91       	pop	r25
    30f6:	8f 91       	pop	r24
    30f8:	0f 90       	pop	r0
    30fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    30fe:	0f 90       	pop	r0
    3100:	1f 90       	pop	r1
    3102:	18 95       	reti

00003104 <millis>:
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	00 d0       	rcall	.+0      	; 0x310a <millis+0x6>
    310a:	00 d0       	rcall	.+0      	; 0x310c <millis+0x8>
    310c:	1f 92       	push	r1
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	8f e5       	ldi	r24, 0x5F	; 95
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	fc 01       	movw	r30, r24
    3118:	80 81       	ld	r24, Z
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	f8 94       	cli
    311e:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer0_millis>
    3122:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer0_millis+0x1>
    3126:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer0_millis+0x2>
    312a:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer0_millis+0x3>
    312e:	8a 83       	std	Y+2, r24	; 0x02
    3130:	9b 83       	std	Y+3, r25	; 0x03
    3132:	ac 83       	std	Y+4, r26	; 0x04
    3134:	bd 83       	std	Y+5, r27	; 0x05
    3136:	8f e5       	ldi	r24, 0x5F	; 95
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	29 81       	ldd	r18, Y+1	; 0x01
    313c:	fc 01       	movw	r30, r24
    313e:	20 83       	st	Z, r18
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	ac 81       	ldd	r26, Y+4	; 0x04
    3146:	bd 81       	ldd	r27, Y+5	; 0x05
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	08 95       	ret

0000315c <micros>:
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	00 d0       	rcall	.+0      	; 0x3162 <micros+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <micros+0x8>
    3164:	00 d0       	rcall	.+0      	; 0x3166 <micros+0xa>
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	8f e5       	ldi	r24, 0x5F	; 95
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	fc 01       	movw	r30, r24
    3170:	80 81       	ld	r24, Z
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	f8 94       	cli
    3176:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <timer0_overflow_count>
    317a:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <timer0_overflow_count+0x1>
    317e:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <timer0_overflow_count+0x2>
    3182:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <timer0_overflow_count+0x3>
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	ab 83       	std	Y+3, r26	; 0x03
    318c:	bc 83       	std	Y+4, r27	; 0x04
    318e:	86 e4       	ldi	r24, 0x46	; 70
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	fc 01       	movw	r30, r24
    3194:	80 81       	ld	r24, Z
    3196:	8e 83       	std	Y+6, r24	; 0x06
    3198:	85 e3       	ldi	r24, 0x35	; 53
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	fc 01       	movw	r30, r24
    319e:	80 81       	ld	r24, Z
    31a0:	88 2f       	mov	r24, r24
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	81 70       	andi	r24, 0x01	; 1
    31a6:	99 27       	eor	r25, r25
    31a8:	89 2b       	or	r24, r25
    31aa:	71 f0       	breq	.+28     	; 0x31c8 <micros+0x6c>
    31ac:	8e 81       	ldd	r24, Y+6	; 0x06
    31ae:	8f 3f       	cpi	r24, 0xFF	; 255
    31b0:	59 f0       	breq	.+22     	; 0x31c8 <micros+0x6c>
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	ab 81       	ldd	r26, Y+3	; 0x03
    31b8:	bc 81       	ldd	r27, Y+4	; 0x04
    31ba:	01 96       	adiw	r24, 0x01	; 1
    31bc:	a1 1d       	adc	r26, r1
    31be:	b1 1d       	adc	r27, r1
    31c0:	89 83       	std	Y+1, r24	; 0x01
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	ab 83       	std	Y+3, r26	; 0x03
    31c6:	bc 83       	std	Y+4, r27	; 0x04
    31c8:	8f e5       	ldi	r24, 0x5F	; 95
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	2d 81       	ldd	r18, Y+5	; 0x05
    31ce:	fc 01       	movw	r30, r24
    31d0:	20 83       	st	Z, r18
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	9a 81       	ldd	r25, Y+2	; 0x02
    31d6:	ab 81       	ldd	r26, Y+3	; 0x03
    31d8:	bc 81       	ldd	r27, Y+4	; 0x04
    31da:	22 27       	eor	r18, r18
    31dc:	38 2f       	mov	r19, r24
    31de:	49 2f       	mov	r20, r25
    31e0:	5a 2f       	mov	r21, r26
    31e2:	8e 81       	ldd	r24, Y+6	; 0x06
    31e4:	88 2f       	mov	r24, r24
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	a0 e0       	ldi	r26, 0x00	; 0
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	82 0f       	add	r24, r18
    31ee:	93 1f       	adc	r25, r19
    31f0:	a4 1f       	adc	r26, r20
    31f2:	b5 1f       	adc	r27, r21
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	aa 1f       	adc	r26, r26
    3202:	bb 1f       	adc	r27, r27
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	26 96       	adiw	r28, 0x06	; 6
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	08 95       	ret

0000321a <delay>:
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	28 97       	sbiw	r28, 0x08	; 8
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	6d 83       	std	Y+5, r22	; 0x05
    3238:	7e 83       	std	Y+6, r23	; 0x06
    323a:	8f 83       	std	Y+7, r24	; 0x07
    323c:	98 87       	std	Y+8, r25	; 0x08
    323e:	0e 94 ae 18 	call	0x315c	; 0x315c <micros>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	ab 83       	std	Y+3, r26	; 0x03
    324c:	bc 83       	std	Y+4, r27	; 0x04
    324e:	37 c0       	rjmp	.+110    	; 0x32be <delay+0xa4>
    3250:	0e 94 f6 36 	call	0x6dec	; 0x6dec <yield>
    3254:	17 c0       	rjmp	.+46     	; 0x3284 <delay+0x6a>
    3256:	8d 81       	ldd	r24, Y+5	; 0x05
    3258:	9e 81       	ldd	r25, Y+6	; 0x06
    325a:	af 81       	ldd	r26, Y+7	; 0x07
    325c:	b8 85       	ldd	r27, Y+8	; 0x08
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	a1 09       	sbc	r26, r1
    3262:	b1 09       	sbc	r27, r1
    3264:	8d 83       	std	Y+5, r24	; 0x05
    3266:	9e 83       	std	Y+6, r25	; 0x06
    3268:	af 83       	std	Y+7, r26	; 0x07
    326a:	b8 87       	std	Y+8, r27	; 0x08
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	ab 81       	ldd	r26, Y+3	; 0x03
    3272:	bc 81       	ldd	r27, Y+4	; 0x04
    3274:	88 51       	subi	r24, 0x18	; 24
    3276:	9c 4f       	sbci	r25, 0xFC	; 252
    3278:	af 4f       	sbci	r26, 0xFF	; 255
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	ab 83       	std	Y+3, r26	; 0x03
    3282:	bc 83       	std	Y+4, r27	; 0x04
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	9e 81       	ldd	r25, Y+6	; 0x06
    3288:	af 81       	ldd	r26, Y+7	; 0x07
    328a:	b8 85       	ldd	r27, Y+8	; 0x08
    328c:	89 2b       	or	r24, r25
    328e:	8a 2b       	or	r24, r26
    3290:	8b 2b       	or	r24, r27
    3292:	a9 f0       	breq	.+42     	; 0x32be <delay+0xa4>
    3294:	0e 94 ae 18 	call	0x315c	; 0x315c <micros>
    3298:	9b 01       	movw	r18, r22
    329a:	ac 01       	movw	r20, r24
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
    32a0:	ab 81       	ldd	r26, Y+3	; 0x03
    32a2:	bc 81       	ldd	r27, Y+4	; 0x04
    32a4:	79 01       	movw	r14, r18
    32a6:	8a 01       	movw	r16, r20
    32a8:	e8 1a       	sub	r14, r24
    32aa:	f9 0a       	sbc	r15, r25
    32ac:	0a 0b       	sbc	r16, r26
    32ae:	1b 0b       	sbc	r17, r27
    32b0:	d8 01       	movw	r26, r16
    32b2:	c7 01       	movw	r24, r14
    32b4:	88 3e       	cpi	r24, 0xE8	; 232
    32b6:	93 40       	sbci	r25, 0x03	; 3
    32b8:	a1 05       	cpc	r26, r1
    32ba:	b1 05       	cpc	r27, r1
    32bc:	60 f6       	brcc	.-104    	; 0x3256 <delay+0x3c>
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	af 81       	ldd	r26, Y+7	; 0x07
    32c4:	b8 85       	ldd	r27, Y+8	; 0x08
    32c6:	89 2b       	or	r24, r25
    32c8:	8a 2b       	or	r24, r26
    32ca:	8b 2b       	or	r24, r27
    32cc:	09 f6       	brne	.-126    	; 0x3250 <delay+0x36>
    32ce:	00 00       	nop
    32d0:	28 96       	adiw	r28, 0x08	; 8
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	0f 91       	pop	r16
    32e4:	ff 90       	pop	r15
    32e6:	ef 90       	pop	r14
    32e8:	08 95       	ret

000032ea <init>:

void init()
{
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    32f2:	78 94       	sei
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    32f4:	84 e4       	ldi	r24, 0x44	; 68
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	24 e4       	ldi	r18, 0x44	; 68
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	f9 01       	movw	r30, r18
    32fe:	20 81       	ld	r18, Z
    3300:	22 60       	ori	r18, 0x02	; 2
    3302:	fc 01       	movw	r30, r24
    3304:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    3306:	84 e4       	ldi	r24, 0x44	; 68
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	24 e4       	ldi	r18, 0x44	; 68
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	f9 01       	movw	r30, r18
    3310:	20 81       	ld	r18, Z
    3312:	21 60       	ori	r18, 0x01	; 1
    3314:	fc 01       	movw	r30, r24
    3316:	20 83       	st	Z, r18
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560

	sbi(TCCR0B, CS01);
    3318:	85 e4       	ldi	r24, 0x45	; 69
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	25 e4       	ldi	r18, 0x45	; 69
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	f9 01       	movw	r30, r18
    3322:	20 81       	ld	r18, Z
    3324:	22 60       	ori	r18, 0x02	; 2
    3326:	fc 01       	movw	r30, r24
    3328:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    332a:	85 e4       	ldi	r24, 0x45	; 69
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	25 e4       	ldi	r18, 0x45	; 69
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	f9 01       	movw	r30, r18
    3334:	20 81       	ld	r18, Z
    3336:	21 60       	ori	r18, 0x01	; 1
    3338:	fc 01       	movw	r30, r24
    333a:	20 83       	st	Z, r18
	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)

	sbi(TIMSK0, TOIE0);
    333c:	8e e6       	ldi	r24, 0x6E	; 110
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	2e e6       	ldi	r18, 0x6E	; 110
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	f9 01       	movw	r30, r18
    3346:	20 81       	ld	r18, Z
    3348:	21 60       	ori	r18, 0x01	; 1
    334a:	fc 01       	movw	r30, r24
    334c:	20 83       	st	Z, r18
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle


#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    334e:	81 e8       	ldi	r24, 0x81	; 129
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	fc 01       	movw	r30, r24
    3354:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3356:	81 e8       	ldi	r24, 0x81	; 129
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	21 e8       	ldi	r18, 0x81	; 129
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	f9 01       	movw	r30, r18
    3360:	20 81       	ld	r18, Z
    3362:	22 60       	ori	r18, 0x02	; 2
    3364:	fc 01       	movw	r30, r24
    3366:	20 83       	st	Z, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3368:	81 e8       	ldi	r24, 0x81	; 129
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	21 e8       	ldi	r18, 0x81	; 129
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	f9 01       	movw	r30, r18
    3372:	20 81       	ld	r18, Z
    3374:	21 60       	ori	r18, 0x01	; 1
    3376:	fc 01       	movw	r30, r24
    3378:	20 83       	st	Z, r18



	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    337a:	80 e8       	ldi	r24, 0x80	; 128
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	20 e8       	ldi	r18, 0x80	; 128
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	f9 01       	movw	r30, r18
    3384:	20 81       	ld	r18, Z
    3386:	21 60       	ori	r18, 0x01	; 1
    3388:	fc 01       	movw	r30, r24
    338a:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    338c:	81 eb       	ldi	r24, 0xB1	; 177
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	21 eb       	ldi	r18, 0xB1	; 177
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	f9 01       	movw	r30, r18
    3396:	20 81       	ld	r18, Z
    3398:	24 60       	ori	r18, 0x04	; 4
    339a:	fc 01       	movw	r30, r24
    339c:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    339e:	80 eb       	ldi	r24, 0xB0	; 176
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	20 eb       	ldi	r18, 0xB0	; 176
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	f9 01       	movw	r30, r18
    33a8:	20 81       	ld	r18, Z
    33aa:	21 60       	ori	r18, 0x01	; 1
    33ac:	fc 01       	movw	r30, r24
    33ae:	20 83       	st	Z, r18
	sbi(TCCR5B, CS50);
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
#endif


sbi(ADCSRA, ADPS2);
    33b0:	8a e7       	ldi	r24, 0x7A	; 122
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	2a e7       	ldi	r18, 0x7A	; 122
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	f9 01       	movw	r30, r18
    33ba:	20 81       	ld	r18, Z
    33bc:	24 60       	ori	r18, 0x04	; 4
    33be:	fc 01       	movw	r30, r24
    33c0:	20 83       	st	Z, r18
sbi(ADCSRA, ADPS1);
    33c2:	8a e7       	ldi	r24, 0x7A	; 122
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	2a e7       	ldi	r18, 0x7A	; 122
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	f9 01       	movw	r30, r18
    33cc:	20 81       	ld	r18, Z
    33ce:	22 60       	ori	r18, 0x02	; 2
    33d0:	fc 01       	movw	r30, r24
    33d2:	20 83       	st	Z, r18
sbi(ADCSRA, ADPS0);
    33d4:	8a e7       	ldi	r24, 0x7A	; 122
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	2a e7       	ldi	r18, 0x7A	; 122
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	f9 01       	movw	r30, r18
    33de:	20 81       	ld	r18, Z
    33e0:	21 60       	ori	r18, 0x01	; 1
    33e2:	fc 01       	movw	r30, r24
    33e4:	20 83       	st	Z, r18
sbi(ADCSRA, ADEN);
    33e6:	8a e7       	ldi	r24, 0x7A	; 122
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	2a e7       	ldi	r18, 0x7A	; 122
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	f9 01       	movw	r30, r18
    33f0:	20 81       	ld	r18, Z
    33f2:	20 68       	ori	r18, 0x80	; 128
    33f4:	fc 01       	movw	r30, r24
    33f6:	20 83       	st	Z, r18
		

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    33f8:	8a e7       	ldi	r24, 0x7A	; 122
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	2a e7       	ldi	r18, 0x7A	; 122
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	f9 01       	movw	r30, r18
    3402:	20 81       	ld	r18, Z
    3404:	24 60       	ori	r18, 0x04	; 4
    3406:	fc 01       	movw	r30, r24
    3408:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS1);
    340a:	8a e7       	ldi	r24, 0x7A	; 122
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	2a e7       	ldi	r18, 0x7A	; 122
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	f9 01       	movw	r30, r18
    3414:	20 81       	ld	r18, Z
    3416:	22 60       	ori	r18, 0x02	; 2
    3418:	fc 01       	movw	r30, r24
    341a:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS0);
    341c:	8a e7       	ldi	r24, 0x7A	; 122
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	2a e7       	ldi	r18, 0x7A	; 122
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	f9 01       	movw	r30, r18
    3426:	20 81       	ld	r18, Z
    3428:	21 60       	ori	r18, 0x01	; 1
    342a:	fc 01       	movw	r30, r24
    342c:	20 83       	st	Z, r18
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    342e:	8a e7       	ldi	r24, 0x7A	; 122
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	2a e7       	ldi	r18, 0x7A	; 122
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	f9 01       	movw	r30, r18
    3438:	20 81       	ld	r18, Z
    343a:	20 68       	ori	r18, 0x80	; 128
    343c:	fc 01       	movw	r30, r24
    343e:	20 83       	st	Z, r18
	// reconnected in Serial.begin()

#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3440:	81 ec       	ldi	r24, 0xC1	; 193
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	fc 01       	movw	r30, r24
    3446:	10 82       	st	Z, r1
#endif

}
    3448:	00 00       	nop
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	08 95       	ret

00003450 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	69 97       	sbiw	r28, 0x19	; 25
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	88 8f       	std	Y+24, r24	; 0x18
    3466:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
    3468:	88 8d       	ldd	r24, Y+24	; 0x18
    346a:	88 2f       	mov	r24, r24
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	80 56       	subi	r24, 0x60	; 96
    3470:	9d 4f       	sbci	r25, 0xFD	; 253
    3472:	9a 83       	std	Y+2, r25	; 0x02
    3474:	89 83       	std	Y+1, r24	; 0x01
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	9a 81       	ldd	r25, Y+2	; 0x02
    347a:	fc 01       	movw	r30, r24
    347c:	84 91       	lpm	r24, Z
    347e:	8b 83       	std	Y+3, r24	; 0x03
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    3484:	88 8d       	ldd	r24, Y+24	; 0x18
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	84 57       	subi	r24, 0x74	; 116
    348c:	9d 4f       	sbci	r25, 0xFD	; 253
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	fc 01       	movw	r30, r24
    3498:	84 91       	lpm	r24, Z
    349a:	8f 83       	std	Y+7, r24	; 0x07
    349c:	8f 81       	ldd	r24, Y+7	; 0x07
    349e:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    34a0:	88 85       	ldd	r24, Y+8	; 0x08
    34a2:	88 23       	and	r24, r24
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <pinMode+0x58>
    34a6:	95 c0       	rjmp	.+298    	; 0x35d2 <pinMode+0x182>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    34a8:	88 85       	ldd	r24, Y+8	; 0x08
    34aa:	88 2f       	mov	r24, r24
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	82 59       	subi	r24, 0x92	; 146
    34b4:	9d 4f       	sbci	r25, 0xFD	; 253
    34b6:	9a 87       	std	Y+10, r25	; 0x0a
    34b8:	89 87       	std	Y+9, r24	; 0x09
    34ba:	89 85       	ldd	r24, Y+9	; 0x09
    34bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34be:	fc 01       	movw	r30, r24
    34c0:	25 91       	lpm	r18, Z+
    34c2:	34 91       	lpm	r19, Z
    34c4:	cf 01       	movw	r24, r30
    34c6:	3c 87       	std	Y+12, r19	; 0x0c
    34c8:	2b 87       	std	Y+11, r18	; 0x0b
    34ca:	9a 87       	std	Y+10, r25	; 0x0a
    34cc:	89 87       	std	Y+9, r24	; 0x09
    34ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    34d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    34d2:	9e 87       	std	Y+14, r25	; 0x0e
    34d4:	8d 87       	std	Y+13, r24	; 0x0d
	out = portOutputRegister(port);
    34d6:	88 85       	ldd	r24, Y+8	; 0x08
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	88 58       	subi	r24, 0x88	; 136
    34e2:	9d 4f       	sbci	r25, 0xFD	; 253
    34e4:	98 8b       	std	Y+16, r25	; 0x10
    34e6:	8f 87       	std	Y+15, r24	; 0x0f
    34e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ea:	98 89       	ldd	r25, Y+16	; 0x10
    34ec:	fc 01       	movw	r30, r24
    34ee:	25 91       	lpm	r18, Z+
    34f0:	34 91       	lpm	r19, Z
    34f2:	cf 01       	movw	r24, r30
    34f4:	3a 8b       	std	Y+18, r19	; 0x12
    34f6:	29 8b       	std	Y+17, r18	; 0x11
    34f8:	98 8b       	std	Y+16, r25	; 0x10
    34fa:	8f 87       	std	Y+15, r24	; 0x0f
    34fc:	89 89       	ldd	r24, Y+17	; 0x11
    34fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3500:	9c 8b       	std	Y+20, r25	; 0x14
    3502:	8b 8b       	std	Y+19, r24	; 0x13

	if (mode == INPUT) { 
    3504:	89 8d       	ldd	r24, Y+25	; 0x19
    3506:	88 23       	and	r24, r24
    3508:	31 f5       	brne	.+76     	; 0x3556 <pinMode+0x106>
		uint8_t oldSREG = SREG;
    350a:	8f e5       	ldi	r24, 0x5F	; 95
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	fc 01       	movw	r30, r24
    3510:	80 81       	ld	r24, Z
    3512:	8d 8b       	std	Y+21, r24	; 0x15
                cli();
    3514:	f8 94       	cli
		*reg &= ~bit;
    3516:	8d 85       	ldd	r24, Y+13	; 0x0d
    3518:	9e 85       	ldd	r25, Y+14	; 0x0e
    351a:	fc 01       	movw	r30, r24
    351c:	80 81       	ld	r24, Z
    351e:	98 2f       	mov	r25, r24
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	80 95       	com	r24
    3524:	89 23       	and	r24, r25
    3526:	28 2f       	mov	r18, r24
    3528:	8d 85       	ldd	r24, Y+13	; 0x0d
    352a:	9e 85       	ldd	r25, Y+14	; 0x0e
    352c:	fc 01       	movw	r30, r24
    352e:	20 83       	st	Z, r18
		*out &= ~bit;
    3530:	8b 89       	ldd	r24, Y+19	; 0x13
    3532:	9c 89       	ldd	r25, Y+20	; 0x14
    3534:	fc 01       	movw	r30, r24
    3536:	80 81       	ld	r24, Z
    3538:	98 2f       	mov	r25, r24
    353a:	8c 81       	ldd	r24, Y+4	; 0x04
    353c:	80 95       	com	r24
    353e:	89 23       	and	r24, r25
    3540:	28 2f       	mov	r18, r24
    3542:	8b 89       	ldd	r24, Y+19	; 0x13
    3544:	9c 89       	ldd	r25, Y+20	; 0x14
    3546:	fc 01       	movw	r30, r24
    3548:	20 83       	st	Z, r18
		SREG = oldSREG;
    354a:	8f e5       	ldi	r24, 0x5F	; 95
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	2d 89       	ldd	r18, Y+21	; 0x15
    3550:	fc 01       	movw	r30, r24
    3552:	20 83       	st	Z, r18
    3554:	3f c0       	rjmp	.+126    	; 0x35d4 <pinMode+0x184>
	} else if (mode == INPUT_PULLUP) {
    3556:	89 8d       	ldd	r24, Y+25	; 0x19
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	21 f5       	brne	.+72     	; 0x35a4 <pinMode+0x154>
		uint8_t oldSREG = SREG;
    355c:	8f e5       	ldi	r24, 0x5F	; 95
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	fc 01       	movw	r30, r24
    3562:	80 81       	ld	r24, Z
    3564:	8e 8b       	std	Y+22, r24	; 0x16
                cli();
    3566:	f8 94       	cli
		*reg &= ~bit;
    3568:	8d 85       	ldd	r24, Y+13	; 0x0d
    356a:	9e 85       	ldd	r25, Y+14	; 0x0e
    356c:	fc 01       	movw	r30, r24
    356e:	80 81       	ld	r24, Z
    3570:	98 2f       	mov	r25, r24
    3572:	8c 81       	ldd	r24, Y+4	; 0x04
    3574:	80 95       	com	r24
    3576:	89 23       	and	r24, r25
    3578:	28 2f       	mov	r18, r24
    357a:	8d 85       	ldd	r24, Y+13	; 0x0d
    357c:	9e 85       	ldd	r25, Y+14	; 0x0e
    357e:	fc 01       	movw	r30, r24
    3580:	20 83       	st	Z, r18
		*out |= bit;
    3582:	8b 89       	ldd	r24, Y+19	; 0x13
    3584:	9c 89       	ldd	r25, Y+20	; 0x14
    3586:	fc 01       	movw	r30, r24
    3588:	90 81       	ld	r25, Z
    358a:	8c 81       	ldd	r24, Y+4	; 0x04
    358c:	29 2f       	mov	r18, r25
    358e:	28 2b       	or	r18, r24
    3590:	8b 89       	ldd	r24, Y+19	; 0x13
    3592:	9c 89       	ldd	r25, Y+20	; 0x14
    3594:	fc 01       	movw	r30, r24
    3596:	20 83       	st	Z, r18
		SREG = oldSREG;
    3598:	8f e5       	ldi	r24, 0x5F	; 95
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	2e 89       	ldd	r18, Y+22	; 0x16
    359e:	fc 01       	movw	r30, r24
    35a0:	20 83       	st	Z, r18
    35a2:	18 c0       	rjmp	.+48     	; 0x35d4 <pinMode+0x184>
	} else {
		uint8_t oldSREG = SREG;
    35a4:	8f e5       	ldi	r24, 0x5F	; 95
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	fc 01       	movw	r30, r24
    35aa:	80 81       	ld	r24, Z
    35ac:	8f 8b       	std	Y+23, r24	; 0x17
                cli();
    35ae:	f8 94       	cli
		*reg |= bit;
    35b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b4:	fc 01       	movw	r30, r24
    35b6:	90 81       	ld	r25, Z
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	29 2f       	mov	r18, r25
    35bc:	28 2b       	or	r18, r24
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	fc 01       	movw	r30, r24
    35c4:	20 83       	st	Z, r18
		SREG = oldSREG;
    35c6:	8f e5       	ldi	r24, 0x5F	; 95
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	2f 89       	ldd	r18, Y+23	; 0x17
    35cc:	fc 01       	movw	r30, r24
    35ce:	20 83       	st	Z, r18
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <pinMode+0x184>
{
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    35d2:	00 00       	nop
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    35d4:	69 96       	adiw	r28, 0x19	; 25
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	1f 92       	push	r1
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	83 30       	cpi	r24, 0x03	; 3
    35fa:	91 05       	cpc	r25, r1
    35fc:	91 f0       	breq	.+36     	; 0x3622 <turnOffPWM+0x3c>
    35fe:	84 30       	cpi	r24, 0x04	; 4
    3600:	91 05       	cpc	r25, r1
    3602:	34 f4       	brge	.+12     	; 0x3610 <turnOffPWM+0x2a>
    3604:	81 30       	cpi	r24, 0x01	; 1
    3606:	91 05       	cpc	r25, r1
    3608:	01 f1       	breq	.+64     	; 0x364a <turnOffPWM+0x64>
    360a:	02 97       	sbiw	r24, 0x02	; 2
    360c:	41 f1       	breq	.+80     	; 0x365e <turnOffPWM+0x78>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    360e:	45 c0       	rjmp	.+138    	; 0x369a <turnOffPWM+0xb4>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3610:	87 30       	cpi	r24, 0x07	; 7
    3612:	91 05       	cpc	r25, r1
    3614:	71 f1       	breq	.+92     	; 0x3672 <turnOffPWM+0x8c>
    3616:	88 30       	cpi	r24, 0x08	; 8
    3618:	91 05       	cpc	r25, r1
    361a:	a9 f1       	breq	.+106    	; 0x3686 <turnOffPWM+0xa0>
    361c:	04 97       	sbiw	r24, 0x04	; 4
    361e:	59 f0       	breq	.+22     	; 0x3636 <turnOffPWM+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    3620:	3c c0       	rjmp	.+120    	; 0x369a <turnOffPWM+0xb4>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3622:	80 e8       	ldi	r24, 0x80	; 128
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	20 e8       	ldi	r18, 0x80	; 128
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	f9 01       	movw	r30, r18
    362c:	20 81       	ld	r18, Z
    362e:	2f 77       	andi	r18, 0x7F	; 127
    3630:	fc 01       	movw	r30, r24
    3632:	20 83       	st	Z, r18
    3634:	32 c0       	rjmp	.+100    	; 0x369a <turnOffPWM+0xb4>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3636:	80 e8       	ldi	r24, 0x80	; 128
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	20 e8       	ldi	r18, 0x80	; 128
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	f9 01       	movw	r30, r18
    3640:	20 81       	ld	r18, Z
    3642:	2f 7d       	andi	r18, 0xDF	; 223
    3644:	fc 01       	movw	r30, r24
    3646:	20 83       	st	Z, r18
    3648:	28 c0       	rjmp	.+80     	; 0x369a <turnOffPWM+0xb4>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    364a:	84 e4       	ldi	r24, 0x44	; 68
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	24 e4       	ldi	r18, 0x44	; 68
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	f9 01       	movw	r30, r18
    3654:	20 81       	ld	r18, Z
    3656:	2f 77       	andi	r18, 0x7F	; 127
    3658:	fc 01       	movw	r30, r24
    365a:	20 83       	st	Z, r18
    365c:	1e c0       	rjmp	.+60     	; 0x369a <turnOffPWM+0xb4>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    365e:	84 e4       	ldi	r24, 0x44	; 68
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	24 e4       	ldi	r18, 0x44	; 68
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	f9 01       	movw	r30, r18
    3668:	20 81       	ld	r18, Z
    366a:	2f 7d       	andi	r18, 0xDF	; 223
    366c:	fc 01       	movw	r30, r24
    366e:	20 83       	st	Z, r18
    3670:	14 c0       	rjmp	.+40     	; 0x369a <turnOffPWM+0xb4>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3672:	80 eb       	ldi	r24, 0xB0	; 176
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	20 eb       	ldi	r18, 0xB0	; 176
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	f9 01       	movw	r30, r18
    367c:	20 81       	ld	r18, Z
    367e:	2f 77       	andi	r18, 0x7F	; 127
    3680:	fc 01       	movw	r30, r24
    3682:	20 83       	st	Z, r18
    3684:	0a c0       	rjmp	.+20     	; 0x369a <turnOffPWM+0xb4>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3686:	80 eb       	ldi	r24, 0xB0	; 176
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	20 eb       	ldi	r18, 0xB0	; 176
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	f9 01       	movw	r30, r18
    3690:	20 81       	ld	r18, Z
    3692:	2f 7d       	andi	r18, 0xDF	; 223
    3694:	fc 01       	movw	r30, r24
    3696:	20 83       	st	Z, r18
    3698:	00 00       	nop
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    369a:	00 00       	nop
    369c:	0f 90       	pop	r0
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	08 95       	ret

000036a4 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
    36ac:	65 97       	sbiw	r28, 0x15	; 21
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	8c 8b       	std	Y+20, r24	; 0x14
    36ba:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    36bc:	8c 89       	ldd	r24, Y+20	; 0x14
    36be:	88 2f       	mov	r24, r24
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	8c 54       	subi	r24, 0x4C	; 76
    36c4:	9d 4f       	sbci	r25, 0xFD	; 253
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	9a 81       	ldd	r25, Y+2	; 0x02
    36ce:	fc 01       	movw	r30, r24
    36d0:	84 91       	lpm	r24, Z
    36d2:	8b 83       	std	Y+3, r24	; 0x03
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    36d8:	8c 89       	ldd	r24, Y+20	; 0x14
    36da:	88 2f       	mov	r24, r24
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	80 56       	subi	r24, 0x60	; 96
    36e0:	9d 4f       	sbci	r25, 0xFD	; 253
    36e2:	9e 83       	std	Y+6, r25	; 0x06
    36e4:	8d 83       	std	Y+5, r24	; 0x05
    36e6:	8d 81       	ldd	r24, Y+5	; 0x05
    36e8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ea:	fc 01       	movw	r30, r24
    36ec:	84 91       	lpm	r24, Z
    36ee:	8f 83       	std	Y+7, r24	; 0x07
    36f0:	8f 81       	ldd	r24, Y+7	; 0x07
    36f2:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    36f4:	8c 89       	ldd	r24, Y+20	; 0x14
    36f6:	88 2f       	mov	r24, r24
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	84 57       	subi	r24, 0x74	; 116
    36fc:	9d 4f       	sbci	r25, 0xFD	; 253
    36fe:	9a 87       	std	Y+10, r25	; 0x0a
    3700:	89 87       	std	Y+9, r24	; 0x09
    3702:	89 85       	ldd	r24, Y+9	; 0x09
    3704:	9a 85       	ldd	r25, Y+10	; 0x0a
    3706:	fc 01       	movw	r30, r24
    3708:	84 91       	lpm	r24, Z
    370a:	8b 87       	std	Y+11, r24	; 0x0b
    370c:	8b 85       	ldd	r24, Y+11	; 0x0b
    370e:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3710:	8c 85       	ldd	r24, Y+12	; 0x0c
    3712:	88 23       	and	r24, r24
    3714:	09 f4       	brne	.+2      	; 0x3718 <digitalWrite+0x74>
    3716:	45 c0       	rjmp	.+138    	; 0x37a2 <digitalWrite+0xfe>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3718:	8c 81       	ldd	r24, Y+4	; 0x04
    371a:	88 23       	and	r24, r24
    371c:	19 f0       	breq	.+6      	; 0x3724 <digitalWrite+0x80>
    371e:	8c 81       	ldd	r24, Y+4	; 0x04
    3720:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <turnOffPWM>

	out = portOutputRegister(port);
    3724:	8c 85       	ldd	r24, Y+12	; 0x0c
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	88 58       	subi	r24, 0x88	; 136
    3730:	9d 4f       	sbci	r25, 0xFD	; 253
    3732:	9e 87       	std	Y+14, r25	; 0x0e
    3734:	8d 87       	std	Y+13, r24	; 0x0d
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	fc 01       	movw	r30, r24
    373c:	25 91       	lpm	r18, Z+
    373e:	34 91       	lpm	r19, Z
    3740:	cf 01       	movw	r24, r30
    3742:	38 8b       	std	Y+16, r19	; 0x10
    3744:	2f 87       	std	Y+15, r18	; 0x0f
    3746:	9e 87       	std	Y+14, r25	; 0x0e
    3748:	8d 87       	std	Y+13, r24	; 0x0d
    374a:	8f 85       	ldd	r24, Y+15	; 0x0f
    374c:	98 89       	ldd	r25, Y+16	; 0x10
    374e:	9a 8b       	std	Y+18, r25	; 0x12
    3750:	89 8b       	std	Y+17, r24	; 0x11

	uint8_t oldSREG = SREG;
    3752:	8f e5       	ldi	r24, 0x5F	; 95
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	fc 01       	movw	r30, r24
    3758:	80 81       	ld	r24, Z
    375a:	8b 8b       	std	Y+19, r24	; 0x13
	cli();
    375c:	f8 94       	cli

	if (val == LOW) {
    375e:	8d 89       	ldd	r24, Y+21	; 0x15
    3760:	88 23       	and	r24, r24
    3762:	71 f4       	brne	.+28     	; 0x3780 <digitalWrite+0xdc>
		*out &= ~bit;
    3764:	89 89       	ldd	r24, Y+17	; 0x11
    3766:	9a 89       	ldd	r25, Y+18	; 0x12
    3768:	fc 01       	movw	r30, r24
    376a:	80 81       	ld	r24, Z
    376c:	98 2f       	mov	r25, r24
    376e:	88 85       	ldd	r24, Y+8	; 0x08
    3770:	80 95       	com	r24
    3772:	89 23       	and	r24, r25
    3774:	28 2f       	mov	r18, r24
    3776:	89 89       	ldd	r24, Y+17	; 0x11
    3778:	9a 89       	ldd	r25, Y+18	; 0x12
    377a:	fc 01       	movw	r30, r24
    377c:	20 83       	st	Z, r18
    377e:	0b c0       	rjmp	.+22     	; 0x3796 <digitalWrite+0xf2>
	} else {
		*out |= bit;
    3780:	89 89       	ldd	r24, Y+17	; 0x11
    3782:	9a 89       	ldd	r25, Y+18	; 0x12
    3784:	fc 01       	movw	r30, r24
    3786:	90 81       	ld	r25, Z
    3788:	88 85       	ldd	r24, Y+8	; 0x08
    378a:	29 2f       	mov	r18, r25
    378c:	28 2b       	or	r18, r24
    378e:	89 89       	ldd	r24, Y+17	; 0x11
    3790:	9a 89       	ldd	r25, Y+18	; 0x12
    3792:	fc 01       	movw	r30, r24
    3794:	20 83       	st	Z, r18
	}

	SREG = oldSREG;
    3796:	8f e5       	ldi	r24, 0x5F	; 95
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	2b 89       	ldd	r18, Y+19	; 0x13
    379c:	fc 01       	movw	r30, r24
    379e:	20 83       	st	Z, r18
    37a0:	01 c0       	rjmp	.+2      	; 0x37a4 <digitalWrite+0x100>
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    37a2:	00 00       	nop
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
    37a4:	65 96       	adiw	r28, 0x15	; 21
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	08 95       	ret

000037b6 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    37b6:	af 92       	push	r10
    37b8:	bf 92       	push	r11
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	60 97       	sbiw	r28, 0x10	; 16
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	69 83       	std	Y+1, r22	; 0x01
    37dc:	7a 83       	std	Y+2, r23	; 0x02
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	9c 83       	std	Y+4, r25	; 0x04
    37e2:	2d 83       	std	Y+5, r18	; 0x05
    37e4:	3e 83       	std	Y+6, r19	; 0x06
    37e6:	4f 83       	std	Y+7, r20	; 0x07
    37e8:	58 87       	std	Y+8, r21	; 0x08
    37ea:	e9 86       	std	Y+9, r14	; 0x09
    37ec:	fa 86       	std	Y+10, r15	; 0x0a
    37ee:	0b 87       	std	Y+11, r16	; 0x0b
    37f0:	1c 87       	std	Y+12, r17	; 0x0c
    37f2:	ad 86       	std	Y+13, r10	; 0x0d
    37f4:	be 86       	std	Y+14, r11	; 0x0e
    37f6:	cf 86       	std	Y+15, r12	; 0x0f
    37f8:	d8 8a       	std	Y+16, r13	; 0x10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    37fa:	29 81       	ldd	r18, Y+1	; 0x01
    37fc:	3a 81       	ldd	r19, Y+2	; 0x02
    37fe:	4b 81       	ldd	r20, Y+3	; 0x03
    3800:	5c 81       	ldd	r21, Y+4	; 0x04
    3802:	8d 81       	ldd	r24, Y+5	; 0x05
    3804:	9e 81       	ldd	r25, Y+6	; 0x06
    3806:	af 81       	ldd	r26, Y+7	; 0x07
    3808:	b8 85       	ldd	r27, Y+8	; 0x08
    380a:	79 01       	movw	r14, r18
    380c:	8a 01       	movw	r16, r20
    380e:	e8 1a       	sub	r14, r24
    3810:	f9 0a       	sbc	r15, r25
    3812:	0a 0b       	sbc	r16, r26
    3814:	1b 0b       	sbc	r17, r27
    3816:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3818:	3e 8d       	ldd	r19, Y+30	; 0x1e
    381a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    381c:	58 a1       	ldd	r21, Y+32	; 0x20
    381e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3820:	9e 85       	ldd	r25, Y+14	; 0x0e
    3822:	af 85       	ldd	r26, Y+15	; 0x0f
    3824:	b8 89       	ldd	r27, Y+16	; 0x10
    3826:	59 01       	movw	r10, r18
    3828:	6a 01       	movw	r12, r20
    382a:	a8 1a       	sub	r10, r24
    382c:	b9 0a       	sbc	r11, r25
    382e:	ca 0a       	sbc	r12, r26
    3830:	db 0a       	sbc	r13, r27
    3832:	d6 01       	movw	r26, r12
    3834:	c5 01       	movw	r24, r10
    3836:	a8 01       	movw	r20, r16
    3838:	97 01       	movw	r18, r14
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 de 39 	call	0x73bc	; 0x73bc <__mulsi3>
    3842:	7b 01       	movw	r14, r22
    3844:	8c 01       	movw	r16, r24
    3846:	29 85       	ldd	r18, Y+9	; 0x09
    3848:	3a 85       	ldd	r19, Y+10	; 0x0a
    384a:	4b 85       	ldd	r20, Y+11	; 0x0b
    384c:	5c 85       	ldd	r21, Y+12	; 0x0c
    384e:	8d 81       	ldd	r24, Y+5	; 0x05
    3850:	9e 81       	ldd	r25, Y+6	; 0x06
    3852:	af 81       	ldd	r26, Y+7	; 0x07
    3854:	b8 85       	ldd	r27, Y+8	; 0x08
    3856:	28 1b       	sub	r18, r24
    3858:	39 0b       	sbc	r19, r25
    385a:	4a 0b       	sbc	r20, r26
    385c:	5b 0b       	sbc	r21, r27
    385e:	c8 01       	movw	r24, r16
    3860:	b7 01       	movw	r22, r14
    3862:	0e 94 10 3a 	call	0x7420	; 0x7420 <__divmodsi4>
    3866:	da 01       	movw	r26, r20
    3868:	c9 01       	movw	r24, r18
    386a:	9c 01       	movw	r18, r24
    386c:	ad 01       	movw	r20, r26
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	af 85       	ldd	r26, Y+15	; 0x0f
    3874:	b8 89       	ldd	r27, Y+16	; 0x10
    3876:	82 0f       	add	r24, r18
    3878:	93 1f       	adc	r25, r19
    387a:	a4 1f       	adc	r26, r20
    387c:	b5 1f       	adc	r27, r21
}
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	60 96       	adiw	r28, 0x10	; 16
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	df 90       	pop	r13
    389c:	cf 90       	pop	r12
    389e:	bf 90       	pop	r11
    38a0:	af 90       	pop	r10
    38a2:	08 95       	ret

000038a4 <_ZN12Adafruit_GFXC1Eii>:
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h  = maxy - miny + 1;
    }
}
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <_ZN12Adafruit_GFXC1Eii+0x6>
    38aa:	00 d0       	rcall	.+0      	; 0x38ac <_ZN12Adafruit_GFXC1Eii+0x8>
    38ac:	00 d0       	rcall	.+0      	; 0x38ae <_ZN12Adafruit_GFXC1Eii+0xa>
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	9a 83       	std	Y+2, r25	; 0x02
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	7c 83       	std	Y+4, r23	; 0x04
    38b8:	6b 83       	std	Y+3, r22	; 0x03
    38ba:	5e 83       	std	Y+6, r21	; 0x06
    38bc:	4d 83       	std	Y+5, r20	; 0x05
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	9a 81       	ldd	r25, Y+2	; 0x02
    38c2:	0e 94 82 12 	call	0x2504	; 0x2504 <_ZN5PrintC1Ev>
    38c6:	28 e9       	ldi	r18, 0x98	; 152
    38c8:	33 e0       	ldi	r19, 0x03	; 3
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	9a 81       	ldd	r25, Y+2	; 0x02
    38ce:	fc 01       	movw	r30, r24
    38d0:	31 83       	std	Z+1, r19	; 0x01
    38d2:	20 83       	st	Z, r18
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	2b 81       	ldd	r18, Y+3	; 0x03
    38da:	3c 81       	ldd	r19, Y+4	; 0x04
    38dc:	fc 01       	movw	r30, r24
    38de:	35 83       	std	Z+5, r19	; 0x05
    38e0:	24 83       	std	Z+4, r18	; 0x04
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	9a 81       	ldd	r25, Y+2	; 0x02
    38e6:	2d 81       	ldd	r18, Y+5	; 0x05
    38e8:	3e 81       	ldd	r19, Y+6	; 0x06
    38ea:	fc 01       	movw	r30, r24
    38ec:	37 83       	std	Z+7, r19	; 0x07
    38ee:	26 83       	std	Z+6, r18	; 0x06
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	fc 01       	movw	r30, r24
    38f6:	24 81       	ldd	r18, Z+4	; 0x04
    38f8:	35 81       	ldd	r19, Z+5	; 0x05
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	9a 81       	ldd	r25, Y+2	; 0x02
    38fe:	fc 01       	movw	r30, r24
    3900:	31 87       	std	Z+9, r19	; 0x09
    3902:	20 87       	std	Z+8, r18	; 0x08
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	9a 81       	ldd	r25, Y+2	; 0x02
    3908:	fc 01       	movw	r30, r24
    390a:	26 81       	ldd	r18, Z+6	; 0x06
    390c:	37 81       	ldd	r19, Z+7	; 0x07
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	9a 81       	ldd	r25, Y+2	; 0x02
    3912:	fc 01       	movw	r30, r24
    3914:	33 87       	std	Z+11, r19	; 0x0b
    3916:	22 87       	std	Z+10, r18	; 0x0a
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	fc 01       	movw	r30, r24
    391e:	15 8a       	std	Z+21, r1	; 0x15
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	9a 81       	ldd	r25, Y+2	; 0x02
    3924:	fc 01       	movw	r30, r24
    3926:	15 86       	std	Z+13, r1	; 0x0d
    3928:	14 86       	std	Z+12, r1	; 0x0c
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	9a 81       	ldd	r25, Y+2	; 0x02
    392e:	fc 01       	movw	r30, r24
    3930:	24 85       	ldd	r18, Z+12	; 0x0c
    3932:	35 85       	ldd	r19, Z+13	; 0x0d
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	fc 01       	movw	r30, r24
    393a:	37 87       	std	Z+15, r19	; 0x0f
    393c:	26 87       	std	Z+14, r18	; 0x0e
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	21 e0       	ldi	r18, 0x01	; 1
    3944:	fc 01       	movw	r30, r24
    3946:	24 8b       	std	Z+20, r18	; 0x14
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	9a 81       	ldd	r25, Y+2	; 0x02
    394c:	2f ef       	ldi	r18, 0xFF	; 255
    394e:	3f ef       	ldi	r19, 0xFF	; 255
    3950:	fc 01       	movw	r30, r24
    3952:	33 8b       	std	Z+19, r19	; 0x13
    3954:	22 8b       	std	Z+18, r18	; 0x12
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	fc 01       	movw	r30, r24
    395c:	22 89       	ldd	r18, Z+18	; 0x12
    395e:	33 89       	ldd	r19, Z+19	; 0x13
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
    3964:	fc 01       	movw	r30, r24
    3966:	31 8b       	std	Z+17, r19	; 0x11
    3968:	20 8b       	std	Z+16, r18	; 0x10
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	21 e0       	ldi	r18, 0x01	; 1
    3970:	fc 01       	movw	r30, r24
    3972:	26 8b       	std	Z+22, r18	; 0x16
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	9a 81       	ldd	r25, Y+2	; 0x02
    3978:	fc 01       	movw	r30, r24
    397a:	17 8a       	std	Z+23, r1	; 0x17
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	fc 01       	movw	r30, r24
    3982:	11 8e       	std	Z+25, r1	; 0x19
    3984:	10 8e       	std	Z+24, r1	; 0x18
    3986:	00 00       	nop
    3988:	26 96       	adiw	r28, 0x06	; 6
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	08 95       	ret

0000399a <_ZN12Adafruit_GFX9writeLineEiiiij>:
    399a:	ef 92       	push	r14
    399c:	ff 92       	push	r15
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	6e 97       	sbiw	r28, 0x1e	; 30
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	9c 8b       	std	Y+20, r25	; 0x14
    39b8:	8b 8b       	std	Y+19, r24	; 0x13
    39ba:	7e 8b       	std	Y+22, r23	; 0x16
    39bc:	6d 8b       	std	Y+21, r22	; 0x15
    39be:	58 8f       	std	Y+24, r21	; 0x18
    39c0:	4f 8b       	std	Y+23, r20	; 0x17
    39c2:	3a 8f       	std	Y+26, r19	; 0x1a
    39c4:	29 8f       	std	Y+25, r18	; 0x19
    39c6:	1c 8f       	std	Y+28, r17	; 0x1c
    39c8:	0b 8f       	std	Y+27, r16	; 0x1b
    39ca:	fe 8e       	std	Y+30, r15	; 0x1e
    39cc:	ed 8e       	std	Y+29, r14	; 0x1d
    39ce:	2b 8d       	ldd	r18, Y+27	; 0x1b
    39d0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    39d2:	8f 89       	ldd	r24, Y+23	; 0x17
    39d4:	98 8d       	ldd	r25, Y+24	; 0x18
    39d6:	a9 01       	movw	r20, r18
    39d8:	48 1b       	sub	r20, r24
    39da:	59 0b       	sbc	r21, r25
    39dc:	ca 01       	movw	r24, r20
    39de:	99 23       	and	r25, r25
    39e0:	1c f4       	brge	.+6      	; 0x39e8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    39e2:	91 95       	neg	r25
    39e4:	81 95       	neg	r24
    39e6:	91 09       	sbc	r25, r1
    39e8:	ac 01       	movw	r20, r24
    39ea:	29 8d       	ldd	r18, Y+25	; 0x19
    39ec:	3a 8d       	ldd	r19, Y+26	; 0x1a
    39ee:	8d 89       	ldd	r24, Y+21	; 0x15
    39f0:	9e 89       	ldd	r25, Y+22	; 0x16
    39f2:	b9 01       	movw	r22, r18
    39f4:	68 1b       	sub	r22, r24
    39f6:	79 0b       	sbc	r23, r25
    39f8:	cb 01       	movw	r24, r22
    39fa:	99 23       	and	r25, r25
    39fc:	1c f4       	brge	.+6      	; 0x3a04 <_ZN12Adafruit_GFX9writeLineEiiiij+0x6a>
    39fe:	91 95       	neg	r25
    3a00:	81 95       	neg	r24
    3a02:	91 09       	sbc	r25, r1
    3a04:	21 e0       	ldi	r18, 0x01	; 1
    3a06:	84 17       	cp	r24, r20
    3a08:	95 07       	cpc	r25, r21
    3a0a:	0c f0       	brlt	.+2      	; 0x3a0e <_ZN12Adafruit_GFX9writeLineEiiiij+0x74>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	82 2f       	mov	r24, r18
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	8d 81       	ldd	r24, Y+5	; 0x05
    3a18:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1a:	89 2b       	or	r24, r25
    3a1c:	c1 f0       	breq	.+48     	; 0x3a4e <_ZN12Adafruit_GFX9writeLineEiiiij+0xb4>
    3a1e:	8d 89       	ldd	r24, Y+21	; 0x15
    3a20:	9e 89       	ldd	r25, Y+22	; 0x16
    3a22:	98 87       	std	Y+8, r25	; 0x08
    3a24:	8f 83       	std	Y+7, r24	; 0x07
    3a26:	8f 89       	ldd	r24, Y+23	; 0x17
    3a28:	98 8d       	ldd	r25, Y+24	; 0x18
    3a2a:	9e 8b       	std	Y+22, r25	; 0x16
    3a2c:	8d 8b       	std	Y+21, r24	; 0x15
    3a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a30:	98 85       	ldd	r25, Y+8	; 0x08
    3a32:	98 8f       	std	Y+24, r25	; 0x18
    3a34:	8f 8b       	std	Y+23, r24	; 0x17
    3a36:	89 8d       	ldd	r24, Y+25	; 0x19
    3a38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a3a:	9a 87       	std	Y+10, r25	; 0x0a
    3a3c:	89 87       	std	Y+9, r24	; 0x09
    3a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a42:	9a 8f       	std	Y+26, r25	; 0x1a
    3a44:	89 8f       	std	Y+25, r24	; 0x19
    3a46:	89 85       	ldd	r24, Y+9	; 0x09
    3a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4a:	9c 8f       	std	Y+28, r25	; 0x1c
    3a4c:	8b 8f       	std	Y+27, r24	; 0x1b
    3a4e:	2d 89       	ldd	r18, Y+21	; 0x15
    3a50:	3e 89       	ldd	r19, Y+22	; 0x16
    3a52:	89 8d       	ldd	r24, Y+25	; 0x19
    3a54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a56:	82 17       	cp	r24, r18
    3a58:	93 07       	cpc	r25, r19
    3a5a:	c4 f4       	brge	.+48     	; 0x3a8c <_ZN12Adafruit_GFX9writeLineEiiiij+0xf2>
    3a5c:	8d 89       	ldd	r24, Y+21	; 0x15
    3a5e:	9e 89       	ldd	r25, Y+22	; 0x16
    3a60:	9c 87       	std	Y+12, r25	; 0x0c
    3a62:	8b 87       	std	Y+11, r24	; 0x0b
    3a64:	89 8d       	ldd	r24, Y+25	; 0x19
    3a66:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a68:	9e 8b       	std	Y+22, r25	; 0x16
    3a6a:	8d 8b       	std	Y+21, r24	; 0x15
    3a6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a70:	9a 8f       	std	Y+26, r25	; 0x1a
    3a72:	89 8f       	std	Y+25, r24	; 0x19
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	9e 87       	std	Y+14, r25	; 0x0e
    3a7a:	8d 87       	std	Y+13, r24	; 0x0d
    3a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a80:	98 8f       	std	Y+24, r25	; 0x18
    3a82:	8f 8b       	std	Y+23, r24	; 0x17
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	9c 8f       	std	Y+28, r25	; 0x1c
    3a8a:	8b 8f       	std	Y+27, r24	; 0x1b
    3a8c:	29 8d       	ldd	r18, Y+25	; 0x19
    3a8e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3a90:	8d 89       	ldd	r24, Y+21	; 0x15
    3a92:	9e 89       	ldd	r25, Y+22	; 0x16
    3a94:	d9 01       	movw	r26, r18
    3a96:	a8 1b       	sub	r26, r24
    3a98:	b9 0b       	sbc	r27, r25
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	98 8b       	std	Y+16, r25	; 0x10
    3a9e:	8f 87       	std	Y+15, r24	; 0x0f
    3aa0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3aa2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa8:	f9 01       	movw	r30, r18
    3aaa:	e8 1b       	sub	r30, r24
    3aac:	f9 0b       	sbc	r31, r25
    3aae:	cf 01       	movw	r24, r30
    3ab0:	99 23       	and	r25, r25
    3ab2:	1c f4       	brge	.+6      	; 0x3aba <_ZN12Adafruit_GFX9writeLineEiiiij+0x120>
    3ab4:	91 95       	neg	r25
    3ab6:	81 95       	neg	r24
    3ab8:	91 09       	sbc	r25, r1
    3aba:	9a 8b       	std	Y+18, r25	; 0x12
    3abc:	89 8b       	std	Y+17, r24	; 0x11
    3abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac0:	98 89       	ldd	r25, Y+16	; 0x10
    3ac2:	99 23       	and	r25, r25
    3ac4:	0c f4       	brge	.+2      	; 0x3ac8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x12e>
    3ac6:	01 96       	adiw	r24, 0x01	; 1
    3ac8:	95 95       	asr	r25
    3aca:	87 95       	ror	r24
    3acc:	9a 83       	std	Y+2, r25	; 0x02
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	2f 89       	ldd	r18, Y+23	; 0x17
    3ad2:	38 8d       	ldd	r19, Y+24	; 0x18
    3ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad8:	28 17       	cp	r18, r24
    3ada:	39 07       	cpc	r19, r25
    3adc:	2c f4       	brge	.+10     	; 0x3ae8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x14e>
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	9c 83       	std	Y+4, r25	; 0x04
    3ae4:	8b 83       	std	Y+3, r24	; 0x03
    3ae6:	04 c0       	rjmp	.+8      	; 0x3af0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    3ae8:	8f ef       	ldi	r24, 0xFF	; 255
    3aea:	9f ef       	ldi	r25, 0xFF	; 255
    3aec:	9c 83       	std	Y+4, r25	; 0x04
    3aee:	8b 83       	std	Y+3, r24	; 0x03
    3af0:	2d 89       	ldd	r18, Y+21	; 0x15
    3af2:	3e 89       	ldd	r19, Y+22	; 0x16
    3af4:	89 8d       	ldd	r24, Y+25	; 0x19
    3af6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3af8:	82 17       	cp	r24, r18
    3afa:	93 07       	cpc	r25, r19
    3afc:	0c f4       	brge	.+2      	; 0x3b00 <_ZN12Adafruit_GFX9writeLineEiiiij+0x166>
    3afe:	4d c0       	rjmp	.+154    	; 0x3b9a <_ZN12Adafruit_GFX9writeLineEiiiij+0x200>
    3b00:	8d 81       	ldd	r24, Y+5	; 0x05
    3b02:	9e 81       	ldd	r25, Y+6	; 0x06
    3b04:	89 2b       	or	r24, r25
    3b06:	99 f0       	breq	.+38     	; 0x3b2e <_ZN12Adafruit_GFX9writeLineEiiiij+0x194>
    3b08:	8b 89       	ldd	r24, Y+19	; 0x13
    3b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	8d 91       	ld	r24, X+
    3b10:	9c 91       	ld	r25, X
    3b12:	0c 96       	adiw	r24, 0x0c	; 12
    3b14:	dc 01       	movw	r26, r24
    3b16:	ed 91       	ld	r30, X+
    3b18:	fc 91       	ld	r31, X
    3b1a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3b1c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3b1e:	4d 89       	ldd	r20, Y+21	; 0x15
    3b20:	5e 89       	ldd	r21, Y+22	; 0x16
    3b22:	6f 89       	ldd	r22, Y+23	; 0x17
    3b24:	78 8d       	ldd	r23, Y+24	; 0x18
    3b26:	8b 89       	ldd	r24, Y+19	; 0x13
    3b28:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2a:	09 95       	icall
    3b2c:	12 c0       	rjmp	.+36     	; 0x3b52 <_ZN12Adafruit_GFX9writeLineEiiiij+0x1b8>
    3b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b30:	9c 89       	ldd	r25, Y+20	; 0x14
    3b32:	fc 01       	movw	r30, r24
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	0c 96       	adiw	r24, 0x0c	; 12
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	ed 91       	ld	r30, X+
    3b3e:	fc 91       	ld	r31, X
    3b40:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3b42:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3b44:	4f 89       	ldd	r20, Y+23	; 0x17
    3b46:	58 8d       	ldd	r21, Y+24	; 0x18
    3b48:	6d 89       	ldd	r22, Y+21	; 0x15
    3b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b50:	09 95       	icall
    3b52:	29 81       	ldd	r18, Y+1	; 0x01
    3b54:	3a 81       	ldd	r19, Y+2	; 0x02
    3b56:	89 89       	ldd	r24, Y+17	; 0x11
    3b58:	9a 89       	ldd	r25, Y+18	; 0x12
    3b5a:	f9 01       	movw	r30, r18
    3b5c:	e8 1b       	sub	r30, r24
    3b5e:	f9 0b       	sbc	r31, r25
    3b60:	cf 01       	movw	r24, r30
    3b62:	9a 83       	std	Y+2, r25	; 0x02
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6a:	99 23       	and	r25, r25
    3b6c:	84 f4       	brge	.+32     	; 0x3b8e <_ZN12Adafruit_GFX9writeLineEiiiij+0x1f4>
    3b6e:	2f 89       	ldd	r18, Y+23	; 0x17
    3b70:	38 8d       	ldd	r19, Y+24	; 0x18
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	82 0f       	add	r24, r18
    3b78:	93 1f       	adc	r25, r19
    3b7a:	98 8f       	std	Y+24, r25	; 0x18
    3b7c:	8f 8b       	std	Y+23, r24	; 0x17
    3b7e:	29 81       	ldd	r18, Y+1	; 0x01
    3b80:	3a 81       	ldd	r19, Y+2	; 0x02
    3b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b84:	98 89       	ldd	r25, Y+16	; 0x10
    3b86:	82 0f       	add	r24, r18
    3b88:	93 1f       	adc	r25, r19
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	89 83       	std	Y+1, r24	; 0x01
    3b8e:	8d 89       	ldd	r24, Y+21	; 0x15
    3b90:	9e 89       	ldd	r25, Y+22	; 0x16
    3b92:	01 96       	adiw	r24, 0x01	; 1
    3b94:	9e 8b       	std	Y+22, r25	; 0x16
    3b96:	8d 8b       	std	Y+21, r24	; 0x15
    3b98:	ab cf       	rjmp	.-170    	; 0x3af0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    3b9a:	00 00       	nop
    3b9c:	6e 96       	adiw	r28, 0x1e	; 30
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	08 95       	ret

00003bb6 <_ZN12Adafruit_GFX10startWriteEv>:
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	00 d0       	rcall	.+0      	; 0x3bbc <_ZN12Adafruit_GFX10startWriteEv+0x6>
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	00 00       	nop
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	08 95       	ret

00003bd0 <_ZN12Adafruit_GFX10writePixelEiij>:
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	28 97       	sbiw	r28, 0x08	; 8
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	9a 83       	std	Y+2, r25	; 0x02
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	7c 83       	std	Y+4, r23	; 0x04
    3bea:	6b 83       	std	Y+3, r22	; 0x03
    3bec:	5e 83       	std	Y+6, r21	; 0x06
    3bee:	4d 83       	std	Y+5, r20	; 0x05
    3bf0:	38 87       	std	Y+8, r19	; 0x08
    3bf2:	2f 83       	std	Y+7, r18	; 0x07
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	8d 91       	ld	r24, X+
    3bfc:	9c 91       	ld	r25, X
    3bfe:	08 96       	adiw	r24, 0x08	; 8
    3c00:	dc 01       	movw	r26, r24
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	2f 81       	ldd	r18, Y+7	; 0x07
    3c08:	38 85       	ldd	r19, Y+8	; 0x08
    3c0a:	4d 81       	ldd	r20, Y+5	; 0x05
    3c0c:	5e 81       	ldd	r21, Y+6	; 0x06
    3c0e:	6b 81       	ldd	r22, Y+3	; 0x03
    3c10:	7c 81       	ldd	r23, Y+4	; 0x04
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	09 95       	icall
    3c18:	00 00       	nop
    3c1a:	28 96       	adiw	r28, 0x08	; 8
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	08 95       	ret

00003c2c <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    3c2c:	0f 93       	push	r16
    3c2e:	1f 93       	push	r17
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	cd b7       	in	r28, 0x3d	; 61
    3c36:	de b7       	in	r29, 0x3e	; 62
    3c38:	2a 97       	sbiw	r28, 0x0a	; 10
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	7c 83       	std	Y+4, r23	; 0x04
    3c4a:	6b 83       	std	Y+3, r22	; 0x03
    3c4c:	5e 83       	std	Y+6, r21	; 0x06
    3c4e:	4d 83       	std	Y+5, r20	; 0x05
    3c50:	38 87       	std	Y+8, r19	; 0x08
    3c52:	2f 83       	std	Y+7, r18	; 0x07
    3c54:	1a 87       	std	Y+10, r17	; 0x0a
    3c56:	09 87       	std	Y+9, r16	; 0x09
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	8d 91       	ld	r24, X+
    3c60:	9c 91       	ld	r25, X
    3c62:	4c 96       	adiw	r24, 0x1c	; 28
    3c64:	dc 01       	movw	r26, r24
    3c66:	ed 91       	ld	r30, X+
    3c68:	fc 91       	ld	r31, X
    3c6a:	a9 85       	ldd	r26, Y+9	; 0x09
    3c6c:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c6e:	2f 81       	ldd	r18, Y+7	; 0x07
    3c70:	38 85       	ldd	r19, Y+8	; 0x08
    3c72:	4d 81       	ldd	r20, Y+5	; 0x05
    3c74:	5e 81       	ldd	r21, Y+6	; 0x06
    3c76:	6b 81       	ldd	r22, Y+3	; 0x03
    3c78:	7c 81       	ldd	r23, Y+4	; 0x04
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7e:	8d 01       	movw	r16, r26
    3c80:	09 95       	icall
    3c82:	00 00       	nop
    3c84:	2a 96       	adiw	r28, 0x0a	; 10
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	08 95       	ret

00003c9a <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	2a 97       	sbiw	r28, 0x0a	; 10
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
    3cb2:	9a 83       	std	Y+2, r25	; 0x02
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	7c 83       	std	Y+4, r23	; 0x04
    3cb8:	6b 83       	std	Y+3, r22	; 0x03
    3cba:	5e 83       	std	Y+6, r21	; 0x06
    3cbc:	4d 83       	std	Y+5, r20	; 0x05
    3cbe:	38 87       	std	Y+8, r19	; 0x08
    3cc0:	2f 83       	std	Y+7, r18	; 0x07
    3cc2:	1a 87       	std	Y+10, r17	; 0x0a
    3cc4:	09 87       	std	Y+9, r16	; 0x09
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cca:	dc 01       	movw	r26, r24
    3ccc:	8d 91       	ld	r24, X+
    3cce:	9c 91       	ld	r25, X
    3cd0:	4e 96       	adiw	r24, 0x1e	; 30
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	ed 91       	ld	r30, X+
    3cd6:	fc 91       	ld	r31, X
    3cd8:	a9 85       	ldd	r26, Y+9	; 0x09
    3cda:	ba 85       	ldd	r27, Y+10	; 0x0a
    3cdc:	2f 81       	ldd	r18, Y+7	; 0x07
    3cde:	38 85       	ldd	r19, Y+8	; 0x08
    3ce0:	4d 81       	ldd	r20, Y+5	; 0x05
    3ce2:	5e 81       	ldd	r21, Y+6	; 0x06
    3ce4:	6b 81       	ldd	r22, Y+3	; 0x03
    3ce6:	7c 81       	ldd	r23, Y+4	; 0x04
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
    3cec:	8d 01       	movw	r16, r26
    3cee:	09 95       	icall
    3cf0:	00 00       	nop
    3cf2:	2a 96       	adiw	r28, 0x0a	; 10
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	1f 91       	pop	r17
    3d04:	0f 91       	pop	r16
    3d06:	08 95       	ret

00003d08 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    3d08:	ef 92       	push	r14
    3d0a:	ff 92       	push	r15
    3d0c:	0f 93       	push	r16
    3d0e:	1f 93       	push	r17
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	2c 97       	sbiw	r28, 0x0c	; 12
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	9a 83       	std	Y+2, r25	; 0x02
    3d26:	89 83       	std	Y+1, r24	; 0x01
    3d28:	7c 83       	std	Y+4, r23	; 0x04
    3d2a:	6b 83       	std	Y+3, r22	; 0x03
    3d2c:	5e 83       	std	Y+6, r21	; 0x06
    3d2e:	4d 83       	std	Y+5, r20	; 0x05
    3d30:	38 87       	std	Y+8, r19	; 0x08
    3d32:	2f 83       	std	Y+7, r18	; 0x07
    3d34:	1a 87       	std	Y+10, r17	; 0x0a
    3d36:	09 87       	std	Y+9, r16	; 0x09
    3d38:	fc 86       	std	Y+12, r15	; 0x0c
    3d3a:	eb 86       	std	Y+11, r14	; 0x0b
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	dc 01       	movw	r26, r24
    3d42:	8d 91       	ld	r24, X+
    3d44:	9c 91       	ld	r25, X
    3d46:	80 96       	adiw	r24, 0x20	; 32
    3d48:	dc 01       	movw	r26, r24
    3d4a:	ed 91       	ld	r30, X+
    3d4c:	fc 91       	ld	r31, X
    3d4e:	0b 85       	ldd	r16, Y+11	; 0x0b
    3d50:	1c 85       	ldd	r17, Y+12	; 0x0c
    3d52:	a9 85       	ldd	r26, Y+9	; 0x09
    3d54:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d56:	2f 81       	ldd	r18, Y+7	; 0x07
    3d58:	38 85       	ldd	r19, Y+8	; 0x08
    3d5a:	4d 81       	ldd	r20, Y+5	; 0x05
    3d5c:	5e 81       	ldd	r21, Y+6	; 0x06
    3d5e:	6b 81       	ldd	r22, Y+3	; 0x03
    3d60:	7c 81       	ldd	r23, Y+4	; 0x04
    3d62:	89 81       	ldd	r24, Y+1	; 0x01
    3d64:	9a 81       	ldd	r25, Y+2	; 0x02
    3d66:	78 01       	movw	r14, r16
    3d68:	8d 01       	movw	r16, r26
    3d6a:	09 95       	icall
    3d6c:	00 00       	nop
    3d6e:	2c 96       	adiw	r28, 0x0c	; 12
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	f8 94       	cli
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	ff 90       	pop	r15
    3d84:	ef 90       	pop	r14
    3d86:	08 95       	ret

00003d88 <_ZN12Adafruit_GFX8endWriteEv>:
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <_ZN12Adafruit_GFX8endWriteEv+0x6>
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
    3d96:	00 00       	nop
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	08 95       	ret

00003da2 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	2a 97       	sbiw	r28, 0x0a	; 10
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	9a 83       	std	Y+2, r25	; 0x02
    3dc0:	89 83       	std	Y+1, r24	; 0x01
    3dc2:	7c 83       	std	Y+4, r23	; 0x04
    3dc4:	6b 83       	std	Y+3, r22	; 0x03
    3dc6:	5e 83       	std	Y+6, r21	; 0x06
    3dc8:	4d 83       	std	Y+5, r20	; 0x05
    3dca:	38 87       	std	Y+8, r19	; 0x08
    3dcc:	2f 83       	std	Y+7, r18	; 0x07
    3dce:	1a 87       	std	Y+10, r17	; 0x0a
    3dd0:	09 87       	std	Y+9, r16	; 0x09
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	8d 91       	ld	r24, X+
    3dda:	9c 91       	ld	r25, X
    3ddc:	0a 96       	adiw	r24, 0x0a	; 10
    3dde:	fc 01       	movw	r30, r24
    3de0:	20 81       	ld	r18, Z
    3de2:	31 81       	ldd	r19, Z+1	; 0x01
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	f9 01       	movw	r30, r18
    3dea:	09 95       	icall
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	9a 81       	ldd	r25, Y+2	; 0x02
    3df0:	dc 01       	movw	r26, r24
    3df2:	8d 91       	ld	r24, X+
    3df4:	9c 91       	ld	r25, X
    3df6:	44 96       	adiw	r24, 0x14	; 20
    3df8:	dc 01       	movw	r26, r24
    3dfa:	ed 91       	ld	r30, X+
    3dfc:	fc 91       	ld	r31, X
    3dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    3e00:	3e 81       	ldd	r19, Y+6	; 0x06
    3e02:	8f 81       	ldd	r24, Y+7	; 0x07
    3e04:	98 85       	ldd	r25, Y+8	; 0x08
    3e06:	82 0f       	add	r24, r18
    3e08:	93 1f       	adc	r25, r19
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	11 97       	sbiw	r26, 0x01	; 1
    3e0e:	09 85       	ldd	r16, Y+9	; 0x09
    3e10:	1a 85       	ldd	r17, Y+10	; 0x0a
    3e12:	2b 81       	ldd	r18, Y+3	; 0x03
    3e14:	3c 81       	ldd	r19, Y+4	; 0x04
    3e16:	4d 81       	ldd	r20, Y+5	; 0x05
    3e18:	5e 81       	ldd	r21, Y+6	; 0x06
    3e1a:	6b 81       	ldd	r22, Y+3	; 0x03
    3e1c:	7c 81       	ldd	r23, Y+4	; 0x04
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	9a 81       	ldd	r25, Y+2	; 0x02
    3e22:	78 01       	movw	r14, r16
    3e24:	8d 01       	movw	r16, r26
    3e26:	09 95       	icall
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	80 81       	ld	r24, Z
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	46 96       	adiw	r24, 0x16	; 22
    3e34:	dc 01       	movw	r26, r24
    3e36:	2d 91       	ld	r18, X+
    3e38:	3c 91       	ld	r19, X
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3e:	f9 01       	movw	r30, r18
    3e40:	09 95       	icall
    3e42:	00 00       	nop
    3e44:	2a 96       	adiw	r28, 0x0a	; 10
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	1f 91       	pop	r17
    3e56:	0f 91       	pop	r16
    3e58:	ff 90       	pop	r15
    3e5a:	ef 90       	pop	r14
    3e5c:	08 95       	ret

00003e5e <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    3e5e:	ef 92       	push	r14
    3e60:	ff 92       	push	r15
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	2a 97       	sbiw	r28, 0x0a	; 10
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	f8 94       	cli
    3e74:	de bf       	out	0x3e, r29	; 62
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	cd bf       	out	0x3d, r28	; 61
    3e7a:	9a 83       	std	Y+2, r25	; 0x02
    3e7c:	89 83       	std	Y+1, r24	; 0x01
    3e7e:	7c 83       	std	Y+4, r23	; 0x04
    3e80:	6b 83       	std	Y+3, r22	; 0x03
    3e82:	5e 83       	std	Y+6, r21	; 0x06
    3e84:	4d 83       	std	Y+5, r20	; 0x05
    3e86:	38 87       	std	Y+8, r19	; 0x08
    3e88:	2f 83       	std	Y+7, r18	; 0x07
    3e8a:	1a 87       	std	Y+10, r17	; 0x0a
    3e8c:	09 87       	std	Y+9, r16	; 0x09
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	dc 01       	movw	r26, r24
    3e94:	8d 91       	ld	r24, X+
    3e96:	9c 91       	ld	r25, X
    3e98:	0a 96       	adiw	r24, 0x0a	; 10
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	20 81       	ld	r18, Z
    3e9e:	31 81       	ldd	r19, Z+1	; 0x01
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea4:	f9 01       	movw	r30, r18
    3ea6:	09 95       	icall
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3eac:	dc 01       	movw	r26, r24
    3eae:	8d 91       	ld	r24, X+
    3eb0:	9c 91       	ld	r25, X
    3eb2:	44 96       	adiw	r24, 0x14	; 20
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	ed 91       	ld	r30, X+
    3eb8:	fc 91       	ld	r31, X
    3eba:	2b 81       	ldd	r18, Y+3	; 0x03
    3ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    3ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    3ec0:	98 85       	ldd	r25, Y+8	; 0x08
    3ec2:	82 0f       	add	r24, r18
    3ec4:	93 1f       	adc	r25, r19
    3ec6:	9c 01       	movw	r18, r24
    3ec8:	21 50       	subi	r18, 0x01	; 1
    3eca:	31 09       	sbc	r19, r1
    3ecc:	09 85       	ldd	r16, Y+9	; 0x09
    3ece:	1a 85       	ldd	r17, Y+10	; 0x0a
    3ed0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ed2:	be 81       	ldd	r27, Y+6	; 0x06
    3ed4:	4d 81       	ldd	r20, Y+5	; 0x05
    3ed6:	5e 81       	ldd	r21, Y+6	; 0x06
    3ed8:	6b 81       	ldd	r22, Y+3	; 0x03
    3eda:	7c 81       	ldd	r23, Y+4	; 0x04
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee0:	78 01       	movw	r14, r16
    3ee2:	8d 01       	movw	r16, r26
    3ee4:	09 95       	icall
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eea:	fc 01       	movw	r30, r24
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	46 96       	adiw	r24, 0x16	; 22
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	2d 91       	ld	r18, X+
    3ef6:	3c 91       	ld	r19, X
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	f9 01       	movw	r30, r18
    3efe:	09 95       	icall
    3f00:	00 00       	nop
    3f02:	2a 96       	adiw	r28, 0x0a	; 10
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	f8 94       	cli
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	cd bf       	out	0x3d, r28	; 61
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
    3f12:	1f 91       	pop	r17
    3f14:	0f 91       	pop	r16
    3f16:	ff 90       	pop	r15
    3f18:	ef 90       	pop	r14
    3f1a:	08 95       	ret

00003f1c <_ZN12Adafruit_GFX8fillRectEiiiij>:
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	2e 97       	sbiw	r28, 0x0e	; 14
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	9c 83       	std	Y+4, r25	; 0x04
    3f3a:	8b 83       	std	Y+3, r24	; 0x03
    3f3c:	7e 83       	std	Y+6, r23	; 0x06
    3f3e:	6d 83       	std	Y+5, r22	; 0x05
    3f40:	58 87       	std	Y+8, r21	; 0x08
    3f42:	4f 83       	std	Y+7, r20	; 0x07
    3f44:	3a 87       	std	Y+10, r19	; 0x0a
    3f46:	29 87       	std	Y+9, r18	; 0x09
    3f48:	1c 87       	std	Y+12, r17	; 0x0c
    3f4a:	0b 87       	std	Y+11, r16	; 0x0b
    3f4c:	fe 86       	std	Y+14, r15	; 0x0e
    3f4e:	ed 86       	std	Y+13, r14	; 0x0d
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	dc 01       	movw	r26, r24
    3f56:	8d 91       	ld	r24, X+
    3f58:	9c 91       	ld	r25, X
    3f5a:	0a 96       	adiw	r24, 0x0a	; 10
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	20 81       	ld	r18, Z
    3f60:	31 81       	ldd	r19, Z+1	; 0x01
    3f62:	8b 81       	ldd	r24, Y+3	; 0x03
    3f64:	9c 81       	ldd	r25, Y+4	; 0x04
    3f66:	f9 01       	movw	r30, r18
    3f68:	09 95       	icall
    3f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6e:	9a 83       	std	Y+2, r25	; 0x02
    3f70:	89 83       	std	Y+1, r24	; 0x01
    3f72:	2d 81       	ldd	r18, Y+5	; 0x05
    3f74:	3e 81       	ldd	r19, Y+6	; 0x06
    3f76:	89 85       	ldd	r24, Y+9	; 0x09
    3f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7a:	28 0f       	add	r18, r24
    3f7c:	39 1f       	adc	r19, r25
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	9a 81       	ldd	r25, Y+2	; 0x02
    3f82:	82 17       	cp	r24, r18
    3f84:	93 07       	cpc	r25, r19
    3f86:	dc f4       	brge	.+54     	; 0x3fbe <_ZN12Adafruit_GFX8fillRectEiiiij+0xa2>
    3f88:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	8d 91       	ld	r24, X+
    3f90:	9c 91       	ld	r25, X
    3f92:	40 96       	adiw	r24, 0x10	; 16
    3f94:	dc 01       	movw	r26, r24
    3f96:	ed 91       	ld	r30, X+
    3f98:	fc 91       	ld	r31, X
    3f9a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3f9c:	be 85       	ldd	r27, Y+14	; 0x0e
    3f9e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fa0:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fa2:	4f 81       	ldd	r20, Y+7	; 0x07
    3fa4:	58 85       	ldd	r21, Y+8	; 0x08
    3fa6:	69 81       	ldd	r22, Y+1	; 0x01
    3fa8:	7a 81       	ldd	r23, Y+2	; 0x02
    3faa:	8b 81       	ldd	r24, Y+3	; 0x03
    3fac:	9c 81       	ldd	r25, Y+4	; 0x04
    3fae:	8d 01       	movw	r16, r26
    3fb0:	09 95       	icall
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb6:	01 96       	adiw	r24, 0x01	; 1
    3fb8:	9a 83       	std	Y+2, r25	; 0x02
    3fba:	89 83       	std	Y+1, r24	; 0x01
    3fbc:	da cf       	rjmp	.-76     	; 0x3f72 <_ZN12Adafruit_GFX8fillRectEiiiij+0x56>
    3fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	80 81       	ld	r24, Z
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	46 96       	adiw	r24, 0x16	; 22
    3fca:	dc 01       	movw	r26, r24
    3fcc:	2d 91       	ld	r18, X+
    3fce:	3c 91       	ld	r19, X
    3fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	09 95       	icall
    3fd8:	00 00       	nop
    3fda:	2e 96       	adiw	r28, 0x0e	; 14
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	df 91       	pop	r29
    3fe8:	cf 91       	pop	r28
    3fea:	1f 91       	pop	r17
    3fec:	0f 91       	pop	r16
    3fee:	ff 90       	pop	r15
    3ff0:	ef 90       	pop	r14
    3ff2:	08 95       	ret

00003ff4 <_ZN12Adafruit_GFX10fillScreenEj>:
    3ff4:	ef 92       	push	r14
    3ff6:	ff 92       	push	r15
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	cf 93       	push	r28
    3ffe:	df 93       	push	r29
    4000:	00 d0       	rcall	.+0      	; 0x4002 <_ZN12Adafruit_GFX10fillScreenEj+0xe>
    4002:	00 d0       	rcall	.+0      	; 0x4004 <_ZN12Adafruit_GFX10fillScreenEj+0x10>
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	9a 83       	std	Y+2, r25	; 0x02
    400a:	89 83       	std	Y+1, r24	; 0x01
    400c:	7c 83       	std	Y+4, r23	; 0x04
    400e:	6b 83       	std	Y+3, r22	; 0x03
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	dc 01       	movw	r26, r24
    4016:	8d 91       	ld	r24, X+
    4018:	9c 91       	ld	r25, X
    401a:	80 96       	adiw	r24, 0x20	; 32
    401c:	dc 01       	movw	r26, r24
    401e:	ed 91       	ld	r30, X+
    4020:	fc 91       	ld	r31, X
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	dc 01       	movw	r26, r24
    4028:	1a 96       	adiw	r26, 0x0a	; 10
    402a:	4d 91       	ld	r20, X+
    402c:	5c 91       	ld	r21, X
    402e:	1b 97       	sbiw	r26, 0x0b	; 11
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	9a 81       	ldd	r25, Y+2	; 0x02
    4034:	dc 01       	movw	r26, r24
    4036:	18 96       	adiw	r26, 0x08	; 8
    4038:	2d 91       	ld	r18, X+
    403a:	3c 91       	ld	r19, X
    403c:	19 97       	sbiw	r26, 0x09	; 9
    403e:	6b 81       	ldd	r22, Y+3	; 0x03
    4040:	7c 81       	ldd	r23, Y+4	; 0x04
    4042:	89 81       	ldd	r24, Y+1	; 0x01
    4044:	9a 81       	ldd	r25, Y+2	; 0x02
    4046:	7b 01       	movw	r14, r22
    4048:	8a 01       	movw	r16, r20
    404a:	40 e0       	ldi	r20, 0x00	; 0
    404c:	50 e0       	ldi	r21, 0x00	; 0
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	70 e0       	ldi	r23, 0x00	; 0
    4052:	09 95       	icall
    4054:	00 00       	nop
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	1f 91       	pop	r17
    4064:	0f 91       	pop	r16
    4066:	ff 90       	pop	r15
    4068:	ef 90       	pop	r14
    406a:	08 95       	ret

0000406c <_ZN12Adafruit_GFX8drawLineEiiiij>:
    406c:	ef 92       	push	r14
    406e:	ff 92       	push	r15
    4070:	0f 93       	push	r16
    4072:	1f 93       	push	r17
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	cd b7       	in	r28, 0x3d	; 61
    407a:	de b7       	in	r29, 0x3e	; 62
    407c:	60 97       	sbiw	r28, 0x10	; 16
    407e:	0f b6       	in	r0, 0x3f	; 63
    4080:	f8 94       	cli
    4082:	de bf       	out	0x3e, r29	; 62
    4084:	0f be       	out	0x3f, r0	; 63
    4086:	cd bf       	out	0x3d, r28	; 61
    4088:	9e 83       	std	Y+6, r25	; 0x06
    408a:	8d 83       	std	Y+5, r24	; 0x05
    408c:	78 87       	std	Y+8, r23	; 0x08
    408e:	6f 83       	std	Y+7, r22	; 0x07
    4090:	5a 87       	std	Y+10, r21	; 0x0a
    4092:	49 87       	std	Y+9, r20	; 0x09
    4094:	3c 87       	std	Y+12, r19	; 0x0c
    4096:	2b 87       	std	Y+11, r18	; 0x0b
    4098:	1e 87       	std	Y+14, r17	; 0x0e
    409a:	0d 87       	std	Y+13, r16	; 0x0d
    409c:	f8 8a       	std	Y+16, r15	; 0x10
    409e:	ef 86       	std	Y+15, r14	; 0x0f
    40a0:	2f 81       	ldd	r18, Y+7	; 0x07
    40a2:	38 85       	ldd	r19, Y+8	; 0x08
    40a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    40a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    40a8:	28 17       	cp	r18, r24
    40aa:	39 07       	cpc	r19, r25
    40ac:	91 f5       	brne	.+100    	; 0x4112 <_ZN12Adafruit_GFX8drawLineEiiiij+0xa6>
    40ae:	29 85       	ldd	r18, Y+9	; 0x09
    40b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    40b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40b6:	82 17       	cp	r24, r18
    40b8:	93 07       	cpc	r25, r19
    40ba:	64 f4       	brge	.+24     	; 0x40d4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x68>
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	9a 83       	std	Y+2, r25	; 0x02
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c8:	9a 87       	std	Y+10, r25	; 0x0a
    40ca:	89 87       	std	Y+9, r24	; 0x09
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	9a 81       	ldd	r25, Y+2	; 0x02
    40d0:	9e 87       	std	Y+14, r25	; 0x0e
    40d2:	8d 87       	std	Y+13, r24	; 0x0d
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	9e 81       	ldd	r25, Y+6	; 0x06
    40d8:	dc 01       	movw	r26, r24
    40da:	8d 91       	ld	r24, X+
    40dc:	9c 91       	ld	r25, X
    40de:	4c 96       	adiw	r24, 0x1c	; 28
    40e0:	dc 01       	movw	r26, r24
    40e2:	ed 91       	ld	r30, X+
    40e4:	fc 91       	ld	r31, X
    40e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    40e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    40ea:	89 85       	ldd	r24, Y+9	; 0x09
    40ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ee:	a9 01       	movw	r20, r18
    40f0:	48 1b       	sub	r20, r24
    40f2:	59 0b       	sbc	r21, r25
    40f4:	ca 01       	movw	r24, r20
    40f6:	9c 01       	movw	r18, r24
    40f8:	2f 5f       	subi	r18, 0xFF	; 255
    40fa:	3f 4f       	sbci	r19, 0xFF	; 255
    40fc:	af 85       	ldd	r26, Y+15	; 0x0f
    40fe:	b8 89       	ldd	r27, Y+16	; 0x10
    4100:	49 85       	ldd	r20, Y+9	; 0x09
    4102:	5a 85       	ldd	r21, Y+10	; 0x0a
    4104:	6f 81       	ldd	r22, Y+7	; 0x07
    4106:	78 85       	ldd	r23, Y+8	; 0x08
    4108:	8d 81       	ldd	r24, Y+5	; 0x05
    410a:	9e 81       	ldd	r25, Y+6	; 0x06
    410c:	8d 01       	movw	r16, r26
    410e:	09 95       	icall
    4110:	6b c0       	rjmp	.+214    	; 0x41e8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    4112:	29 85       	ldd	r18, Y+9	; 0x09
    4114:	3a 85       	ldd	r19, Y+10	; 0x0a
    4116:	8d 85       	ldd	r24, Y+13	; 0x0d
    4118:	9e 85       	ldd	r25, Y+14	; 0x0e
    411a:	28 17       	cp	r18, r24
    411c:	39 07       	cpc	r19, r25
    411e:	91 f5       	brne	.+100    	; 0x4184 <_ZN12Adafruit_GFX8drawLineEiiiij+0x118>
    4120:	2f 81       	ldd	r18, Y+7	; 0x07
    4122:	38 85       	ldd	r19, Y+8	; 0x08
    4124:	8b 85       	ldd	r24, Y+11	; 0x0b
    4126:	9c 85       	ldd	r25, Y+12	; 0x0c
    4128:	82 17       	cp	r24, r18
    412a:	93 07       	cpc	r25, r19
    412c:	64 f4       	brge	.+24     	; 0x4146 <_ZN12Adafruit_GFX8drawLineEiiiij+0xda>
    412e:	8f 81       	ldd	r24, Y+7	; 0x07
    4130:	98 85       	ldd	r25, Y+8	; 0x08
    4132:	9c 83       	std	Y+4, r25	; 0x04
    4134:	8b 83       	std	Y+3, r24	; 0x03
    4136:	8b 85       	ldd	r24, Y+11	; 0x0b
    4138:	9c 85       	ldd	r25, Y+12	; 0x0c
    413a:	98 87       	std	Y+8, r25	; 0x08
    413c:	8f 83       	std	Y+7, r24	; 0x07
    413e:	8b 81       	ldd	r24, Y+3	; 0x03
    4140:	9c 81       	ldd	r25, Y+4	; 0x04
    4142:	9c 87       	std	Y+12, r25	; 0x0c
    4144:	8b 87       	std	Y+11, r24	; 0x0b
    4146:	8d 81       	ldd	r24, Y+5	; 0x05
    4148:	9e 81       	ldd	r25, Y+6	; 0x06
    414a:	dc 01       	movw	r26, r24
    414c:	8d 91       	ld	r24, X+
    414e:	9c 91       	ld	r25, X
    4150:	4e 96       	adiw	r24, 0x1e	; 30
    4152:	dc 01       	movw	r26, r24
    4154:	ed 91       	ld	r30, X+
    4156:	fc 91       	ld	r31, X
    4158:	2b 85       	ldd	r18, Y+11	; 0x0b
    415a:	3c 85       	ldd	r19, Y+12	; 0x0c
    415c:	8f 81       	ldd	r24, Y+7	; 0x07
    415e:	98 85       	ldd	r25, Y+8	; 0x08
    4160:	a9 01       	movw	r20, r18
    4162:	48 1b       	sub	r20, r24
    4164:	59 0b       	sbc	r21, r25
    4166:	ca 01       	movw	r24, r20
    4168:	9c 01       	movw	r18, r24
    416a:	2f 5f       	subi	r18, 0xFF	; 255
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	af 85       	ldd	r26, Y+15	; 0x0f
    4170:	b8 89       	ldd	r27, Y+16	; 0x10
    4172:	49 85       	ldd	r20, Y+9	; 0x09
    4174:	5a 85       	ldd	r21, Y+10	; 0x0a
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	8d 81       	ldd	r24, Y+5	; 0x05
    417c:	9e 81       	ldd	r25, Y+6	; 0x06
    417e:	8d 01       	movw	r16, r26
    4180:	09 95       	icall
    4182:	32 c0       	rjmp	.+100    	; 0x41e8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    4184:	8d 81       	ldd	r24, Y+5	; 0x05
    4186:	9e 81       	ldd	r25, Y+6	; 0x06
    4188:	dc 01       	movw	r26, r24
    418a:	8d 91       	ld	r24, X+
    418c:	9c 91       	ld	r25, X
    418e:	0a 96       	adiw	r24, 0x0a	; 10
    4190:	fc 01       	movw	r30, r24
    4192:	20 81       	ld	r18, Z
    4194:	31 81       	ldd	r19, Z+1	; 0x01
    4196:	8d 81       	ldd	r24, Y+5	; 0x05
    4198:	9e 81       	ldd	r25, Y+6	; 0x06
    419a:	f9 01       	movw	r30, r18
    419c:	09 95       	icall
    419e:	8d 81       	ldd	r24, Y+5	; 0x05
    41a0:	9e 81       	ldd	r25, Y+6	; 0x06
    41a2:	dc 01       	movw	r26, r24
    41a4:	8d 91       	ld	r24, X+
    41a6:	9c 91       	ld	r25, X
    41a8:	44 96       	adiw	r24, 0x14	; 20
    41aa:	dc 01       	movw	r26, r24
    41ac:	ed 91       	ld	r30, X+
    41ae:	fc 91       	ld	r31, X
    41b0:	0f 85       	ldd	r16, Y+15	; 0x0f
    41b2:	18 89       	ldd	r17, Y+16	; 0x10
    41b4:	ad 85       	ldd	r26, Y+13	; 0x0d
    41b6:	be 85       	ldd	r27, Y+14	; 0x0e
    41b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    41ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    41bc:	49 85       	ldd	r20, Y+9	; 0x09
    41be:	5a 85       	ldd	r21, Y+10	; 0x0a
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	8d 81       	ldd	r24, Y+5	; 0x05
    41c6:	9e 81       	ldd	r25, Y+6	; 0x06
    41c8:	78 01       	movw	r14, r16
    41ca:	8d 01       	movw	r16, r26
    41cc:	09 95       	icall
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	9e 81       	ldd	r25, Y+6	; 0x06
    41d2:	fc 01       	movw	r30, r24
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	46 96       	adiw	r24, 0x16	; 22
    41da:	dc 01       	movw	r26, r24
    41dc:	2d 91       	ld	r18, X+
    41de:	3c 91       	ld	r19, X
    41e0:	8d 81       	ldd	r24, Y+5	; 0x05
    41e2:	9e 81       	ldd	r25, Y+6	; 0x06
    41e4:	f9 01       	movw	r30, r18
    41e6:	09 95       	icall
    41e8:	00 00       	nop
    41ea:	60 96       	adiw	r28, 0x10	; 16
    41ec:	0f b6       	in	r0, 0x3f	; 63
    41ee:	f8 94       	cli
    41f0:	de bf       	out	0x3e, r29	; 62
    41f2:	0f be       	out	0x3f, r0	; 63
    41f4:	cd bf       	out	0x3d, r28	; 61
    41f6:	df 91       	pop	r29
    41f8:	cf 91       	pop	r28
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	ff 90       	pop	r15
    4200:	ef 90       	pop	r14
    4202:	08 95       	ret

00004204 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	cd b7       	in	r28, 0x3d	; 61
    4212:	de b7       	in	r29, 0x3e	; 62
    4214:	2c 97       	sbiw	r28, 0x0c	; 12
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	9a 83       	std	Y+2, r25	; 0x02
    4222:	89 83       	std	Y+1, r24	; 0x01
    4224:	7c 83       	std	Y+4, r23	; 0x04
    4226:	6b 83       	std	Y+3, r22	; 0x03
    4228:	5e 83       	std	Y+6, r21	; 0x06
    422a:	4d 83       	std	Y+5, r20	; 0x05
    422c:	38 87       	std	Y+8, r19	; 0x08
    422e:	2f 83       	std	Y+7, r18	; 0x07
    4230:	1a 87       	std	Y+10, r17	; 0x0a
    4232:	09 87       	std	Y+9, r16	; 0x09
    4234:	fc 86       	std	Y+12, r15	; 0x0c
    4236:	eb 86       	std	Y+11, r14	; 0x0b
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	dc 01       	movw	r26, r24
    423e:	8d 91       	ld	r24, X+
    4240:	9c 91       	ld	r25, X
    4242:	0a 96       	adiw	r24, 0x0a	; 10
    4244:	fc 01       	movw	r30, r24
    4246:	20 81       	ld	r18, Z
    4248:	31 81       	ldd	r19, Z+1	; 0x01
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	f9 01       	movw	r30, r18
    4250:	09 95       	icall
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
    4256:	dc 01       	movw	r26, r24
    4258:	8d 91       	ld	r24, X+
    425a:	9c 91       	ld	r25, X
    425c:	42 96       	adiw	r24, 0x12	; 18
    425e:	dc 01       	movw	r26, r24
    4260:	ed 91       	ld	r30, X+
    4262:	fc 91       	ld	r31, X
    4264:	ab 85       	ldd	r26, Y+11	; 0x0b
    4266:	bc 85       	ldd	r27, Y+12	; 0x0c
    4268:	2f 81       	ldd	r18, Y+7	; 0x07
    426a:	38 85       	ldd	r19, Y+8	; 0x08
    426c:	4d 81       	ldd	r20, Y+5	; 0x05
    426e:	5e 81       	ldd	r21, Y+6	; 0x06
    4270:	6b 81       	ldd	r22, Y+3	; 0x03
    4272:	7c 81       	ldd	r23, Y+4	; 0x04
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	8d 01       	movw	r16, r26
    427a:	09 95       	icall
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	fc 01       	movw	r30, r24
    4282:	80 81       	ld	r24, Z
    4284:	91 81       	ldd	r25, Z+1	; 0x01
    4286:	42 96       	adiw	r24, 0x12	; 18
    4288:	dc 01       	movw	r26, r24
    428a:	ed 91       	ld	r30, X+
    428c:	fc 91       	ld	r31, X
    428e:	2d 81       	ldd	r18, Y+5	; 0x05
    4290:	3e 81       	ldd	r19, Y+6	; 0x06
    4292:	89 85       	ldd	r24, Y+9	; 0x09
    4294:	9a 85       	ldd	r25, Y+10	; 0x0a
    4296:	82 0f       	add	r24, r18
    4298:	93 1f       	adc	r25, r19
    429a:	ac 01       	movw	r20, r24
    429c:	41 50       	subi	r20, 0x01	; 1
    429e:	51 09       	sbc	r21, r1
    42a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    42a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    42a4:	2f 81       	ldd	r18, Y+7	; 0x07
    42a6:	38 85       	ldd	r19, Y+8	; 0x08
    42a8:	6b 81       	ldd	r22, Y+3	; 0x03
    42aa:	7c 81       	ldd	r23, Y+4	; 0x04
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	9a 81       	ldd	r25, Y+2	; 0x02
    42b0:	8d 01       	movw	r16, r26
    42b2:	09 95       	icall
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	9a 81       	ldd	r25, Y+2	; 0x02
    42b8:	fc 01       	movw	r30, r24
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	40 96       	adiw	r24, 0x10	; 16
    42c0:	dc 01       	movw	r26, r24
    42c2:	ed 91       	ld	r30, X+
    42c4:	fc 91       	ld	r31, X
    42c6:	ab 85       	ldd	r26, Y+11	; 0x0b
    42c8:	bc 85       	ldd	r27, Y+12	; 0x0c
    42ca:	29 85       	ldd	r18, Y+9	; 0x09
    42cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    42ce:	4d 81       	ldd	r20, Y+5	; 0x05
    42d0:	5e 81       	ldd	r21, Y+6	; 0x06
    42d2:	6b 81       	ldd	r22, Y+3	; 0x03
    42d4:	7c 81       	ldd	r23, Y+4	; 0x04
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	9a 81       	ldd	r25, Y+2	; 0x02
    42da:	8d 01       	movw	r16, r26
    42dc:	09 95       	icall
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	fc 01       	movw	r30, r24
    42e4:	80 81       	ld	r24, Z
    42e6:	91 81       	ldd	r25, Z+1	; 0x01
    42e8:	40 96       	adiw	r24, 0x10	; 16
    42ea:	dc 01       	movw	r26, r24
    42ec:	ed 91       	ld	r30, X+
    42ee:	fc 91       	ld	r31, X
    42f0:	2b 81       	ldd	r18, Y+3	; 0x03
    42f2:	3c 81       	ldd	r19, Y+4	; 0x04
    42f4:	8f 81       	ldd	r24, Y+7	; 0x07
    42f6:	98 85       	ldd	r25, Y+8	; 0x08
    42f8:	82 0f       	add	r24, r18
    42fa:	93 1f       	adc	r25, r19
    42fc:	bc 01       	movw	r22, r24
    42fe:	61 50       	subi	r22, 0x01	; 1
    4300:	71 09       	sbc	r23, r1
    4302:	ab 85       	ldd	r26, Y+11	; 0x0b
    4304:	bc 85       	ldd	r27, Y+12	; 0x0c
    4306:	29 85       	ldd	r18, Y+9	; 0x09
    4308:	3a 85       	ldd	r19, Y+10	; 0x0a
    430a:	4d 81       	ldd	r20, Y+5	; 0x05
    430c:	5e 81       	ldd	r21, Y+6	; 0x06
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	9a 81       	ldd	r25, Y+2	; 0x02
    4312:	8d 01       	movw	r16, r26
    4314:	09 95       	icall
    4316:	89 81       	ldd	r24, Y+1	; 0x01
    4318:	9a 81       	ldd	r25, Y+2	; 0x02
    431a:	fc 01       	movw	r30, r24
    431c:	80 81       	ld	r24, Z
    431e:	91 81       	ldd	r25, Z+1	; 0x01
    4320:	46 96       	adiw	r24, 0x16	; 22
    4322:	dc 01       	movw	r26, r24
    4324:	2d 91       	ld	r18, X+
    4326:	3c 91       	ld	r19, X
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	f9 01       	movw	r30, r18
    432e:	09 95       	icall
    4330:	00 00       	nop
    4332:	2c 96       	adiw	r28, 0x0c	; 12
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	ff 90       	pop	r15
    4348:	ef 90       	pop	r14
    434a:	08 95       	ret

0000434c <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    434c:	cf 92       	push	r12
    434e:	df 92       	push	r13
    4350:	ef 92       	push	r14
    4352:	ff 92       	push	r15
    4354:	0f 93       	push	r16
    4356:	1f 93       	push	r17
    4358:	cf 93       	push	r28
    435a:	df 93       	push	r29
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
    4360:	c4 54       	subi	r28, 0x44	; 68
    4362:	d1 09       	sbc	r29, r1
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	f8 94       	cli
    4368:	de bf       	out	0x3e, r29	; 62
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	cd bf       	out	0x3d, r28	; 61
    436e:	98 af       	std	Y+56, r25	; 0x38
    4370:	8f ab       	std	Y+55, r24	; 0x37
    4372:	7a af       	std	Y+58, r23	; 0x3a
    4374:	69 af       	std	Y+57, r22	; 0x39
    4376:	5c af       	std	Y+60, r21	; 0x3c
    4378:	4b af       	std	Y+59, r20	; 0x3b
    437a:	2d af       	std	Y+61, r18	; 0x3d
    437c:	1f af       	std	Y+63, r17	; 0x3f
    437e:	0e af       	std	Y+62, r16	; 0x3e
    4380:	ce 01       	movw	r24, r28
    4382:	80 5c       	subi	r24, 0xC0	; 192
    4384:	9f 4f       	sbci	r25, 0xFF	; 255
    4386:	dc 01       	movw	r26, r24
    4388:	ed 92       	st	X+, r14
    438a:	fc 92       	st	X, r15
    438c:	ce 01       	movw	r24, r28
    438e:	8e 5b       	subi	r24, 0xBE	; 190
    4390:	9f 4f       	sbci	r25, 0xFF	; 255
    4392:	fc 01       	movw	r30, r24
    4394:	c0 82       	st	Z, r12
    4396:	8f a9       	ldd	r24, Y+55	; 0x37
    4398:	98 ad       	ldd	r25, Y+56	; 0x38
    439a:	dc 01       	movw	r26, r24
    439c:	58 96       	adiw	r26, 0x18	; 24
    439e:	8d 91       	ld	r24, X+
    43a0:	9c 91       	ld	r25, X
    43a2:	59 97       	sbiw	r26, 0x19	; 25
    43a4:	89 2b       	or	r24, r25
    43a6:	09 f0       	breq	.+2      	; 0x43aa <_ZN12Adafruit_GFX8drawCharEiihjjh+0x5e>
    43a8:	31 c2       	rjmp	.+1122   	; 0x480c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x4c0>
    43aa:	8f a9       	ldd	r24, Y+55	; 0x37
    43ac:	98 ad       	ldd	r25, Y+56	; 0x38
    43ae:	fc 01       	movw	r30, r24
    43b0:	20 85       	ldd	r18, Z+8	; 0x08
    43b2:	31 85       	ldd	r19, Z+9	; 0x09
    43b4:	89 ad       	ldd	r24, Y+57	; 0x39
    43b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    43b8:	82 17       	cp	r24, r18
    43ba:	93 07       	cpc	r25, r19
    43bc:	0c f0       	brlt	.+2      	; 0x43c0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x74>
    43be:	bd c3       	rjmp	.+1914   	; 0x4b3a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7ee>
    43c0:	8f a9       	ldd	r24, Y+55	; 0x37
    43c2:	98 ad       	ldd	r25, Y+56	; 0x38
    43c4:	dc 01       	movw	r26, r24
    43c6:	1a 96       	adiw	r26, 0x0a	; 10
    43c8:	2d 91       	ld	r18, X+
    43ca:	3c 91       	ld	r19, X
    43cc:	1b 97       	sbiw	r26, 0x0b	; 11
    43ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    43d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    43d2:	82 17       	cp	r24, r18
    43d4:	93 07       	cpc	r25, r19
    43d6:	0c f0       	brlt	.+2      	; 0x43da <_ZN12Adafruit_GFX8drawCharEiihjjh+0x8e>
    43d8:	b0 c3       	rjmp	.+1888   	; 0x4b3a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7ee>
    43da:	ce 01       	movw	r24, r28
    43dc:	8e 5b       	subi	r24, 0xBE	; 190
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	fc 01       	movw	r30, r24
    43e2:	80 81       	ld	r24, Z
    43e4:	28 2f       	mov	r18, r24
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	c9 01       	movw	r24, r18
    43ea:	88 0f       	add	r24, r24
    43ec:	99 1f       	adc	r25, r25
    43ee:	82 0f       	add	r24, r18
    43f0:	93 1f       	adc	r25, r19
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	9c 01       	movw	r18, r24
    43f8:	89 ad       	ldd	r24, Y+57	; 0x39
    43fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    43fc:	82 0f       	add	r24, r18
    43fe:	93 1f       	adc	r25, r19
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	99 23       	and	r25, r25
    4404:	0c f4       	brge	.+2      	; 0x4408 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xbc>
    4406:	99 c3       	rjmp	.+1842   	; 0x4b3a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7ee>
    4408:	ce 01       	movw	r24, r28
    440a:	8e 5b       	subi	r24, 0xBE	; 190
    440c:	9f 4f       	sbci	r25, 0xFF	; 255
    440e:	dc 01       	movw	r26, r24
    4410:	8c 91       	ld	r24, X
    4412:	88 2f       	mov	r24, r24
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	9c 01       	movw	r18, r24
    4418:	22 0f       	add	r18, r18
    441a:	33 1f       	adc	r19, r19
    441c:	22 0f       	add	r18, r18
    441e:	33 1f       	adc	r19, r19
    4420:	22 0f       	add	r18, r18
    4422:	33 1f       	adc	r19, r19
    4424:	8b ad       	ldd	r24, Y+59	; 0x3b
    4426:	9c ad       	ldd	r25, Y+60	; 0x3c
    4428:	82 0f       	add	r24, r18
    442a:	93 1f       	adc	r25, r19
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	99 23       	and	r25, r25
    4430:	0c f4       	brge	.+2      	; 0x4434 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe8>
    4432:	83 c3       	rjmp	.+1798   	; 0x4b3a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7ee>
    4434:	8f a9       	ldd	r24, Y+55	; 0x37
    4436:	98 ad       	ldd	r25, Y+56	; 0x38
    4438:	fc 01       	movw	r30, r24
    443a:	97 89       	ldd	r25, Z+23	; 0x17
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	89 27       	eor	r24, r25
    4440:	88 23       	and	r24, r24
    4442:	31 f0       	breq	.+12     	; 0x4450 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x104>
    4444:	8d ad       	ldd	r24, Y+61	; 0x3d
    4446:	80 3b       	cpi	r24, 0xB0	; 176
    4448:	18 f0       	brcs	.+6      	; 0x4450 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x104>
    444a:	8d ad       	ldd	r24, Y+61	; 0x3d
    444c:	8f 5f       	subi	r24, 0xFF	; 255
    444e:	8d af       	std	Y+61, r24	; 0x3d
    4450:	8f a9       	ldd	r24, Y+55	; 0x37
    4452:	98 ad       	ldd	r25, Y+56	; 0x38
    4454:	dc 01       	movw	r26, r24
    4456:	8d 91       	ld	r24, X+
    4458:	9c 91       	ld	r25, X
    445a:	0a 96       	adiw	r24, 0x0a	; 10
    445c:	fc 01       	movw	r30, r24
    445e:	20 81       	ld	r18, Z
    4460:	31 81       	ldd	r19, Z+1	; 0x01
    4462:	8f a9       	ldd	r24, Y+55	; 0x37
    4464:	98 ad       	ldd	r25, Y+56	; 0x38
    4466:	f9 01       	movw	r30, r18
    4468:	09 95       	icall
    446a:	19 82       	std	Y+1, r1	; 0x01
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	85 30       	cpi	r24, 0x05	; 5
    4470:	0c f0       	brlt	.+2      	; 0x4474 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x128>
    4472:	47 c1       	rjmp	.+654    	; 0x4702 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b6>
    4474:	8d ad       	ldd	r24, Y+61	; 0x3d
    4476:	28 2f       	mov	r18, r24
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	c9 01       	movw	r24, r18
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	88 0f       	add	r24, r24
    4482:	99 1f       	adc	r25, r25
    4484:	28 0f       	add	r18, r24
    4486:	39 1f       	adc	r19, r25
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	08 2e       	mov	r0, r24
    448c:	00 0c       	add	r0, r0
    448e:	99 0b       	sbc	r25, r25
    4490:	82 0f       	add	r24, r18
    4492:	93 1f       	adc	r25, r19
    4494:	88 53       	subi	r24, 0x38	; 56
    4496:	9d 4f       	sbci	r25, 0xFD	; 253
    4498:	9f 87       	std	Y+15, r25	; 0x0f
    449a:	8e 87       	std	Y+14, r24	; 0x0e
    449c:	8e 85       	ldd	r24, Y+14	; 0x0e
    449e:	9f 85       	ldd	r25, Y+15	; 0x0f
    44a0:	fc 01       	movw	r30, r24
    44a2:	84 91       	lpm	r24, Z
    44a4:	88 8b       	std	Y+16, r24	; 0x10
    44a6:	88 89       	ldd	r24, Y+16	; 0x10
    44a8:	8a 83       	std	Y+2, r24	; 0x02
    44aa:	1b 82       	std	Y+3, r1	; 0x03
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	88 30       	cpi	r24, 0x08	; 8
    44b0:	0c f0       	brlt	.+2      	; 0x44b4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x168>
    44b2:	23 c1       	rjmp	.+582    	; 0x46fa <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3ae>
    44b4:	8a 81       	ldd	r24, Y+2	; 0x02
    44b6:	88 2f       	mov	r24, r24
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	81 70       	andi	r24, 0x01	; 1
    44bc:	99 27       	eor	r25, r25
    44be:	89 2b       	or	r24, r25
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x178>
    44c2:	7f c0       	rjmp	.+254    	; 0x45c2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x276>
    44c4:	ce 01       	movw	r24, r28
    44c6:	8e 5b       	subi	r24, 0xBE	; 190
    44c8:	9f 4f       	sbci	r25, 0xFF	; 255
    44ca:	dc 01       	movw	r26, r24
    44cc:	8c 91       	ld	r24, X
    44ce:	81 30       	cpi	r24, 0x01	; 1
    44d0:	09 f5       	brne	.+66     	; 0x4514 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1c8>
    44d2:	8f a9       	ldd	r24, Y+55	; 0x37
    44d4:	98 ad       	ldd	r25, Y+56	; 0x38
    44d6:	fc 01       	movw	r30, r24
    44d8:	80 81       	ld	r24, Z
    44da:	91 81       	ldd	r25, Z+1	; 0x01
    44dc:	0c 96       	adiw	r24, 0x0c	; 12
    44de:	dc 01       	movw	r26, r24
    44e0:	ed 91       	ld	r30, X+
    44e2:	fc 91       	ld	r31, X
    44e4:	8b 81       	ldd	r24, Y+3	; 0x03
    44e6:	28 2f       	mov	r18, r24
    44e8:	88 0f       	add	r24, r24
    44ea:	33 0b       	sbc	r19, r19
    44ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    44ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    44f0:	a9 01       	movw	r20, r18
    44f2:	48 0f       	add	r20, r24
    44f4:	59 1f       	adc	r21, r25
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	28 2f       	mov	r18, r24
    44fa:	88 0f       	add	r24, r24
    44fc:	33 0b       	sbc	r19, r19
    44fe:	89 ad       	ldd	r24, Y+57	; 0x39
    4500:	9a ad       	ldd	r25, Y+58	; 0x3a
    4502:	b9 01       	movw	r22, r18
    4504:	68 0f       	add	r22, r24
    4506:	79 1f       	adc	r23, r25
    4508:	2e ad       	ldd	r18, Y+62	; 0x3e
    450a:	3f ad       	ldd	r19, Y+63	; 0x3f
    450c:	8f a9       	ldd	r24, Y+55	; 0x37
    450e:	98 ad       	ldd	r25, Y+56	; 0x38
    4510:	09 95       	icall
    4512:	e9 c0       	rjmp	.+466    	; 0x46e6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39a>
    4514:	8f a9       	ldd	r24, Y+55	; 0x37
    4516:	98 ad       	ldd	r25, Y+56	; 0x38
    4518:	fc 01       	movw	r30, r24
    451a:	80 81       	ld	r24, Z
    451c:	91 81       	ldd	r25, Z+1	; 0x01
    451e:	0e 96       	adiw	r24, 0x0e	; 14
    4520:	dc 01       	movw	r26, r24
    4522:	0d 90       	ld	r0, X+
    4524:	bc 91       	ld	r27, X
    4526:	a0 2d       	mov	r26, r0
    4528:	25 96       	adiw	r28, 0x05	; 5
    452a:	bf af       	std	Y+63, r27	; 0x3f
    452c:	ae af       	std	Y+62, r26	; 0x3e
    452e:	25 97       	sbiw	r28, 0x05	; 5
    4530:	ce 01       	movw	r24, r28
    4532:	8e 5b       	subi	r24, 0xBE	; 190
    4534:	9f 4f       	sbci	r25, 0xFF	; 255
    4536:	fc 01       	movw	r30, r24
    4538:	80 81       	ld	r24, Z
    453a:	08 2f       	mov	r16, r24
    453c:	10 e0       	ldi	r17, 0x00	; 0
    453e:	ce 01       	movw	r24, r28
    4540:	8e 5b       	subi	r24, 0xBE	; 190
    4542:	9f 4f       	sbci	r25, 0xFF	; 255
    4544:	dc 01       	movw	r26, r24
    4546:	8c 91       	ld	r24, X
    4548:	c8 2e       	mov	r12, r24
    454a:	d1 2c       	mov	r13, r1
    454c:	8b 81       	ldd	r24, Y+3	; 0x03
    454e:	48 2f       	mov	r20, r24
    4550:	88 0f       	add	r24, r24
    4552:	55 0b       	sbc	r21, r21
    4554:	ce 01       	movw	r24, r28
    4556:	8e 5b       	subi	r24, 0xBE	; 190
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	fc 01       	movw	r30, r24
    455c:	80 81       	ld	r24, Z
    455e:	88 2f       	mov	r24, r24
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	48 9f       	mul	r20, r24
    4564:	90 01       	movw	r18, r0
    4566:	49 9f       	mul	r20, r25
    4568:	30 0d       	add	r19, r0
    456a:	58 9f       	mul	r21, r24
    456c:	30 0d       	add	r19, r0
    456e:	11 24       	eor	r1, r1
    4570:	8b ad       	ldd	r24, Y+59	; 0x3b
    4572:	9c ad       	ldd	r25, Y+60	; 0x3c
    4574:	d9 01       	movw	r26, r18
    4576:	a8 0f       	add	r26, r24
    4578:	b9 1f       	adc	r27, r25
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	48 2f       	mov	r20, r24
    457e:	88 0f       	add	r24, r24
    4580:	55 0b       	sbc	r21, r21
    4582:	ce 01       	movw	r24, r28
    4584:	8e 5b       	subi	r24, 0xBE	; 190
    4586:	9f 4f       	sbci	r25, 0xFF	; 255
    4588:	fc 01       	movw	r30, r24
    458a:	80 81       	ld	r24, Z
    458c:	88 2f       	mov	r24, r24
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	48 9f       	mul	r20, r24
    4592:	90 01       	movw	r18, r0
    4594:	49 9f       	mul	r20, r25
    4596:	30 0d       	add	r19, r0
    4598:	58 9f       	mul	r21, r24
    459a:	30 0d       	add	r19, r0
    459c:	11 24       	eor	r1, r1
    459e:	89 ad       	ldd	r24, Y+57	; 0x39
    45a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    45a2:	b9 01       	movw	r22, r18
    45a4:	68 0f       	add	r22, r24
    45a6:	79 1f       	adc	r23, r25
    45a8:	2e ad       	ldd	r18, Y+62	; 0x3e
    45aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    45ac:	8f a9       	ldd	r24, Y+55	; 0x37
    45ae:	98 ad       	ldd	r25, Y+56	; 0x38
    45b0:	79 01       	movw	r14, r18
    45b2:	96 01       	movw	r18, r12
    45b4:	ad 01       	movw	r20, r26
    45b6:	25 96       	adiw	r28, 0x05	; 5
    45b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    45ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    45bc:	25 97       	sbiw	r28, 0x05	; 5
    45be:	09 95       	icall
    45c0:	92 c0       	rjmp	.+292    	; 0x46e6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39a>
    45c2:	ce 01       	movw	r24, r28
    45c4:	80 5c       	subi	r24, 0xC0	; 192
    45c6:	9f 4f       	sbci	r25, 0xFF	; 255
    45c8:	dc 01       	movw	r26, r24
    45ca:	2d 91       	ld	r18, X+
    45cc:	3c 91       	ld	r19, X
    45ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    45d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    45d2:	28 17       	cp	r18, r24
    45d4:	39 07       	cpc	r19, r25
    45d6:	09 f4       	brne	.+2      	; 0x45da <_ZN12Adafruit_GFX8drawCharEiihjjh+0x28e>
    45d8:	86 c0       	rjmp	.+268    	; 0x46e6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39a>
    45da:	ce 01       	movw	r24, r28
    45dc:	8e 5b       	subi	r24, 0xBE	; 190
    45de:	9f 4f       	sbci	r25, 0xFF	; 255
    45e0:	fc 01       	movw	r30, r24
    45e2:	80 81       	ld	r24, Z
    45e4:	81 30       	cpi	r24, 0x01	; 1
    45e6:	29 f5       	brne	.+74     	; 0x4632 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2e6>
    45e8:	8f a9       	ldd	r24, Y+55	; 0x37
    45ea:	98 ad       	ldd	r25, Y+56	; 0x38
    45ec:	dc 01       	movw	r26, r24
    45ee:	8d 91       	ld	r24, X+
    45f0:	9c 91       	ld	r25, X
    45f2:	0c 96       	adiw	r24, 0x0c	; 12
    45f4:	dc 01       	movw	r26, r24
    45f6:	ed 91       	ld	r30, X+
    45f8:	fc 91       	ld	r31, X
    45fa:	8b 81       	ldd	r24, Y+3	; 0x03
    45fc:	28 2f       	mov	r18, r24
    45fe:	88 0f       	add	r24, r24
    4600:	33 0b       	sbc	r19, r19
    4602:	8b ad       	ldd	r24, Y+59	; 0x3b
    4604:	9c ad       	ldd	r25, Y+60	; 0x3c
    4606:	a9 01       	movw	r20, r18
    4608:	48 0f       	add	r20, r24
    460a:	59 1f       	adc	r21, r25
    460c:	89 81       	ldd	r24, Y+1	; 0x01
    460e:	28 2f       	mov	r18, r24
    4610:	88 0f       	add	r24, r24
    4612:	33 0b       	sbc	r19, r19
    4614:	89 ad       	ldd	r24, Y+57	; 0x39
    4616:	9a ad       	ldd	r25, Y+58	; 0x3a
    4618:	b9 01       	movw	r22, r18
    461a:	68 0f       	add	r22, r24
    461c:	79 1f       	adc	r23, r25
    461e:	ce 01       	movw	r24, r28
    4620:	80 5c       	subi	r24, 0xC0	; 192
    4622:	9f 4f       	sbci	r25, 0xFF	; 255
    4624:	dc 01       	movw	r26, r24
    4626:	2d 91       	ld	r18, X+
    4628:	3c 91       	ld	r19, X
    462a:	8f a9       	ldd	r24, Y+55	; 0x37
    462c:	98 ad       	ldd	r25, Y+56	; 0x38
    462e:	09 95       	icall
    4630:	5a c0       	rjmp	.+180    	; 0x46e6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39a>
    4632:	8f a9       	ldd	r24, Y+55	; 0x37
    4634:	98 ad       	ldd	r25, Y+56	; 0x38
    4636:	fc 01       	movw	r30, r24
    4638:	80 81       	ld	r24, Z
    463a:	91 81       	ldd	r25, Z+1	; 0x01
    463c:	0e 96       	adiw	r24, 0x0e	; 14
    463e:	dc 01       	movw	r26, r24
    4640:	0d 90       	ld	r0, X+
    4642:	bc 91       	ld	r27, X
    4644:	a0 2d       	mov	r26, r0
    4646:	25 96       	adiw	r28, 0x05	; 5
    4648:	bf af       	std	Y+63, r27	; 0x3f
    464a:	ae af       	std	Y+62, r26	; 0x3e
    464c:	25 97       	sbiw	r28, 0x05	; 5
    464e:	ce 01       	movw	r24, r28
    4650:	8e 5b       	subi	r24, 0xBE	; 190
    4652:	9f 4f       	sbci	r25, 0xFF	; 255
    4654:	fc 01       	movw	r30, r24
    4656:	80 81       	ld	r24, Z
    4658:	08 2f       	mov	r16, r24
    465a:	10 e0       	ldi	r17, 0x00	; 0
    465c:	ce 01       	movw	r24, r28
    465e:	8e 5b       	subi	r24, 0xBE	; 190
    4660:	9f 4f       	sbci	r25, 0xFF	; 255
    4662:	dc 01       	movw	r26, r24
    4664:	8c 91       	ld	r24, X
    4666:	c8 2e       	mov	r12, r24
    4668:	d1 2c       	mov	r13, r1
    466a:	8b 81       	ldd	r24, Y+3	; 0x03
    466c:	48 2f       	mov	r20, r24
    466e:	88 0f       	add	r24, r24
    4670:	55 0b       	sbc	r21, r21
    4672:	ce 01       	movw	r24, r28
    4674:	8e 5b       	subi	r24, 0xBE	; 190
    4676:	9f 4f       	sbci	r25, 0xFF	; 255
    4678:	fc 01       	movw	r30, r24
    467a:	80 81       	ld	r24, Z
    467c:	88 2f       	mov	r24, r24
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	48 9f       	mul	r20, r24
    4682:	90 01       	movw	r18, r0
    4684:	49 9f       	mul	r20, r25
    4686:	30 0d       	add	r19, r0
    4688:	58 9f       	mul	r21, r24
    468a:	30 0d       	add	r19, r0
    468c:	11 24       	eor	r1, r1
    468e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4690:	9c ad       	ldd	r25, Y+60	; 0x3c
    4692:	d9 01       	movw	r26, r18
    4694:	a8 0f       	add	r26, r24
    4696:	b9 1f       	adc	r27, r25
    4698:	89 81       	ldd	r24, Y+1	; 0x01
    469a:	48 2f       	mov	r20, r24
    469c:	88 0f       	add	r24, r24
    469e:	55 0b       	sbc	r21, r21
    46a0:	ce 01       	movw	r24, r28
    46a2:	8e 5b       	subi	r24, 0xBE	; 190
    46a4:	9f 4f       	sbci	r25, 0xFF	; 255
    46a6:	fc 01       	movw	r30, r24
    46a8:	80 81       	ld	r24, Z
    46aa:	88 2f       	mov	r24, r24
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	48 9f       	mul	r20, r24
    46b0:	90 01       	movw	r18, r0
    46b2:	49 9f       	mul	r20, r25
    46b4:	30 0d       	add	r19, r0
    46b6:	58 9f       	mul	r21, r24
    46b8:	30 0d       	add	r19, r0
    46ba:	11 24       	eor	r1, r1
    46bc:	89 ad       	ldd	r24, Y+57	; 0x39
    46be:	9a ad       	ldd	r25, Y+58	; 0x3a
    46c0:	b9 01       	movw	r22, r18
    46c2:	68 0f       	add	r22, r24
    46c4:	79 1f       	adc	r23, r25
    46c6:	ce 01       	movw	r24, r28
    46c8:	80 5c       	subi	r24, 0xC0	; 192
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	fc 01       	movw	r30, r24
    46ce:	20 81       	ld	r18, Z
    46d0:	31 81       	ldd	r19, Z+1	; 0x01
    46d2:	8f a9       	ldd	r24, Y+55	; 0x37
    46d4:	98 ad       	ldd	r25, Y+56	; 0x38
    46d6:	79 01       	movw	r14, r18
    46d8:	96 01       	movw	r18, r12
    46da:	ad 01       	movw	r20, r26
    46dc:	25 96       	adiw	r28, 0x05	; 5
    46de:	ee ad       	ldd	r30, Y+62	; 0x3e
    46e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    46e2:	25 97       	sbiw	r28, 0x05	; 5
    46e4:	09 95       	icall
    46e6:	8b 81       	ldd	r24, Y+3	; 0x03
    46e8:	8f 5f       	subi	r24, 0xFF	; 255
    46ea:	8b 83       	std	Y+3, r24	; 0x03
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	88 2f       	mov	r24, r24
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	95 95       	asr	r25
    46f4:	87 95       	ror	r24
    46f6:	8a 83       	std	Y+2, r24	; 0x02
    46f8:	d9 ce       	rjmp	.-590    	; 0x44ac <_ZN12Adafruit_GFX8drawCharEiihjjh+0x160>
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	8f 5f       	subi	r24, 0xFF	; 255
    46fe:	89 83       	std	Y+1, r24	; 0x01
    4700:	b5 ce       	rjmp	.-662    	; 0x446c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x120>
    4702:	ce 01       	movw	r24, r28
    4704:	80 5c       	subi	r24, 0xC0	; 192
    4706:	9f 4f       	sbci	r25, 0xFF	; 255
    4708:	dc 01       	movw	r26, r24
    470a:	2d 91       	ld	r18, X+
    470c:	3c 91       	ld	r19, X
    470e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4710:	9f ad       	ldd	r25, Y+63	; 0x3f
    4712:	28 17       	cp	r18, r24
    4714:	39 07       	cpc	r19, r25
    4716:	09 f4       	brne	.+2      	; 0x471a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3ce>
    4718:	6b c0       	rjmp	.+214    	; 0x47f0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x4a4>
    471a:	ce 01       	movw	r24, r28
    471c:	8e 5b       	subi	r24, 0xBE	; 190
    471e:	9f 4f       	sbci	r25, 0xFF	; 255
    4720:	fc 01       	movw	r30, r24
    4722:	80 81       	ld	r24, Z
    4724:	81 30       	cpi	r24, 0x01	; 1
    4726:	e9 f4       	brne	.+58     	; 0x4762 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x416>
    4728:	8f a9       	ldd	r24, Y+55	; 0x37
    472a:	98 ad       	ldd	r25, Y+56	; 0x38
    472c:	dc 01       	movw	r26, r24
    472e:	8d 91       	ld	r24, X+
    4730:	9c 91       	ld	r25, X
    4732:	40 96       	adiw	r24, 0x10	; 16
    4734:	dc 01       	movw	r26, r24
    4736:	ed 91       	ld	r30, X+
    4738:	fc 91       	ld	r31, X
    473a:	89 ad       	ldd	r24, Y+57	; 0x39
    473c:	9a ad       	ldd	r25, Y+58	; 0x3a
    473e:	bc 01       	movw	r22, r24
    4740:	6b 5f       	subi	r22, 0xFB	; 251
    4742:	7f 4f       	sbci	r23, 0xFF	; 255
    4744:	ce 01       	movw	r24, r28
    4746:	80 5c       	subi	r24, 0xC0	; 192
    4748:	9f 4f       	sbci	r25, 0xFF	; 255
    474a:	dc 01       	movw	r26, r24
    474c:	2d 91       	ld	r18, X+
    474e:	3c 91       	ld	r19, X
    4750:	4b ad       	ldd	r20, Y+59	; 0x3b
    4752:	5c ad       	ldd	r21, Y+60	; 0x3c
    4754:	8f a9       	ldd	r24, Y+55	; 0x37
    4756:	98 ad       	ldd	r25, Y+56	; 0x38
    4758:	89 01       	movw	r16, r18
    475a:	28 e0       	ldi	r18, 0x08	; 8
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	09 95       	icall
    4760:	47 c0       	rjmp	.+142    	; 0x47f0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x4a4>
    4762:	8f a9       	ldd	r24, Y+55	; 0x37
    4764:	98 ad       	ldd	r25, Y+56	; 0x38
    4766:	fc 01       	movw	r30, r24
    4768:	80 81       	ld	r24, Z
    476a:	91 81       	ldd	r25, Z+1	; 0x01
    476c:	0e 96       	adiw	r24, 0x0e	; 14
    476e:	dc 01       	movw	r26, r24
    4770:	0d 90       	ld	r0, X+
    4772:	bc 91       	ld	r27, X
    4774:	a0 2d       	mov	r26, r0
    4776:	25 96       	adiw	r28, 0x05	; 5
    4778:	bf af       	std	Y+63, r27	; 0x3f
    477a:	ae af       	std	Y+62, r26	; 0x3e
    477c:	25 97       	sbiw	r28, 0x05	; 5
    477e:	ce 01       	movw	r24, r28
    4780:	8e 5b       	subi	r24, 0xBE	; 190
    4782:	9f 4f       	sbci	r25, 0xFF	; 255
    4784:	fc 01       	movw	r30, r24
    4786:	80 81       	ld	r24, Z
    4788:	88 2f       	mov	r24, r24
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	8c 01       	movw	r16, r24
    478e:	00 0f       	add	r16, r16
    4790:	11 1f       	adc	r17, r17
    4792:	00 0f       	add	r16, r16
    4794:	11 1f       	adc	r17, r17
    4796:	00 0f       	add	r16, r16
    4798:	11 1f       	adc	r17, r17
    479a:	ce 01       	movw	r24, r28
    479c:	8e 5b       	subi	r24, 0xBE	; 190
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	dc 01       	movw	r26, r24
    47a2:	8c 91       	ld	r24, X
    47a4:	a8 2f       	mov	r26, r24
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	ce 01       	movw	r24, r28
    47aa:	8e 5b       	subi	r24, 0xBE	; 190
    47ac:	9f 4f       	sbci	r25, 0xFF	; 255
    47ae:	fc 01       	movw	r30, r24
    47b0:	80 81       	ld	r24, Z
    47b2:	28 2f       	mov	r18, r24
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	c9 01       	movw	r24, r18
    47b8:	88 0f       	add	r24, r24
    47ba:	99 1f       	adc	r25, r25
    47bc:	88 0f       	add	r24, r24
    47be:	99 1f       	adc	r25, r25
    47c0:	28 0f       	add	r18, r24
    47c2:	39 1f       	adc	r19, r25
    47c4:	89 ad       	ldd	r24, Y+57	; 0x39
    47c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    47c8:	b9 01       	movw	r22, r18
    47ca:	68 0f       	add	r22, r24
    47cc:	79 1f       	adc	r23, r25
    47ce:	ce 01       	movw	r24, r28
    47d0:	80 5c       	subi	r24, 0xC0	; 192
    47d2:	9f 4f       	sbci	r25, 0xFF	; 255
    47d4:	fc 01       	movw	r30, r24
    47d6:	20 81       	ld	r18, Z
    47d8:	31 81       	ldd	r19, Z+1	; 0x01
    47da:	4b ad       	ldd	r20, Y+59	; 0x3b
    47dc:	5c ad       	ldd	r21, Y+60	; 0x3c
    47de:	8f a9       	ldd	r24, Y+55	; 0x37
    47e0:	98 ad       	ldd	r25, Y+56	; 0x38
    47e2:	79 01       	movw	r14, r18
    47e4:	9d 01       	movw	r18, r26
    47e6:	25 96       	adiw	r28, 0x05	; 5
    47e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    47ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    47ec:	25 97       	sbiw	r28, 0x05	; 5
    47ee:	09 95       	icall
    47f0:	8f a9       	ldd	r24, Y+55	; 0x37
    47f2:	98 ad       	ldd	r25, Y+56	; 0x38
    47f4:	dc 01       	movw	r26, r24
    47f6:	8d 91       	ld	r24, X+
    47f8:	9c 91       	ld	r25, X
    47fa:	46 96       	adiw	r24, 0x16	; 22
    47fc:	fc 01       	movw	r30, r24
    47fe:	20 81       	ld	r18, Z
    4800:	31 81       	ldd	r19, Z+1	; 0x01
    4802:	8f a9       	ldd	r24, Y+55	; 0x37
    4804:	98 ad       	ldd	r25, Y+56	; 0x38
    4806:	f9 01       	movw	r30, r18
    4808:	09 95       	icall
    480a:	98 c1       	rjmp	.+816    	; 0x4b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7f0>
    480c:	8f a9       	ldd	r24, Y+55	; 0x37
    480e:	98 ad       	ldd	r25, Y+56	; 0x38
    4810:	dc 01       	movw	r26, r24
    4812:	58 96       	adiw	r26, 0x18	; 24
    4814:	8d 91       	ld	r24, X+
    4816:	9c 91       	ld	r25, X
    4818:	59 97       	sbiw	r26, 0x19	; 25
    481a:	04 96       	adiw	r24, 0x04	; 4
    481c:	9a 8b       	std	Y+18, r25	; 0x12
    481e:	89 8b       	std	Y+17, r24	; 0x11
    4820:	89 89       	ldd	r24, Y+17	; 0x11
    4822:	9a 89       	ldd	r25, Y+18	; 0x12
    4824:	fc 01       	movw	r30, r24
    4826:	84 91       	lpm	r24, Z
    4828:	8b 8b       	std	Y+19, r24	; 0x13
    482a:	8b 89       	ldd	r24, Y+19	; 0x13
    482c:	9d ad       	ldd	r25, Y+61	; 0x3d
    482e:	f9 2f       	mov	r31, r25
    4830:	f8 1b       	sub	r31, r24
    4832:	8f 2f       	mov	r24, r31
    4834:	8d af       	std	Y+61, r24	; 0x3d
    4836:	8d ad       	ldd	r24, Y+61	; 0x3d
    4838:	28 2f       	mov	r18, r24
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	c9 01       	movw	r24, r18
    483e:	88 0f       	add	r24, r24
    4840:	99 1f       	adc	r25, r25
    4842:	88 0f       	add	r24, r24
    4844:	99 1f       	adc	r25, r25
    4846:	88 0f       	add	r24, r24
    4848:	99 1f       	adc	r25, r25
    484a:	ac 01       	movw	r20, r24
    484c:	42 1b       	sub	r20, r18
    484e:	53 0b       	sbc	r21, r19
    4850:	9a 01       	movw	r18, r20
    4852:	8f a9       	ldd	r24, Y+55	; 0x37
    4854:	98 ad       	ldd	r25, Y+56	; 0x38
    4856:	dc 01       	movw	r26, r24
    4858:	58 96       	adiw	r26, 0x18	; 24
    485a:	8d 91       	ld	r24, X+
    485c:	9c 91       	ld	r25, X
    485e:	59 97       	sbiw	r26, 0x19	; 25
    4860:	02 96       	adiw	r24, 0x02	; 2
    4862:	9d 8b       	std	Y+21, r25	; 0x15
    4864:	8c 8b       	std	Y+20, r24	; 0x14
    4866:	8c 89       	ldd	r24, Y+20	; 0x14
    4868:	9d 89       	ldd	r25, Y+21	; 0x15
    486a:	fc 01       	movw	r30, r24
    486c:	45 91       	lpm	r20, Z+
    486e:	54 91       	lpm	r21, Z
    4870:	cf 01       	movw	r24, r30
    4872:	5f 8b       	std	Y+23, r21	; 0x17
    4874:	4e 8b       	std	Y+22, r20	; 0x16
    4876:	9d 8b       	std	Y+21, r25	; 0x15
    4878:	8c 8b       	std	Y+20, r24	; 0x14
    487a:	8e 89       	ldd	r24, Y+22	; 0x16
    487c:	9f 89       	ldd	r25, Y+23	; 0x17
    487e:	82 0f       	add	r24, r18
    4880:	93 1f       	adc	r25, r19
    4882:	99 8f       	std	Y+25, r25	; 0x19
    4884:	88 8f       	std	Y+24, r24	; 0x18
    4886:	8f a9       	ldd	r24, Y+55	; 0x37
    4888:	98 ad       	ldd	r25, Y+56	; 0x38
    488a:	dc 01       	movw	r26, r24
    488c:	58 96       	adiw	r26, 0x18	; 24
    488e:	8d 91       	ld	r24, X+
    4890:	9c 91       	ld	r25, X
    4892:	59 97       	sbiw	r26, 0x19	; 25
    4894:	9b 8f       	std	Y+27, r25	; 0x1b
    4896:	8a 8f       	std	Y+26, r24	; 0x1a
    4898:	8a 8d       	ldd	r24, Y+26	; 0x1a
    489a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    489c:	fc 01       	movw	r30, r24
    489e:	25 91       	lpm	r18, Z+
    48a0:	34 91       	lpm	r19, Z
    48a2:	cf 01       	movw	r24, r30
    48a4:	3d 8f       	std	Y+29, r19	; 0x1d
    48a6:	2c 8f       	std	Y+28, r18	; 0x1c
    48a8:	9b 8f       	std	Y+27, r25	; 0x1b
    48aa:	8a 8f       	std	Y+26, r24	; 0x1a
    48ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48b0:	9f 8f       	std	Y+31, r25	; 0x1f
    48b2:	8e 8f       	std	Y+30, r24	; 0x1e
    48b4:	88 8d       	ldd	r24, Y+24	; 0x18
    48b6:	99 8d       	ldd	r25, Y+25	; 0x19
    48b8:	99 a3       	std	Y+33, r25	; 0x21
    48ba:	88 a3       	std	Y+32, r24	; 0x20
    48bc:	88 a1       	ldd	r24, Y+32	; 0x20
    48be:	99 a1       	ldd	r25, Y+33	; 0x21
    48c0:	fc 01       	movw	r30, r24
    48c2:	25 91       	lpm	r18, Z+
    48c4:	34 91       	lpm	r19, Z
    48c6:	cf 01       	movw	r24, r30
    48c8:	3b a3       	std	Y+35, r19	; 0x23
    48ca:	2a a3       	std	Y+34, r18	; 0x22
    48cc:	99 a3       	std	Y+33, r25	; 0x21
    48ce:	88 a3       	std	Y+32, r24	; 0x20
    48d0:	8a a1       	ldd	r24, Y+34	; 0x22
    48d2:	9b a1       	ldd	r25, Y+35	; 0x23
    48d4:	9d 83       	std	Y+5, r25	; 0x05
    48d6:	8c 83       	std	Y+4, r24	; 0x04
    48d8:	88 8d       	ldd	r24, Y+24	; 0x18
    48da:	99 8d       	ldd	r25, Y+25	; 0x19
    48dc:	02 96       	adiw	r24, 0x02	; 2
    48de:	9d a3       	std	Y+37, r25	; 0x25
    48e0:	8c a3       	std	Y+36, r24	; 0x24
    48e2:	8c a1       	ldd	r24, Y+36	; 0x24
    48e4:	9d a1       	ldd	r25, Y+37	; 0x25
    48e6:	fc 01       	movw	r30, r24
    48e8:	84 91       	lpm	r24, Z
    48ea:	8e a3       	std	Y+38, r24	; 0x26
    48ec:	8e a1       	ldd	r24, Y+38	; 0x26
    48ee:	8f a3       	std	Y+39, r24	; 0x27
    48f0:	88 8d       	ldd	r24, Y+24	; 0x18
    48f2:	99 8d       	ldd	r25, Y+25	; 0x19
    48f4:	03 96       	adiw	r24, 0x03	; 3
    48f6:	99 a7       	std	Y+41, r25	; 0x29
    48f8:	88 a7       	std	Y+40, r24	; 0x28
    48fa:	88 a5       	ldd	r24, Y+40	; 0x28
    48fc:	99 a5       	ldd	r25, Y+41	; 0x29
    48fe:	fc 01       	movw	r30, r24
    4900:	84 91       	lpm	r24, Z
    4902:	8a a7       	std	Y+42, r24	; 0x2a
    4904:	8a a5       	ldd	r24, Y+42	; 0x2a
    4906:	8b a7       	std	Y+43, r24	; 0x2b
    4908:	88 8d       	ldd	r24, Y+24	; 0x18
    490a:	99 8d       	ldd	r25, Y+25	; 0x19
    490c:	05 96       	adiw	r24, 0x05	; 5
    490e:	9d a7       	std	Y+45, r25	; 0x2d
    4910:	8c a7       	std	Y+44, r24	; 0x2c
    4912:	8c a5       	ldd	r24, Y+44	; 0x2c
    4914:	9d a5       	ldd	r25, Y+45	; 0x2d
    4916:	fc 01       	movw	r30, r24
    4918:	84 91       	lpm	r24, Z
    491a:	8e a7       	std	Y+46, r24	; 0x2e
    491c:	8e a5       	ldd	r24, Y+46	; 0x2e
    491e:	8f a7       	std	Y+47, r24	; 0x2f
    4920:	88 8d       	ldd	r24, Y+24	; 0x18
    4922:	99 8d       	ldd	r25, Y+25	; 0x19
    4924:	06 96       	adiw	r24, 0x06	; 6
    4926:	99 ab       	std	Y+49, r25	; 0x31
    4928:	88 ab       	std	Y+48, r24	; 0x30
    492a:	88 a9       	ldd	r24, Y+48	; 0x30
    492c:	99 a9       	ldd	r25, Y+49	; 0x31
    492e:	fc 01       	movw	r30, r24
    4930:	84 91       	lpm	r24, Z
    4932:	8a ab       	std	Y+50, r24	; 0x32
    4934:	8a a9       	ldd	r24, Y+50	; 0x32
    4936:	8b ab       	std	Y+51, r24	; 0x33
    4938:	18 86       	std	Y+8, r1	; 0x08
    493a:	19 86       	std	Y+9, r1	; 0x09
    493c:	1b 86       	std	Y+11, r1	; 0x0b
    493e:	1a 86       	std	Y+10, r1	; 0x0a
    4940:	1d 86       	std	Y+13, r1	; 0x0d
    4942:	1c 86       	std	Y+12, r1	; 0x0c
    4944:	ce 01       	movw	r24, r28
    4946:	8e 5b       	subi	r24, 0xBE	; 190
    4948:	9f 4f       	sbci	r25, 0xFF	; 255
    494a:	dc 01       	movw	r26, r24
    494c:	8c 91       	ld	r24, X
    494e:	82 30       	cpi	r24, 0x02	; 2
    4950:	60 f0       	brcs	.+24     	; 0x496a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x61e>
    4952:	8f a5       	ldd	r24, Y+47	; 0x2f
    4954:	08 2e       	mov	r0, r24
    4956:	00 0c       	add	r0, r0
    4958:	99 0b       	sbc	r25, r25
    495a:	9b 87       	std	Y+11, r25	; 0x0b
    495c:	8a 87       	std	Y+10, r24	; 0x0a
    495e:	8b a9       	ldd	r24, Y+51	; 0x33
    4960:	08 2e       	mov	r0, r24
    4962:	00 0c       	add	r0, r0
    4964:	99 0b       	sbc	r25, r25
    4966:	9d 87       	std	Y+13, r25	; 0x0d
    4968:	8c 87       	std	Y+12, r24	; 0x0c
    496a:	8f a9       	ldd	r24, Y+55	; 0x37
    496c:	98 ad       	ldd	r25, Y+56	; 0x38
    496e:	fc 01       	movw	r30, r24
    4970:	80 81       	ld	r24, Z
    4972:	91 81       	ldd	r25, Z+1	; 0x01
    4974:	0a 96       	adiw	r24, 0x0a	; 10
    4976:	dc 01       	movw	r26, r24
    4978:	2d 91       	ld	r18, X+
    497a:	3c 91       	ld	r19, X
    497c:	8f a9       	ldd	r24, Y+55	; 0x37
    497e:	98 ad       	ldd	r25, Y+56	; 0x38
    4980:	f9 01       	movw	r30, r18
    4982:	09 95       	icall
    4984:	1f 82       	std	Y+7, r1	; 0x07
    4986:	9f 81       	ldd	r25, Y+7	; 0x07
    4988:	8b a5       	ldd	r24, Y+43	; 0x2b
    498a:	98 17       	cp	r25, r24
    498c:	08 f0       	brcs	.+2      	; 0x4990 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x644>
    498e:	c7 c0       	rjmp	.+398    	; 0x4b1e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7d2>
    4990:	1e 82       	std	Y+6, r1	; 0x06
    4992:	9e 81       	ldd	r25, Y+6	; 0x06
    4994:	8f a1       	ldd	r24, Y+39	; 0x27
    4996:	98 17       	cp	r25, r24
    4998:	08 f0       	brcs	.+2      	; 0x499c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x650>
    499a:	bd c0       	rjmp	.+378    	; 0x4b16 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7ca>
    499c:	89 85       	ldd	r24, Y+9	; 0x09
    499e:	91 e0       	ldi	r25, 0x01	; 1
    49a0:	98 0f       	add	r25, r24
    49a2:	99 87       	std	Y+9, r25	; 0x09
    49a4:	88 2f       	mov	r24, r24
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	87 70       	andi	r24, 0x07	; 7
    49aa:	99 27       	eor	r25, r25
    49ac:	21 e0       	ldi	r18, 0x01	; 1
    49ae:	89 2b       	or	r24, r25
    49b0:	09 f0       	breq	.+2      	; 0x49b4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x668>
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	22 23       	and	r18, r18
    49b6:	a1 f0       	breq	.+40     	; 0x49e0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x694>
    49b8:	8c 81       	ldd	r24, Y+4	; 0x04
    49ba:	9d 81       	ldd	r25, Y+5	; 0x05
    49bc:	9c 01       	movw	r18, r24
    49be:	2f 5f       	subi	r18, 0xFF	; 255
    49c0:	3f 4f       	sbci	r19, 0xFF	; 255
    49c2:	3d 83       	std	Y+5, r19	; 0x05
    49c4:	2c 83       	std	Y+4, r18	; 0x04
    49c6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    49c8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    49ca:	82 0f       	add	r24, r18
    49cc:	93 1f       	adc	r25, r19
    49ce:	9d ab       	std	Y+53, r25	; 0x35
    49d0:	8c ab       	std	Y+52, r24	; 0x34
    49d2:	8c a9       	ldd	r24, Y+52	; 0x34
    49d4:	9d a9       	ldd	r25, Y+53	; 0x35
    49d6:	fc 01       	movw	r30, r24
    49d8:	84 91       	lpm	r24, Z
    49da:	8e ab       	std	Y+54, r24	; 0x36
    49dc:	8e a9       	ldd	r24, Y+54	; 0x36
    49de:	88 87       	std	Y+8, r24	; 0x08
    49e0:	88 85       	ldd	r24, Y+8	; 0x08
    49e2:	88 23       	and	r24, r24
    49e4:	0c f0       	brlt	.+2      	; 0x49e8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x69c>
    49e6:	90 c0       	rjmp	.+288    	; 0x4b08 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7bc>
    49e8:	ce 01       	movw	r24, r28
    49ea:	8e 5b       	subi	r24, 0xBE	; 190
    49ec:	9f 4f       	sbci	r25, 0xFF	; 255
    49ee:	dc 01       	movw	r26, r24
    49f0:	8c 91       	ld	r24, X
    49f2:	81 30       	cpi	r24, 0x01	; 1
    49f4:	59 f5       	brne	.+86     	; 0x4a4c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x700>
    49f6:	8f a9       	ldd	r24, Y+55	; 0x37
    49f8:	98 ad       	ldd	r25, Y+56	; 0x38
    49fa:	fc 01       	movw	r30, r24
    49fc:	80 81       	ld	r24, Z
    49fe:	91 81       	ldd	r25, Z+1	; 0x01
    4a00:	0c 96       	adiw	r24, 0x0c	; 12
    4a02:	dc 01       	movw	r26, r24
    4a04:	ed 91       	ld	r30, X+
    4a06:	fc 91       	ld	r31, X
    4a08:	8b a9       	ldd	r24, Y+51	; 0x33
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	88 0f       	add	r24, r24
    4a0e:	33 0b       	sbc	r19, r19
    4a10:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a12:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a14:	28 0f       	add	r18, r24
    4a16:	39 1f       	adc	r19, r25
    4a18:	8f 81       	ldd	r24, Y+7	; 0x07
    4a1a:	88 2f       	mov	r24, r24
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	a9 01       	movw	r20, r18
    4a20:	48 0f       	add	r20, r24
    4a22:	59 1f       	adc	r21, r25
    4a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a26:	28 2f       	mov	r18, r24
    4a28:	88 0f       	add	r24, r24
    4a2a:	33 0b       	sbc	r19, r19
    4a2c:	89 ad       	ldd	r24, Y+57	; 0x39
    4a2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a30:	28 0f       	add	r18, r24
    4a32:	39 1f       	adc	r19, r25
    4a34:	8e 81       	ldd	r24, Y+6	; 0x06
    4a36:	88 2f       	mov	r24, r24
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	b9 01       	movw	r22, r18
    4a3c:	68 0f       	add	r22, r24
    4a3e:	79 1f       	adc	r23, r25
    4a40:	2e ad       	ldd	r18, Y+62	; 0x3e
    4a42:	3f ad       	ldd	r19, Y+63	; 0x3f
    4a44:	8f a9       	ldd	r24, Y+55	; 0x37
    4a46:	98 ad       	ldd	r25, Y+56	; 0x38
    4a48:	09 95       	icall
    4a4a:	5e c0       	rjmp	.+188    	; 0x4b08 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7bc>
    4a4c:	8f a9       	ldd	r24, Y+55	; 0x37
    4a4e:	98 ad       	ldd	r25, Y+56	; 0x38
    4a50:	fc 01       	movw	r30, r24
    4a52:	80 81       	ld	r24, Z
    4a54:	91 81       	ldd	r25, Z+1	; 0x01
    4a56:	0e 96       	adiw	r24, 0x0e	; 14
    4a58:	dc 01       	movw	r26, r24
    4a5a:	0d 90       	ld	r0, X+
    4a5c:	bc 91       	ld	r27, X
    4a5e:	a0 2d       	mov	r26, r0
    4a60:	25 96       	adiw	r28, 0x05	; 5
    4a62:	bf af       	std	Y+63, r27	; 0x3f
    4a64:	ae af       	std	Y+62, r26	; 0x3e
    4a66:	25 97       	sbiw	r28, 0x05	; 5
    4a68:	ce 01       	movw	r24, r28
    4a6a:	8e 5b       	subi	r24, 0xBE	; 190
    4a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a6e:	fc 01       	movw	r30, r24
    4a70:	80 81       	ld	r24, Z
    4a72:	08 2f       	mov	r16, r24
    4a74:	10 e0       	ldi	r17, 0x00	; 0
    4a76:	ce 01       	movw	r24, r28
    4a78:	8e 5b       	subi	r24, 0xBE	; 190
    4a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	8c 91       	ld	r24, X
    4a80:	c8 2e       	mov	r12, r24
    4a82:	d1 2c       	mov	r13, r1
    4a84:	8f 81       	ldd	r24, Y+7	; 0x07
    4a86:	28 2f       	mov	r18, r24
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a8e:	a9 01       	movw	r20, r18
    4a90:	48 0f       	add	r20, r24
    4a92:	59 1f       	adc	r21, r25
    4a94:	ce 01       	movw	r24, r28
    4a96:	8e 5b       	subi	r24, 0xBE	; 190
    4a98:	9f 4f       	sbci	r25, 0xFF	; 255
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	80 81       	ld	r24, Z
    4a9e:	88 2f       	mov	r24, r24
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	48 9f       	mul	r20, r24
    4aa4:	90 01       	movw	r18, r0
    4aa6:	49 9f       	mul	r20, r25
    4aa8:	30 0d       	add	r19, r0
    4aaa:	58 9f       	mul	r21, r24
    4aac:	30 0d       	add	r19, r0
    4aae:	11 24       	eor	r1, r1
    4ab0:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ab2:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ab4:	d9 01       	movw	r26, r18
    4ab6:	a8 0f       	add	r26, r24
    4ab8:	b9 1f       	adc	r27, r25
    4aba:	8e 81       	ldd	r24, Y+6	; 0x06
    4abc:	28 2f       	mov	r18, r24
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ac2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ac4:	a9 01       	movw	r20, r18
    4ac6:	48 0f       	add	r20, r24
    4ac8:	59 1f       	adc	r21, r25
    4aca:	ce 01       	movw	r24, r28
    4acc:	8e 5b       	subi	r24, 0xBE	; 190
    4ace:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	80 81       	ld	r24, Z
    4ad4:	88 2f       	mov	r24, r24
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	48 9f       	mul	r20, r24
    4ada:	90 01       	movw	r18, r0
    4adc:	49 9f       	mul	r20, r25
    4ade:	30 0d       	add	r19, r0
    4ae0:	58 9f       	mul	r21, r24
    4ae2:	30 0d       	add	r19, r0
    4ae4:	11 24       	eor	r1, r1
    4ae6:	89 ad       	ldd	r24, Y+57	; 0x39
    4ae8:	9a ad       	ldd	r25, Y+58	; 0x3a
    4aea:	b9 01       	movw	r22, r18
    4aec:	68 0f       	add	r22, r24
    4aee:	79 1f       	adc	r23, r25
    4af0:	2e ad       	ldd	r18, Y+62	; 0x3e
    4af2:	3f ad       	ldd	r19, Y+63	; 0x3f
    4af4:	8f a9       	ldd	r24, Y+55	; 0x37
    4af6:	98 ad       	ldd	r25, Y+56	; 0x38
    4af8:	79 01       	movw	r14, r18
    4afa:	96 01       	movw	r18, r12
    4afc:	ad 01       	movw	r20, r26
    4afe:	25 96       	adiw	r28, 0x05	; 5
    4b00:	ee ad       	ldd	r30, Y+62	; 0x3e
    4b02:	ff ad       	ldd	r31, Y+63	; 0x3f
    4b04:	25 97       	sbiw	r28, 0x05	; 5
    4b06:	09 95       	icall
    4b08:	88 85       	ldd	r24, Y+8	; 0x08
    4b0a:	88 0f       	add	r24, r24
    4b0c:	88 87       	std	Y+8, r24	; 0x08
    4b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b10:	8f 5f       	subi	r24, 0xFF	; 255
    4b12:	8e 83       	std	Y+6, r24	; 0x06
    4b14:	3e cf       	rjmp	.-388    	; 0x4992 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x646>
    4b16:	8f 81       	ldd	r24, Y+7	; 0x07
    4b18:	8f 5f       	subi	r24, 0xFF	; 255
    4b1a:	8f 83       	std	Y+7, r24	; 0x07
    4b1c:	34 cf       	rjmp	.-408    	; 0x4986 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x63a>
    4b1e:	8f a9       	ldd	r24, Y+55	; 0x37
    4b20:	98 ad       	ldd	r25, Y+56	; 0x38
    4b22:	dc 01       	movw	r26, r24
    4b24:	8d 91       	ld	r24, X+
    4b26:	9c 91       	ld	r25, X
    4b28:	46 96       	adiw	r24, 0x16	; 22
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	20 81       	ld	r18, Z
    4b2e:	31 81       	ldd	r19, Z+1	; 0x01
    4b30:	8f a9       	ldd	r24, Y+55	; 0x37
    4b32:	98 ad       	ldd	r25, Y+56	; 0x38
    4b34:	f9 01       	movw	r30, r18
    4b36:	09 95       	icall
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x7f0>
    4b3a:	00 00       	nop
    4b3c:	cc 5b       	subi	r28, 0xBC	; 188
    4b3e:	df 4f       	sbci	r29, 0xFF	; 255
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	ff 90       	pop	r15
    4b54:	ef 90       	pop	r14
    4b56:	df 90       	pop	r13
    4b58:	cf 90       	pop	r12
    4b5a:	08 95       	ret

00004b5c <_ZN12Adafruit_GFX5writeEh>:
    4b5c:	cf 92       	push	r12
    4b5e:	ef 92       	push	r14
    4b60:	ff 92       	push	r15
    4b62:	0f 93       	push	r16
    4b64:	1f 93       	push	r17
    4b66:	cf 93       	push	r28
    4b68:	df 93       	push	r29
    4b6a:	cd b7       	in	r28, 0x3d	; 61
    4b6c:	de b7       	in	r29, 0x3e	; 62
    4b6e:	a8 97       	sbiw	r28, 0x28	; 40
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	cd bf       	out	0x3d, r28	; 61
    4b7a:	9d a3       	std	Y+37, r25	; 0x25
    4b7c:	8c a3       	std	Y+36, r24	; 0x24
    4b7e:	6e a3       	std	Y+38, r22	; 0x26
    4b80:	8c a1       	ldd	r24, Y+36	; 0x24
    4b82:	9d a1       	ldd	r25, Y+37	; 0x25
    4b84:	fc 01       	movw	r30, r24
    4b86:	80 8d       	ldd	r24, Z+24	; 0x18
    4b88:	91 8d       	ldd	r25, Z+25	; 0x19
    4b8a:	89 2b       	or	r24, r25
    4b8c:	09 f0       	breq	.+2      	; 0x4b90 <_ZN12Adafruit_GFX5writeEh+0x34>
    4b8e:	a4 c0       	rjmp	.+328    	; 0x4cd8 <_ZN12Adafruit_GFX5writeEh+0x17c>
    4b90:	8e a1       	ldd	r24, Y+38	; 0x26
    4b92:	8a 30       	cpi	r24, 0x0A	; 10
    4b94:	f1 f4       	brne	.+60     	; 0x4bd2 <_ZN12Adafruit_GFX5writeEh+0x76>
    4b96:	8c a1       	ldd	r24, Y+36	; 0x24
    4b98:	9d a1       	ldd	r25, Y+37	; 0x25
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	15 86       	std	Z+13, r1	; 0x0d
    4b9e:	14 86       	std	Z+12, r1	; 0x0c
    4ba0:	8c a1       	ldd	r24, Y+36	; 0x24
    4ba2:	9d a1       	ldd	r25, Y+37	; 0x25
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	26 85       	ldd	r18, Z+14	; 0x0e
    4ba8:	37 85       	ldd	r19, Z+15	; 0x0f
    4baa:	8c a1       	ldd	r24, Y+36	; 0x24
    4bac:	9d a1       	ldd	r25, Y+37	; 0x25
    4bae:	fc 01       	movw	r30, r24
    4bb0:	84 89       	ldd	r24, Z+20	; 0x14
    4bb2:	88 2f       	mov	r24, r24
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	88 0f       	add	r24, r24
    4bb8:	99 1f       	adc	r25, r25
    4bba:	88 0f       	add	r24, r24
    4bbc:	99 1f       	adc	r25, r25
    4bbe:	88 0f       	add	r24, r24
    4bc0:	99 1f       	adc	r25, r25
    4bc2:	28 0f       	add	r18, r24
    4bc4:	39 1f       	adc	r19, r25
    4bc6:	8c a1       	ldd	r24, Y+36	; 0x24
    4bc8:	9d a1       	ldd	r25, Y+37	; 0x25
    4bca:	fc 01       	movw	r30, r24
    4bcc:	37 87       	std	Z+15, r19	; 0x0f
    4bce:	26 87       	std	Z+14, r18	; 0x0e
    4bd0:	e3 c1       	rjmp	.+966    	; 0x4f98 <_ZN12Adafruit_GFX5writeEh+0x43c>
    4bd2:	8e a1       	ldd	r24, Y+38	; 0x26
    4bd4:	8d 30       	cpi	r24, 0x0D	; 13
    4bd6:	09 f4       	brne	.+2      	; 0x4bda <_ZN12Adafruit_GFX5writeEh+0x7e>
    4bd8:	df c1       	rjmp	.+958    	; 0x4f98 <_ZN12Adafruit_GFX5writeEh+0x43c>
    4bda:	8c a1       	ldd	r24, Y+36	; 0x24
    4bdc:	9d a1       	ldd	r25, Y+37	; 0x25
    4bde:	fc 01       	movw	r30, r24
    4be0:	86 89       	ldd	r24, Z+22	; 0x16
    4be2:	88 23       	and	r24, r24
    4be4:	d1 f1       	breq	.+116    	; 0x4c5a <_ZN12Adafruit_GFX5writeEh+0xfe>
    4be6:	8c a1       	ldd	r24, Y+36	; 0x24
    4be8:	9d a1       	ldd	r25, Y+37	; 0x25
    4bea:	fc 01       	movw	r30, r24
    4bec:	44 85       	ldd	r20, Z+12	; 0x0c
    4bee:	55 85       	ldd	r21, Z+13	; 0x0d
    4bf0:	8c a1       	ldd	r24, Y+36	; 0x24
    4bf2:	9d a1       	ldd	r25, Y+37	; 0x25
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	84 89       	ldd	r24, Z+20	; 0x14
    4bf8:	28 2f       	mov	r18, r24
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	c9 01       	movw	r24, r18
    4bfe:	88 0f       	add	r24, r24
    4c00:	99 1f       	adc	r25, r25
    4c02:	82 0f       	add	r24, r18
    4c04:	93 1f       	adc	r25, r19
    4c06:	88 0f       	add	r24, r24
    4c08:	99 1f       	adc	r25, r25
    4c0a:	9a 01       	movw	r18, r20
    4c0c:	28 0f       	add	r18, r24
    4c0e:	39 1f       	adc	r19, r25
    4c10:	8c a1       	ldd	r24, Y+36	; 0x24
    4c12:	9d a1       	ldd	r25, Y+37	; 0x25
    4c14:	fc 01       	movw	r30, r24
    4c16:	80 85       	ldd	r24, Z+8	; 0x08
    4c18:	91 85       	ldd	r25, Z+9	; 0x09
    4c1a:	82 17       	cp	r24, r18
    4c1c:	93 07       	cpc	r25, r19
    4c1e:	ec f4       	brge	.+58     	; 0x4c5a <_ZN12Adafruit_GFX5writeEh+0xfe>
    4c20:	8c a1       	ldd	r24, Y+36	; 0x24
    4c22:	9d a1       	ldd	r25, Y+37	; 0x25
    4c24:	fc 01       	movw	r30, r24
    4c26:	15 86       	std	Z+13, r1	; 0x0d
    4c28:	14 86       	std	Z+12, r1	; 0x0c
    4c2a:	8c a1       	ldd	r24, Y+36	; 0x24
    4c2c:	9d a1       	ldd	r25, Y+37	; 0x25
    4c2e:	fc 01       	movw	r30, r24
    4c30:	26 85       	ldd	r18, Z+14	; 0x0e
    4c32:	37 85       	ldd	r19, Z+15	; 0x0f
    4c34:	8c a1       	ldd	r24, Y+36	; 0x24
    4c36:	9d a1       	ldd	r25, Y+37	; 0x25
    4c38:	fc 01       	movw	r30, r24
    4c3a:	84 89       	ldd	r24, Z+20	; 0x14
    4c3c:	88 2f       	mov	r24, r24
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	88 0f       	add	r24, r24
    4c42:	99 1f       	adc	r25, r25
    4c44:	88 0f       	add	r24, r24
    4c46:	99 1f       	adc	r25, r25
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	28 0f       	add	r18, r24
    4c4e:	39 1f       	adc	r19, r25
    4c50:	8c a1       	ldd	r24, Y+36	; 0x24
    4c52:	9d a1       	ldd	r25, Y+37	; 0x25
    4c54:	fc 01       	movw	r30, r24
    4c56:	37 87       	std	Z+15, r19	; 0x0f
    4c58:	26 87       	std	Z+14, r18	; 0x0e
    4c5a:	8c a1       	ldd	r24, Y+36	; 0x24
    4c5c:	9d a1       	ldd	r25, Y+37	; 0x25
    4c5e:	fc 01       	movw	r30, r24
    4c60:	a4 89       	ldd	r26, Z+20	; 0x14
    4c62:	8c a1       	ldd	r24, Y+36	; 0x24
    4c64:	9d a1       	ldd	r25, Y+37	; 0x25
    4c66:	fc 01       	movw	r30, r24
    4c68:	02 88       	ldd	r0, Z+18	; 0x12
    4c6a:	f3 89       	ldd	r31, Z+19	; 0x13
    4c6c:	e0 2d       	mov	r30, r0
    4c6e:	f8 a7       	std	Y+40, r31	; 0x28
    4c70:	ef a3       	std	Y+39, r30	; 0x27
    4c72:	8c a1       	ldd	r24, Y+36	; 0x24
    4c74:	9d a1       	ldd	r25, Y+37	; 0x25
    4c76:	fc 01       	movw	r30, r24
    4c78:	20 89       	ldd	r18, Z+16	; 0x10
    4c7a:	31 89       	ldd	r19, Z+17	; 0x11
    4c7c:	8c a1       	ldd	r24, Y+36	; 0x24
    4c7e:	9d a1       	ldd	r25, Y+37	; 0x25
    4c80:	fc 01       	movw	r30, r24
    4c82:	46 85       	ldd	r20, Z+14	; 0x0e
    4c84:	57 85       	ldd	r21, Z+15	; 0x0f
    4c86:	8c a1       	ldd	r24, Y+36	; 0x24
    4c88:	9d a1       	ldd	r25, Y+37	; 0x25
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	64 85       	ldd	r22, Z+12	; 0x0c
    4c8e:	75 85       	ldd	r23, Z+13	; 0x0d
    4c90:	8c a1       	ldd	r24, Y+36	; 0x24
    4c92:	9d a1       	ldd	r25, Y+37	; 0x25
    4c94:	ca 2e       	mov	r12, r26
    4c96:	ef a0       	ldd	r14, Y+39	; 0x27
    4c98:	f8 a4       	ldd	r15, Y+40	; 0x28
    4c9a:	89 01       	movw	r16, r18
    4c9c:	2e a1       	ldd	r18, Y+38	; 0x26
    4c9e:	0e 94 a6 21 	call	0x434c	; 0x434c <_ZN12Adafruit_GFX8drawCharEiihjjh>
    4ca2:	8c a1       	ldd	r24, Y+36	; 0x24
    4ca4:	9d a1       	ldd	r25, Y+37	; 0x25
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	44 85       	ldd	r20, Z+12	; 0x0c
    4caa:	55 85       	ldd	r21, Z+13	; 0x0d
    4cac:	8c a1       	ldd	r24, Y+36	; 0x24
    4cae:	9d a1       	ldd	r25, Y+37	; 0x25
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	84 89       	ldd	r24, Z+20	; 0x14
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	c9 01       	movw	r24, r18
    4cba:	88 0f       	add	r24, r24
    4cbc:	99 1f       	adc	r25, r25
    4cbe:	82 0f       	add	r24, r18
    4cc0:	93 1f       	adc	r25, r19
    4cc2:	88 0f       	add	r24, r24
    4cc4:	99 1f       	adc	r25, r25
    4cc6:	9a 01       	movw	r18, r20
    4cc8:	28 0f       	add	r18, r24
    4cca:	39 1f       	adc	r19, r25
    4ccc:	8c a1       	ldd	r24, Y+36	; 0x24
    4cce:	9d a1       	ldd	r25, Y+37	; 0x25
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	35 87       	std	Z+13, r19	; 0x0d
    4cd4:	24 87       	std	Z+12, r18	; 0x0c
    4cd6:	60 c1       	rjmp	.+704    	; 0x4f98 <_ZN12Adafruit_GFX5writeEh+0x43c>
    4cd8:	8e a1       	ldd	r24, Y+38	; 0x26
    4cda:	8a 30       	cpi	r24, 0x0A	; 10
    4cdc:	79 f5       	brne	.+94     	; 0x4d3c <_ZN12Adafruit_GFX5writeEh+0x1e0>
    4cde:	8c a1       	ldd	r24, Y+36	; 0x24
    4ce0:	9d a1       	ldd	r25, Y+37	; 0x25
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	15 86       	std	Z+13, r1	; 0x0d
    4ce6:	14 86       	std	Z+12, r1	; 0x0c
    4ce8:	8c a1       	ldd	r24, Y+36	; 0x24
    4cea:	9d a1       	ldd	r25, Y+37	; 0x25
    4cec:	fc 01       	movw	r30, r24
    4cee:	84 89       	ldd	r24, Z+20	; 0x14
    4cf0:	48 2f       	mov	r20, r24
    4cf2:	50 e0       	ldi	r21, 0x00	; 0
    4cf4:	8c a1       	ldd	r24, Y+36	; 0x24
    4cf6:	9d a1       	ldd	r25, Y+37	; 0x25
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	80 8d       	ldd	r24, Z+24	; 0x18
    4cfc:	91 8d       	ldd	r25, Z+25	; 0x19
    4cfe:	06 96       	adiw	r24, 0x06	; 6
    4d00:	9a 83       	std	Y+2, r25	; 0x02
    4d02:	89 83       	std	Y+1, r24	; 0x01
    4d04:	89 81       	ldd	r24, Y+1	; 0x01
    4d06:	9a 81       	ldd	r25, Y+2	; 0x02
    4d08:	fc 01       	movw	r30, r24
    4d0a:	84 91       	lpm	r24, Z
    4d0c:	8b 83       	std	Y+3, r24	; 0x03
    4d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d10:	28 2f       	mov	r18, r24
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	42 9f       	mul	r20, r18
    4d16:	c0 01       	movw	r24, r0
    4d18:	43 9f       	mul	r20, r19
    4d1a:	90 0d       	add	r25, r0
    4d1c:	52 9f       	mul	r21, r18
    4d1e:	90 0d       	add	r25, r0
    4d20:	11 24       	eor	r1, r1
    4d22:	2c a1       	ldd	r18, Y+36	; 0x24
    4d24:	3d a1       	ldd	r19, Y+37	; 0x25
    4d26:	f9 01       	movw	r30, r18
    4d28:	26 85       	ldd	r18, Z+14	; 0x0e
    4d2a:	37 85       	ldd	r19, Z+15	; 0x0f
    4d2c:	28 0f       	add	r18, r24
    4d2e:	39 1f       	adc	r19, r25
    4d30:	8c a1       	ldd	r24, Y+36	; 0x24
    4d32:	9d a1       	ldd	r25, Y+37	; 0x25
    4d34:	fc 01       	movw	r30, r24
    4d36:	37 87       	std	Z+15, r19	; 0x0f
    4d38:	26 87       	std	Z+14, r18	; 0x0e
    4d3a:	2e c1       	rjmp	.+604    	; 0x4f98 <_ZN12Adafruit_GFX5writeEh+0x43c>
    4d3c:	8e a1       	ldd	r24, Y+38	; 0x26
    4d3e:	8d 30       	cpi	r24, 0x0D	; 13
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <_ZN12Adafruit_GFX5writeEh+0x1e8>
    4d42:	2a c1       	rjmp	.+596    	; 0x4f98 <_ZN12Adafruit_GFX5writeEh+0x43c>
    4d44:	8c a1       	ldd	r24, Y+36	; 0x24
    4d46:	9d a1       	ldd	r25, Y+37	; 0x25
    4d48:	fc 01       	movw	r30, r24
    4d4a:	80 8d       	ldd	r24, Z+24	; 0x18
    4d4c:	91 8d       	ldd	r25, Z+25	; 0x19
    4d4e:	04 96       	adiw	r24, 0x04	; 4
    4d50:	9d 83       	std	Y+5, r25	; 0x05
    4d52:	8c 83       	std	Y+4, r24	; 0x04
    4d54:	8c 81       	ldd	r24, Y+4	; 0x04
    4d56:	9d 81       	ldd	r25, Y+5	; 0x05
    4d58:	fc 01       	movw	r30, r24
    4d5a:	84 91       	lpm	r24, Z
    4d5c:	8e 83       	std	Y+6, r24	; 0x06
    4d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    4d60:	8f 83       	std	Y+7, r24	; 0x07
    4d62:	9e a1       	ldd	r25, Y+38	; 0x26
    4d64:	8f 81       	ldd	r24, Y+7	; 0x07
    4d66:	98 17       	cp	r25, r24
    4d68:	98 f0       	brcs	.+38     	; 0x4d90 <_ZN12Adafruit_GFX5writeEh+0x234>
    4d6a:	8c a1       	ldd	r24, Y+36	; 0x24
    4d6c:	9d a1       	ldd	r25, Y+37	; 0x25
    4d6e:	fc 01       	movw	r30, r24
    4d70:	80 8d       	ldd	r24, Z+24	; 0x18
    4d72:	91 8d       	ldd	r25, Z+25	; 0x19
    4d74:	05 96       	adiw	r24, 0x05	; 5
    4d76:	99 87       	std	Y+9, r25	; 0x09
    4d78:	88 87       	std	Y+8, r24	; 0x08
    4d7a:	88 85       	ldd	r24, Y+8	; 0x08
    4d7c:	99 85       	ldd	r25, Y+9	; 0x09
    4d7e:	fc 01       	movw	r30, r24
    4d80:	84 91       	lpm	r24, Z
    4d82:	8a 87       	std	Y+10, r24	; 0x0a
    4d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d86:	8e a1       	ldd	r24, Y+38	; 0x26
    4d88:	98 17       	cp	r25, r24
    4d8a:	10 f0       	brcs	.+4      	; 0x4d90 <_ZN12Adafruit_GFX5writeEh+0x234>
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	01 c0       	rjmp	.+2      	; 0x4d92 <_ZN12Adafruit_GFX5writeEh+0x236>
    4d90:	80 e0       	ldi	r24, 0x00	; 0
    4d92:	88 23       	and	r24, r24
    4d94:	09 f4       	brne	.+2      	; 0x4d98 <_ZN12Adafruit_GFX5writeEh+0x23c>
    4d96:	00 c1       	rjmp	.+512    	; 0x4f98 <_ZN12Adafruit_GFX5writeEh+0x43c>
    4d98:	8e a1       	ldd	r24, Y+38	; 0x26
    4d9a:	28 2f       	mov	r18, r24
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    4da0:	88 2f       	mov	r24, r24
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	a9 01       	movw	r20, r18
    4da6:	48 1b       	sub	r20, r24
    4da8:	59 0b       	sbc	r21, r25
    4daa:	ca 01       	movw	r24, r20
    4dac:	9c 01       	movw	r18, r24
    4dae:	c9 01       	movw	r24, r18
    4db0:	88 0f       	add	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	88 0f       	add	r24, r24
    4db6:	99 1f       	adc	r25, r25
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	e2 1b       	sub	r30, r18
    4dc0:	f3 0b       	sbc	r31, r19
    4dc2:	9f 01       	movw	r18, r30
    4dc4:	8c a1       	ldd	r24, Y+36	; 0x24
    4dc6:	9d a1       	ldd	r25, Y+37	; 0x25
    4dc8:	fc 01       	movw	r30, r24
    4dca:	80 8d       	ldd	r24, Z+24	; 0x18
    4dcc:	91 8d       	ldd	r25, Z+25	; 0x19
    4dce:	02 96       	adiw	r24, 0x02	; 2
    4dd0:	9c 87       	std	Y+12, r25	; 0x0c
    4dd2:	8b 87       	std	Y+11, r24	; 0x0b
    4dd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dd8:	fc 01       	movw	r30, r24
    4dda:	45 91       	lpm	r20, Z+
    4ddc:	54 91       	lpm	r21, Z
    4dde:	cf 01       	movw	r24, r30
    4de0:	5e 87       	std	Y+14, r21	; 0x0e
    4de2:	4d 87       	std	Y+13, r20	; 0x0d
    4de4:	9c 87       	std	Y+12, r25	; 0x0c
    4de6:	8b 87       	std	Y+11, r24	; 0x0b
    4de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dec:	82 0f       	add	r24, r18
    4dee:	93 1f       	adc	r25, r19
    4df0:	98 8b       	std	Y+16, r25	; 0x10
    4df2:	8f 87       	std	Y+15, r24	; 0x0f
    4df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4df6:	98 89       	ldd	r25, Y+16	; 0x10
    4df8:	02 96       	adiw	r24, 0x02	; 2
    4dfa:	9a 8b       	std	Y+18, r25	; 0x12
    4dfc:	89 8b       	std	Y+17, r24	; 0x11
    4dfe:	89 89       	ldd	r24, Y+17	; 0x11
    4e00:	9a 89       	ldd	r25, Y+18	; 0x12
    4e02:	fc 01       	movw	r30, r24
    4e04:	84 91       	lpm	r24, Z
    4e06:	8b 8b       	std	Y+19, r24	; 0x13
    4e08:	8b 89       	ldd	r24, Y+19	; 0x13
    4e0a:	8c 8b       	std	Y+20, r24	; 0x14
    4e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e0e:	98 89       	ldd	r25, Y+16	; 0x10
    4e10:	03 96       	adiw	r24, 0x03	; 3
    4e12:	9e 8b       	std	Y+22, r25	; 0x16
    4e14:	8d 8b       	std	Y+21, r24	; 0x15
    4e16:	8d 89       	ldd	r24, Y+21	; 0x15
    4e18:	9e 89       	ldd	r25, Y+22	; 0x16
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	84 91       	lpm	r24, Z
    4e1e:	8f 8b       	std	Y+23, r24	; 0x17
    4e20:	8f 89       	ldd	r24, Y+23	; 0x17
    4e22:	88 8f       	std	Y+24, r24	; 0x18
    4e24:	8c 89       	ldd	r24, Y+20	; 0x14
    4e26:	88 23       	and	r24, r24
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <_ZN12Adafruit_GFX5writeEh+0x2d0>
    4e2a:	90 c0       	rjmp	.+288    	; 0x4f4c <_ZN12Adafruit_GFX5writeEh+0x3f0>
    4e2c:	88 8d       	ldd	r24, Y+24	; 0x18
    4e2e:	88 23       	and	r24, r24
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <_ZN12Adafruit_GFX5writeEh+0x2d8>
    4e32:	8c c0       	rjmp	.+280    	; 0x4f4c <_ZN12Adafruit_GFX5writeEh+0x3f0>
    4e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e36:	98 89       	ldd	r25, Y+16	; 0x10
    4e38:	05 96       	adiw	r24, 0x05	; 5
    4e3a:	9a 8f       	std	Y+26, r25	; 0x1a
    4e3c:	89 8f       	std	Y+25, r24	; 0x19
    4e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    4e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e42:	fc 01       	movw	r30, r24
    4e44:	84 91       	lpm	r24, Z
    4e46:	8b 8f       	std	Y+27, r24	; 0x1b
    4e48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e4a:	08 2e       	mov	r0, r24
    4e4c:	00 0c       	add	r0, r0
    4e4e:	99 0b       	sbc	r25, r25
    4e50:	9d 8f       	std	Y+29, r25	; 0x1d
    4e52:	8c 8f       	std	Y+28, r24	; 0x1c
    4e54:	8c a1       	ldd	r24, Y+36	; 0x24
    4e56:	9d a1       	ldd	r25, Y+37	; 0x25
    4e58:	fc 01       	movw	r30, r24
    4e5a:	86 89       	ldd	r24, Z+22	; 0x16
    4e5c:	88 23       	and	r24, r24
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <_ZN12Adafruit_GFX5writeEh+0x306>
    4e60:	51 c0       	rjmp	.+162    	; 0x4f04 <_ZN12Adafruit_GFX5writeEh+0x3a8>
    4e62:	8c a1       	ldd	r24, Y+36	; 0x24
    4e64:	9d a1       	ldd	r25, Y+37	; 0x25
    4e66:	fc 01       	movw	r30, r24
    4e68:	24 85       	ldd	r18, Z+12	; 0x0c
    4e6a:	35 85       	ldd	r19, Z+13	; 0x0d
    4e6c:	8c a1       	ldd	r24, Y+36	; 0x24
    4e6e:	9d a1       	ldd	r25, Y+37	; 0x25
    4e70:	fc 01       	movw	r30, r24
    4e72:	84 89       	ldd	r24, Z+20	; 0x14
    4e74:	68 2f       	mov	r22, r24
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	8c 89       	ldd	r24, Y+20	; 0x14
    4e7a:	48 2f       	mov	r20, r24
    4e7c:	50 e0       	ldi	r21, 0x00	; 0
    4e7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e82:	48 0f       	add	r20, r24
    4e84:	59 1f       	adc	r21, r25
    4e86:	64 9f       	mul	r22, r20
    4e88:	c0 01       	movw	r24, r0
    4e8a:	65 9f       	mul	r22, r21
    4e8c:	90 0d       	add	r25, r0
    4e8e:	74 9f       	mul	r23, r20
    4e90:	90 0d       	add	r25, r0
    4e92:	11 24       	eor	r1, r1
    4e94:	28 0f       	add	r18, r24
    4e96:	39 1f       	adc	r19, r25
    4e98:	8c a1       	ldd	r24, Y+36	; 0x24
    4e9a:	9d a1       	ldd	r25, Y+37	; 0x25
    4e9c:	fc 01       	movw	r30, r24
    4e9e:	80 85       	ldd	r24, Z+8	; 0x08
    4ea0:	91 85       	ldd	r25, Z+9	; 0x09
    4ea2:	82 17       	cp	r24, r18
    4ea4:	93 07       	cpc	r25, r19
    4ea6:	74 f5       	brge	.+92     	; 0x4f04 <_ZN12Adafruit_GFX5writeEh+0x3a8>
    4ea8:	8c a1       	ldd	r24, Y+36	; 0x24
    4eaa:	9d a1       	ldd	r25, Y+37	; 0x25
    4eac:	fc 01       	movw	r30, r24
    4eae:	15 86       	std	Z+13, r1	; 0x0d
    4eb0:	14 86       	std	Z+12, r1	; 0x0c
    4eb2:	8c a1       	ldd	r24, Y+36	; 0x24
    4eb4:	9d a1       	ldd	r25, Y+37	; 0x25
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	84 89       	ldd	r24, Z+20	; 0x14
    4eba:	48 2f       	mov	r20, r24
    4ebc:	50 e0       	ldi	r21, 0x00	; 0
    4ebe:	8c a1       	ldd	r24, Y+36	; 0x24
    4ec0:	9d a1       	ldd	r25, Y+37	; 0x25
    4ec2:	fc 01       	movw	r30, r24
    4ec4:	80 8d       	ldd	r24, Z+24	; 0x18
    4ec6:	91 8d       	ldd	r25, Z+25	; 0x19
    4ec8:	06 96       	adiw	r24, 0x06	; 6
    4eca:	9f 8f       	std	Y+31, r25	; 0x1f
    4ecc:	8e 8f       	std	Y+30, r24	; 0x1e
    4ece:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4ed0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	84 91       	lpm	r24, Z
    4ed6:	88 a3       	std	Y+32, r24	; 0x20
    4ed8:	88 a1       	ldd	r24, Y+32	; 0x20
    4eda:	28 2f       	mov	r18, r24
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	42 9f       	mul	r20, r18
    4ee0:	c0 01       	movw	r24, r0
    4ee2:	43 9f       	mul	r20, r19
    4ee4:	90 0d       	add	r25, r0
    4ee6:	52 9f       	mul	r21, r18
    4ee8:	90 0d       	add	r25, r0
    4eea:	11 24       	eor	r1, r1
    4eec:	2c a1       	ldd	r18, Y+36	; 0x24
    4eee:	3d a1       	ldd	r19, Y+37	; 0x25
    4ef0:	f9 01       	movw	r30, r18
    4ef2:	26 85       	ldd	r18, Z+14	; 0x0e
    4ef4:	37 85       	ldd	r19, Z+15	; 0x0f
    4ef6:	28 0f       	add	r18, r24
    4ef8:	39 1f       	adc	r19, r25
    4efa:	8c a1       	ldd	r24, Y+36	; 0x24
    4efc:	9d a1       	ldd	r25, Y+37	; 0x25
    4efe:	fc 01       	movw	r30, r24
    4f00:	37 87       	std	Z+15, r19	; 0x0f
    4f02:	26 87       	std	Z+14, r18	; 0x0e
    4f04:	8c a1       	ldd	r24, Y+36	; 0x24
    4f06:	9d a1       	ldd	r25, Y+37	; 0x25
    4f08:	fc 01       	movw	r30, r24
    4f0a:	a4 89       	ldd	r26, Z+20	; 0x14
    4f0c:	8c a1       	ldd	r24, Y+36	; 0x24
    4f0e:	9d a1       	ldd	r25, Y+37	; 0x25
    4f10:	fc 01       	movw	r30, r24
    4f12:	02 88       	ldd	r0, Z+18	; 0x12
    4f14:	f3 89       	ldd	r31, Z+19	; 0x13
    4f16:	e0 2d       	mov	r30, r0
    4f18:	f8 a7       	std	Y+40, r31	; 0x28
    4f1a:	ef a3       	std	Y+39, r30	; 0x27
    4f1c:	8c a1       	ldd	r24, Y+36	; 0x24
    4f1e:	9d a1       	ldd	r25, Y+37	; 0x25
    4f20:	fc 01       	movw	r30, r24
    4f22:	20 89       	ldd	r18, Z+16	; 0x10
    4f24:	31 89       	ldd	r19, Z+17	; 0x11
    4f26:	8c a1       	ldd	r24, Y+36	; 0x24
    4f28:	9d a1       	ldd	r25, Y+37	; 0x25
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	46 85       	ldd	r20, Z+14	; 0x0e
    4f2e:	57 85       	ldd	r21, Z+15	; 0x0f
    4f30:	8c a1       	ldd	r24, Y+36	; 0x24
    4f32:	9d a1       	ldd	r25, Y+37	; 0x25
    4f34:	fc 01       	movw	r30, r24
    4f36:	64 85       	ldd	r22, Z+12	; 0x0c
    4f38:	75 85       	ldd	r23, Z+13	; 0x0d
    4f3a:	8c a1       	ldd	r24, Y+36	; 0x24
    4f3c:	9d a1       	ldd	r25, Y+37	; 0x25
    4f3e:	ca 2e       	mov	r12, r26
    4f40:	ef a0       	ldd	r14, Y+39	; 0x27
    4f42:	f8 a4       	ldd	r15, Y+40	; 0x28
    4f44:	89 01       	movw	r16, r18
    4f46:	2e a1       	ldd	r18, Y+38	; 0x26
    4f48:	0e 94 a6 21 	call	0x434c	; 0x434c <_ZN12Adafruit_GFX8drawCharEiihjjh>
    4f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f4e:	98 89       	ldd	r25, Y+16	; 0x10
    4f50:	04 96       	adiw	r24, 0x04	; 4
    4f52:	9a a3       	std	Y+34, r25	; 0x22
    4f54:	89 a3       	std	Y+33, r24	; 0x21
    4f56:	89 a1       	ldd	r24, Y+33	; 0x21
    4f58:	9a a1       	ldd	r25, Y+34	; 0x22
    4f5a:	fc 01       	movw	r30, r24
    4f5c:	84 91       	lpm	r24, Z
    4f5e:	8b a3       	std	Y+35, r24	; 0x23
    4f60:	8b a1       	ldd	r24, Y+35	; 0x23
    4f62:	48 2f       	mov	r20, r24
    4f64:	50 e0       	ldi	r21, 0x00	; 0
    4f66:	8c a1       	ldd	r24, Y+36	; 0x24
    4f68:	9d a1       	ldd	r25, Y+37	; 0x25
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	84 89       	ldd	r24, Z+20	; 0x14
    4f6e:	28 2f       	mov	r18, r24
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	42 9f       	mul	r20, r18
    4f74:	c0 01       	movw	r24, r0
    4f76:	43 9f       	mul	r20, r19
    4f78:	90 0d       	add	r25, r0
    4f7a:	52 9f       	mul	r21, r18
    4f7c:	90 0d       	add	r25, r0
    4f7e:	11 24       	eor	r1, r1
    4f80:	2c a1       	ldd	r18, Y+36	; 0x24
    4f82:	3d a1       	ldd	r19, Y+37	; 0x25
    4f84:	f9 01       	movw	r30, r18
    4f86:	24 85       	ldd	r18, Z+12	; 0x0c
    4f88:	35 85       	ldd	r19, Z+13	; 0x0d
    4f8a:	28 0f       	add	r18, r24
    4f8c:	39 1f       	adc	r19, r25
    4f8e:	8c a1       	ldd	r24, Y+36	; 0x24
    4f90:	9d a1       	ldd	r25, Y+37	; 0x25
    4f92:	fc 01       	movw	r30, r24
    4f94:	35 87       	std	Z+13, r19	; 0x0d
    4f96:	24 87       	std	Z+12, r18	; 0x0c
    4f98:	81 e0       	ldi	r24, 0x01	; 1
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	a8 96       	adiw	r28, 0x28	; 40
    4f9e:	0f b6       	in	r0, 0x3f	; 63
    4fa0:	f8 94       	cli
    4fa2:	de bf       	out	0x3e, r29	; 62
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	cd bf       	out	0x3d, r28	; 61
    4fa8:	df 91       	pop	r29
    4faa:	cf 91       	pop	r28
    4fac:	1f 91       	pop	r17
    4fae:	0f 91       	pop	r16
    4fb0:	ff 90       	pop	r15
    4fb2:	ef 90       	pop	r14
    4fb4:	cf 90       	pop	r12
    4fb6:	08 95       	ret

00004fb8 <_ZN12Adafruit_GFX9setCursorEii>:
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	00 d0       	rcall	.+0      	; 0x4fbe <_ZN12Adafruit_GFX9setCursorEii+0x6>
    4fbe:	00 d0       	rcall	.+0      	; 0x4fc0 <_ZN12Adafruit_GFX9setCursorEii+0x8>
    4fc0:	00 d0       	rcall	.+0      	; 0x4fc2 <_ZN12Adafruit_GFX9setCursorEii+0xa>
    4fc2:	cd b7       	in	r28, 0x3d	; 61
    4fc4:	de b7       	in	r29, 0x3e	; 62
    4fc6:	9a 83       	std	Y+2, r25	; 0x02
    4fc8:	89 83       	std	Y+1, r24	; 0x01
    4fca:	7c 83       	std	Y+4, r23	; 0x04
    4fcc:	6b 83       	std	Y+3, r22	; 0x03
    4fce:	5e 83       	std	Y+6, r21	; 0x06
    4fd0:	4d 83       	std	Y+5, r20	; 0x05
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
    4fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    4fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    4fda:	fc 01       	movw	r30, r24
    4fdc:	35 87       	std	Z+13, r19	; 0x0d
    4fde:	24 87       	std	Z+12, r18	; 0x0c
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe4:	2d 81       	ldd	r18, Y+5	; 0x05
    4fe6:	3e 81       	ldd	r19, Y+6	; 0x06
    4fe8:	fc 01       	movw	r30, r24
    4fea:	37 87       	std	Z+15, r19	; 0x0f
    4fec:	26 87       	std	Z+14, r18	; 0x0e
    4fee:	00 00       	nop
    4ff0:	26 96       	adiw	r28, 0x06	; 6
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	de bf       	out	0x3e, r29	; 62
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	df 91       	pop	r29
    4ffe:	cf 91       	pop	r28
    5000:	08 95       	ret

00005002 <_ZN12Adafruit_GFX11setTextSizeEh>:
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
    5006:	00 d0       	rcall	.+0      	; 0x5008 <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    5008:	1f 92       	push	r1
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
    500e:	9a 83       	std	Y+2, r25	; 0x02
    5010:	89 83       	std	Y+1, r24	; 0x01
    5012:	6b 83       	std	Y+3, r22	; 0x03
    5014:	8b 81       	ldd	r24, Y+3	; 0x03
    5016:	88 23       	and	r24, r24
    5018:	11 f0       	breq	.+4      	; 0x501e <_ZN12Adafruit_GFX11setTextSizeEh+0x1c>
    501a:	2b 81       	ldd	r18, Y+3	; 0x03
    501c:	01 c0       	rjmp	.+2      	; 0x5020 <_ZN12Adafruit_GFX11setTextSizeEh+0x1e>
    501e:	21 e0       	ldi	r18, 0x01	; 1
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
    5024:	fc 01       	movw	r30, r24
    5026:	24 8b       	std	Z+20, r18	; 0x14
    5028:	00 00       	nop
    502a:	0f 90       	pop	r0
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	df 91       	pop	r29
    5032:	cf 91       	pop	r28
    5034:	08 95       	ret

00005036 <_ZN12Adafruit_GFX12setTextColorEj>:
    5036:	cf 93       	push	r28
    5038:	df 93       	push	r29
    503a:	00 d0       	rcall	.+0      	; 0x503c <_ZN12Adafruit_GFX12setTextColorEj+0x6>
    503c:	00 d0       	rcall	.+0      	; 0x503e <_ZN12Adafruit_GFX12setTextColorEj+0x8>
    503e:	cd b7       	in	r28, 0x3d	; 61
    5040:	de b7       	in	r29, 0x3e	; 62
    5042:	9a 83       	std	Y+2, r25	; 0x02
    5044:	89 83       	std	Y+1, r24	; 0x01
    5046:	7c 83       	std	Y+4, r23	; 0x04
    5048:	6b 83       	std	Y+3, r22	; 0x03
    504a:	89 81       	ldd	r24, Y+1	; 0x01
    504c:	9a 81       	ldd	r25, Y+2	; 0x02
    504e:	2b 81       	ldd	r18, Y+3	; 0x03
    5050:	3c 81       	ldd	r19, Y+4	; 0x04
    5052:	fc 01       	movw	r30, r24
    5054:	33 8b       	std	Z+19, r19	; 0x13
    5056:	22 8b       	std	Z+18, r18	; 0x12
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	9a 81       	ldd	r25, Y+2	; 0x02
    505c:	fc 01       	movw	r30, r24
    505e:	22 89       	ldd	r18, Z+18	; 0x12
    5060:	33 89       	ldd	r19, Z+19	; 0x13
    5062:	89 81       	ldd	r24, Y+1	; 0x01
    5064:	9a 81       	ldd	r25, Y+2	; 0x02
    5066:	fc 01       	movw	r30, r24
    5068:	31 8b       	std	Z+17, r19	; 0x11
    506a:	20 8b       	std	Z+16, r18	; 0x10
    506c:	00 00       	nop
    506e:	0f 90       	pop	r0
    5070:	0f 90       	pop	r0
    5072:	0f 90       	pop	r0
    5074:	0f 90       	pop	r0
    5076:	df 91       	pop	r29
    5078:	cf 91       	pop	r28
    507a:	08 95       	ret

0000507c <_ZNK12Adafruit_GFX11getRotationEv>:
    507c:	cf 93       	push	r28
    507e:	df 93       	push	r29
    5080:	00 d0       	rcall	.+0      	; 0x5082 <_ZNK12Adafruit_GFX11getRotationEv+0x6>
    5082:	cd b7       	in	r28, 0x3d	; 61
    5084:	de b7       	in	r29, 0x3e	; 62
    5086:	9a 83       	std	Y+2, r25	; 0x02
    5088:	89 83       	std	Y+1, r24	; 0x01
    508a:	89 81       	ldd	r24, Y+1	; 0x01
    508c:	9a 81       	ldd	r25, Y+2	; 0x02
    508e:	fc 01       	movw	r30, r24
    5090:	85 89       	ldd	r24, Z+21	; 0x15
    5092:	0f 90       	pop	r0
    5094:	0f 90       	pop	r0
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

0000509c <_ZN12Adafruit_GFX11setRotationEh>:
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	00 d0       	rcall	.+0      	; 0x50a2 <_ZN12Adafruit_GFX11setRotationEh+0x6>
    50a2:	1f 92       	push	r1
    50a4:	cd b7       	in	r28, 0x3d	; 61
    50a6:	de b7       	in	r29, 0x3e	; 62
    50a8:	9a 83       	std	Y+2, r25	; 0x02
    50aa:	89 83       	std	Y+1, r24	; 0x01
    50ac:	6b 83       	std	Y+3, r22	; 0x03
    50ae:	8b 81       	ldd	r24, Y+3	; 0x03
    50b0:	28 2f       	mov	r18, r24
    50b2:	23 70       	andi	r18, 0x03	; 3
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	9a 81       	ldd	r25, Y+2	; 0x02
    50b8:	fc 01       	movw	r30, r24
    50ba:	25 8b       	std	Z+21, r18	; 0x15
    50bc:	89 81       	ldd	r24, Y+1	; 0x01
    50be:	9a 81       	ldd	r25, Y+2	; 0x02
    50c0:	fc 01       	movw	r30, r24
    50c2:	85 89       	ldd	r24, Z+21	; 0x15
    50c4:	88 2f       	mov	r24, r24
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	81 30       	cpi	r24, 0x01	; 1
    50ca:	91 05       	cpc	r25, r1
    50cc:	09 f1       	breq	.+66     	; 0x5110 <_ZN12Adafruit_GFX11setRotationEh+0x74>
    50ce:	82 30       	cpi	r24, 0x02	; 2
    50d0:	91 05       	cpc	r25, r1
    50d2:	1c f4       	brge	.+6      	; 0x50da <_ZN12Adafruit_GFX11setRotationEh+0x3e>
    50d4:	89 2b       	or	r24, r25
    50d6:	39 f0       	breq	.+14     	; 0x50e6 <_ZN12Adafruit_GFX11setRotationEh+0x4a>
    50d8:	30 c0       	rjmp	.+96     	; 0x513a <_ZN12Adafruit_GFX11setRotationEh+0x9e>
    50da:	82 30       	cpi	r24, 0x02	; 2
    50dc:	91 05       	cpc	r25, r1
    50de:	19 f0       	breq	.+6      	; 0x50e6 <_ZN12Adafruit_GFX11setRotationEh+0x4a>
    50e0:	03 97       	sbiw	r24, 0x03	; 3
    50e2:	b1 f0       	breq	.+44     	; 0x5110 <_ZN12Adafruit_GFX11setRotationEh+0x74>
    50e4:	2a c0       	rjmp	.+84     	; 0x513a <_ZN12Adafruit_GFX11setRotationEh+0x9e>
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	9a 81       	ldd	r25, Y+2	; 0x02
    50ea:	fc 01       	movw	r30, r24
    50ec:	24 81       	ldd	r18, Z+4	; 0x04
    50ee:	35 81       	ldd	r19, Z+5	; 0x05
    50f0:	89 81       	ldd	r24, Y+1	; 0x01
    50f2:	9a 81       	ldd	r25, Y+2	; 0x02
    50f4:	fc 01       	movw	r30, r24
    50f6:	31 87       	std	Z+9, r19	; 0x09
    50f8:	20 87       	std	Z+8, r18	; 0x08
    50fa:	89 81       	ldd	r24, Y+1	; 0x01
    50fc:	9a 81       	ldd	r25, Y+2	; 0x02
    50fe:	fc 01       	movw	r30, r24
    5100:	26 81       	ldd	r18, Z+6	; 0x06
    5102:	37 81       	ldd	r19, Z+7	; 0x07
    5104:	89 81       	ldd	r24, Y+1	; 0x01
    5106:	9a 81       	ldd	r25, Y+2	; 0x02
    5108:	fc 01       	movw	r30, r24
    510a:	33 87       	std	Z+11, r19	; 0x0b
    510c:	22 87       	std	Z+10, r18	; 0x0a
    510e:	15 c0       	rjmp	.+42     	; 0x513a <_ZN12Adafruit_GFX11setRotationEh+0x9e>
    5110:	89 81       	ldd	r24, Y+1	; 0x01
    5112:	9a 81       	ldd	r25, Y+2	; 0x02
    5114:	fc 01       	movw	r30, r24
    5116:	26 81       	ldd	r18, Z+6	; 0x06
    5118:	37 81       	ldd	r19, Z+7	; 0x07
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	9a 81       	ldd	r25, Y+2	; 0x02
    511e:	fc 01       	movw	r30, r24
    5120:	31 87       	std	Z+9, r19	; 0x09
    5122:	20 87       	std	Z+8, r18	; 0x08
    5124:	89 81       	ldd	r24, Y+1	; 0x01
    5126:	9a 81       	ldd	r25, Y+2	; 0x02
    5128:	fc 01       	movw	r30, r24
    512a:	24 81       	ldd	r18, Z+4	; 0x04
    512c:	35 81       	ldd	r19, Z+5	; 0x05
    512e:	89 81       	ldd	r24, Y+1	; 0x01
    5130:	9a 81       	ldd	r25, Y+2	; 0x02
    5132:	fc 01       	movw	r30, r24
    5134:	33 87       	std	Z+11, r19	; 0x0b
    5136:	22 87       	std	Z+10, r18	; 0x0a
    5138:	00 00       	nop
    513a:	00 00       	nop
    513c:	0f 90       	pop	r0
    513e:	0f 90       	pop	r0
    5140:	0f 90       	pop	r0
    5142:	df 91       	pop	r29
    5144:	cf 91       	pop	r28
    5146:	08 95       	ret

00005148 <_ZNK12Adafruit_GFX5widthEv>:
/*!
    @brief      Get width of the display, accounting for the current rotation
    @returns    Width in pixels
*/
/**************************************************************************/
int16_t Adafruit_GFX::width(void) const {
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	00 d0       	rcall	.+0      	; 0x514e <_ZNK12Adafruit_GFX5widthEv+0x6>
    514e:	cd b7       	in	r28, 0x3d	; 61
    5150:	de b7       	in	r29, 0x3e	; 62
    5152:	9a 83       	std	Y+2, r25	; 0x02
    5154:	89 83       	std	Y+1, r24	; 0x01
    return _width;
    5156:	89 81       	ldd	r24, Y+1	; 0x01
    5158:	9a 81       	ldd	r25, Y+2	; 0x02
    515a:	fc 01       	movw	r30, r24
    515c:	80 85       	ldd	r24, Z+8	; 0x08
    515e:	91 85       	ldd	r25, Z+9	; 0x09
}
    5160:	0f 90       	pop	r0
    5162:	0f 90       	pop	r0
    5164:	df 91       	pop	r29
    5166:	cf 91       	pop	r28
    5168:	08 95       	ret

0000516a <_ZNK12Adafruit_GFX6heightEv>:
/*!
    @brief      Get height of the display, accounting for the current rotation
    @returns    Height in pixels
*/
/**************************************************************************/
int16_t Adafruit_GFX::height(void) const {
    516a:	cf 93       	push	r28
    516c:	df 93       	push	r29
    516e:	00 d0       	rcall	.+0      	; 0x5170 <_ZNK12Adafruit_GFX6heightEv+0x6>
    5170:	cd b7       	in	r28, 0x3d	; 61
    5172:	de b7       	in	r29, 0x3e	; 62
    5174:	9a 83       	std	Y+2, r25	; 0x02
    5176:	89 83       	std	Y+1, r24	; 0x01
    return _height;
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	9a 81       	ldd	r25, Y+2	; 0x02
    517c:	fc 01       	movw	r30, r24
    517e:	82 85       	ldd	r24, Z+10	; 0x0a
    5180:	93 85       	ldd	r25, Z+11	; 0x0b
}
    5182:	0f 90       	pop	r0
    5184:	0f 90       	pop	r0
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	08 95       	ret

0000518c <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    518c:	cf 93       	push	r28
    518e:	df 93       	push	r29
    5190:	00 d0       	rcall	.+0      	; 0x5192 <_ZN12Adafruit_GFX13invertDisplayEb+0x6>
    5192:	1f 92       	push	r1
    5194:	cd b7       	in	r28, 0x3d	; 61
    5196:	de b7       	in	r29, 0x3e	; 62
    5198:	9a 83       	std	Y+2, r25	; 0x02
    519a:	89 83       	std	Y+1, r24	; 0x01
    519c:	6b 83       	std	Y+3, r22	; 0x03
    // Do nothing, must be subclassed if supported by hardware
}
    519e:	00 00       	nop
    51a0:	0f 90       	pop	r0
    51a2:	0f 90       	pop	r0
    51a4:	0f 90       	pop	r0
    51a6:	df 91       	pop	r29
    51a8:	cf 91       	pop	r28
    51aa:	08 95       	ret

000051ac <_ZN7TwoWire5writeEi>:
  }
  // the range of contrast to too small to be really useful
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}
    51ac:	cf 93       	push	r28
    51ae:	df 93       	push	r29
    51b0:	00 d0       	rcall	.+0      	; 0x51b2 <_ZN7TwoWire5writeEi+0x6>
    51b2:	00 d0       	rcall	.+0      	; 0x51b4 <_ZN7TwoWire5writeEi+0x8>
    51b4:	cd b7       	in	r28, 0x3d	; 61
    51b6:	de b7       	in	r29, 0x3e	; 62
    51b8:	9a 83       	std	Y+2, r25	; 0x02
    51ba:	89 83       	std	Y+1, r24	; 0x01
    51bc:	7c 83       	std	Y+4, r23	; 0x04
    51be:	6b 83       	std	Y+3, r22	; 0x03
    51c0:	89 81       	ldd	r24, Y+1	; 0x01
    51c2:	9a 81       	ldd	r25, Y+2	; 0x02
    51c4:	fc 01       	movw	r30, r24
    51c6:	80 81       	ld	r24, Z
    51c8:	91 81       	ldd	r25, Z+1	; 0x01
    51ca:	fc 01       	movw	r30, r24
    51cc:	20 81       	ld	r18, Z
    51ce:	31 81       	ldd	r19, Z+1	; 0x01
    51d0:	4b 81       	ldd	r20, Y+3	; 0x03
    51d2:	89 81       	ldd	r24, Y+1	; 0x01
    51d4:	9a 81       	ldd	r25, Y+2	; 0x02
    51d6:	64 2f       	mov	r22, r20
    51d8:	f9 01       	movw	r30, r18
    51da:	09 95       	icall
    51dc:	0f 90       	pop	r0
    51de:	0f 90       	pop	r0
    51e0:	0f 90       	pop	r0
    51e2:	0f 90       	pop	r0
    51e4:	df 91       	pop	r29
    51e6:	cf 91       	pop	r28
    51e8:	08 95       	ret

000051ea <_ZN11SPISettingsC1Emhh>:
    51ea:	0f 93       	push	r16
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
    51f0:	cd b7       	in	r28, 0x3d	; 61
    51f2:	de b7       	in	r29, 0x3e	; 62
    51f4:	28 97       	sbiw	r28, 0x08	; 8
    51f6:	0f b6       	in	r0, 0x3f	; 63
    51f8:	f8 94       	cli
    51fa:	de bf       	out	0x3e, r29	; 62
    51fc:	0f be       	out	0x3f, r0	; 63
    51fe:	cd bf       	out	0x3d, r28	; 61
    5200:	9a 83       	std	Y+2, r25	; 0x02
    5202:	89 83       	std	Y+1, r24	; 0x01
    5204:	4b 83       	std	Y+3, r20	; 0x03
    5206:	5c 83       	std	Y+4, r21	; 0x04
    5208:	6d 83       	std	Y+5, r22	; 0x05
    520a:	7e 83       	std	Y+6, r23	; 0x06
    520c:	2f 83       	std	Y+7, r18	; 0x07
    520e:	08 87       	std	Y+8, r16	; 0x08
    5210:	8b 81       	ldd	r24, Y+3	; 0x03
    5212:	9c 81       	ldd	r25, Y+4	; 0x04
    5214:	ad 81       	ldd	r26, Y+5	; 0x05
    5216:	be 81       	ldd	r27, Y+6	; 0x06
    5218:	e9 81       	ldd	r30, Y+1	; 0x01
    521a:	fa 81       	ldd	r31, Y+2	; 0x02
    521c:	08 85       	ldd	r16, Y+8	; 0x08
    521e:	2f 81       	ldd	r18, Y+7	; 0x07
    5220:	ac 01       	movw	r20, r24
    5222:	bd 01       	movw	r22, r26
    5224:	cf 01       	movw	r24, r30
    5226:	0e 94 20 29 	call	0x5240	; 0x5240 <_ZN11SPISettings16init_MightInlineEmhh>
    522a:	00 00       	nop
    522c:	28 96       	adiw	r28, 0x08	; 8
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	f8 94       	cli
    5232:	de bf       	out	0x3e, r29	; 62
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	cd bf       	out	0x3d, r28	; 61
    5238:	df 91       	pop	r29
    523a:	cf 91       	pop	r28
    523c:	0f 91       	pop	r16
    523e:	08 95       	ret

00005240 <_ZN11SPISettings16init_MightInlineEmhh>:
    5240:	0f 93       	push	r16
    5242:	cf 93       	push	r28
    5244:	df 93       	push	r29
    5246:	cd b7       	in	r28, 0x3d	; 61
    5248:	de b7       	in	r29, 0x3e	; 62
    524a:	65 97       	sbiw	r28, 0x15	; 21
    524c:	0f b6       	in	r0, 0x3f	; 63
    524e:	f8 94       	cli
    5250:	de bf       	out	0x3e, r29	; 62
    5252:	0f be       	out	0x3f, r0	; 63
    5254:	cd bf       	out	0x3d, r28	; 61
    5256:	9f 87       	std	Y+15, r25	; 0x0f
    5258:	8e 87       	std	Y+14, r24	; 0x0e
    525a:	48 8b       	std	Y+16, r20	; 0x10
    525c:	59 8b       	std	Y+17, r21	; 0x11
    525e:	6a 8b       	std	Y+18, r22	; 0x12
    5260:	7b 8b       	std	Y+19, r23	; 0x13
    5262:	2c 8b       	std	Y+20, r18	; 0x14
    5264:	0d 8b       	std	Y+21, r16	; 0x15
    5266:	8e 85       	ldd	r24, Y+14	; 0x0e
    5268:	9f 85       	ldd	r25, Y+15	; 0x0f
    526a:	9a 83       	std	Y+2, r25	; 0x02
    526c:	89 83       	std	Y+1, r24	; 0x01
    526e:	88 89       	ldd	r24, Y+16	; 0x10
    5270:	99 89       	ldd	r25, Y+17	; 0x11
    5272:	aa 89       	ldd	r26, Y+18	; 0x12
    5274:	bb 89       	ldd	r27, Y+19	; 0x13
    5276:	8b 83       	std	Y+3, r24	; 0x03
    5278:	9c 83       	std	Y+4, r25	; 0x04
    527a:	ad 83       	std	Y+5, r26	; 0x05
    527c:	be 83       	std	Y+6, r27	; 0x06
    527e:	8c 89       	ldd	r24, Y+20	; 0x14
    5280:	8f 83       	std	Y+7, r24	; 0x07
    5282:	8d 89       	ldd	r24, Y+21	; 0x15
    5284:	88 87       	std	Y+8, r24	; 0x08
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	92 e1       	ldi	r25, 0x12	; 18
    528a:	aa e7       	ldi	r26, 0x7A	; 122
    528c:	b0 e0       	ldi	r27, 0x00	; 0
    528e:	89 87       	std	Y+9, r24	; 0x09
    5290:	9a 87       	std	Y+10, r25	; 0x0a
    5292:	ab 87       	std	Y+11, r26	; 0x0b
    5294:	bc 87       	std	Y+12, r27	; 0x0c
    5296:	1d 86       	std	Y+13, r1	; 0x0d
    5298:	8d 85       	ldd	r24, Y+13	; 0x0d
    529a:	86 30       	cpi	r24, 0x06	; 6
    529c:	e8 f4       	brcc	.+58     	; 0x52d8 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    529e:	2b 81       	ldd	r18, Y+3	; 0x03
    52a0:	3c 81       	ldd	r19, Y+4	; 0x04
    52a2:	4d 81       	ldd	r20, Y+5	; 0x05
    52a4:	5e 81       	ldd	r21, Y+6	; 0x06
    52a6:	89 85       	ldd	r24, Y+9	; 0x09
    52a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    52ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    52ae:	28 17       	cp	r18, r24
    52b0:	39 07       	cpc	r19, r25
    52b2:	4a 07       	cpc	r20, r26
    52b4:	5b 07       	cpc	r21, r27
    52b6:	80 f4       	brcc	.+32     	; 0x52d8 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    52b8:	89 85       	ldd	r24, Y+9	; 0x09
    52ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    52bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    52be:	bc 85       	ldd	r27, Y+12	; 0x0c
    52c0:	b6 95       	lsr	r27
    52c2:	a7 95       	ror	r26
    52c4:	97 95       	ror	r25
    52c6:	87 95       	ror	r24
    52c8:	89 87       	std	Y+9, r24	; 0x09
    52ca:	9a 87       	std	Y+10, r25	; 0x0a
    52cc:	ab 87       	std	Y+11, r26	; 0x0b
    52ce:	bc 87       	std	Y+12, r27	; 0x0c
    52d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    52d2:	8f 5f       	subi	r24, 0xFF	; 255
    52d4:	8d 87       	std	Y+13, r24	; 0x0d
    52d6:	e0 cf       	rjmp	.-64     	; 0x5298 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    52d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52da:	86 30       	cpi	r24, 0x06	; 6
    52dc:	11 f4       	brne	.+4      	; 0x52e2 <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    52de:	87 e0       	ldi	r24, 0x07	; 7
    52e0:	8d 87       	std	Y+13, r24	; 0x0d
    52e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    52e4:	81 e0       	ldi	r24, 0x01	; 1
    52e6:	89 27       	eor	r24, r25
    52e8:	8d 87       	std	Y+13, r24	; 0x0d
    52ea:	8f 81       	ldd	r24, Y+7	; 0x07
    52ec:	88 23       	and	r24, r24
    52ee:	11 f4       	brne	.+4      	; 0x52f4 <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    52f0:	80 e7       	ldi	r24, 0x70	; 112
    52f2:	01 c0       	rjmp	.+2      	; 0x52f6 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    52f4:	80 e5       	ldi	r24, 0x50	; 80
    52f6:	98 85       	ldd	r25, Y+8	; 0x08
    52f8:	9c 70       	andi	r25, 0x0C	; 12
    52fa:	29 2f       	mov	r18, r25
    52fc:	28 2b       	or	r18, r24
    52fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5300:	88 2f       	mov	r24, r24
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	95 95       	asr	r25
    5306:	87 95       	ror	r24
    5308:	83 70       	andi	r24, 0x03	; 3
    530a:	82 2b       	or	r24, r18
    530c:	28 2f       	mov	r18, r24
    530e:	89 81       	ldd	r24, Y+1	; 0x01
    5310:	9a 81       	ldd	r25, Y+2	; 0x02
    5312:	fc 01       	movw	r30, r24
    5314:	20 83       	st	Z, r18
    5316:	8d 85       	ldd	r24, Y+13	; 0x0d
    5318:	28 2f       	mov	r18, r24
    531a:	21 70       	andi	r18, 0x01	; 1
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	9a 81       	ldd	r25, Y+2	; 0x02
    5320:	fc 01       	movw	r30, r24
    5322:	21 83       	std	Z+1, r18	; 0x01
    5324:	00 00       	nop
    5326:	65 96       	adiw	r28, 0x15	; 21
    5328:	0f b6       	in	r0, 0x3f	; 63
    532a:	f8 94       	cli
    532c:	de bf       	out	0x3e, r29	; 62
    532e:	0f be       	out	0x3f, r0	; 63
    5330:	cd bf       	out	0x3d, r28	; 61
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	0f 91       	pop	r16
    5338:	08 95       	ret

0000533a <_ZN16Adafruit_SSD13069drawPixelEiij>:
    533a:	cf 93       	push	r28
    533c:	df 93       	push	r29
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	2c 97       	sbiw	r28, 0x0c	; 12
    5344:	0f b6       	in	r0, 0x3f	; 63
    5346:	f8 94       	cli
    5348:	de bf       	out	0x3e, r29	; 62
    534a:	0f be       	out	0x3f, r0	; 63
    534c:	cd bf       	out	0x3d, r28	; 61
    534e:	9e 83       	std	Y+6, r25	; 0x06
    5350:	8d 83       	std	Y+5, r24	; 0x05
    5352:	78 87       	std	Y+8, r23	; 0x08
    5354:	6f 83       	std	Y+7, r22	; 0x07
    5356:	5a 87       	std	Y+10, r21	; 0x0a
    5358:	49 87       	std	Y+9, r20	; 0x09
    535a:	3c 87       	std	Y+12, r19	; 0x0c
    535c:	2b 87       	std	Y+11, r18	; 0x0b
    535e:	8f 81       	ldd	r24, Y+7	; 0x07
    5360:	98 85       	ldd	r25, Y+8	; 0x08
    5362:	99 23       	and	r25, r25
    5364:	c4 f0       	brlt	.+48     	; 0x5396 <_ZN16Adafruit_SSD13069drawPixelEiij+0x5c>
    5366:	8d 81       	ldd	r24, Y+5	; 0x05
    5368:	9e 81       	ldd	r25, Y+6	; 0x06
    536a:	0e 94 a4 28 	call	0x5148	; 0x5148 <_ZNK12Adafruit_GFX5widthEv>
    536e:	9c 01       	movw	r18, r24
    5370:	8f 81       	ldd	r24, Y+7	; 0x07
    5372:	98 85       	ldd	r25, Y+8	; 0x08
    5374:	82 17       	cp	r24, r18
    5376:	93 07       	cpc	r25, r19
    5378:	74 f4       	brge	.+28     	; 0x5396 <_ZN16Adafruit_SSD13069drawPixelEiij+0x5c>
    537a:	89 85       	ldd	r24, Y+9	; 0x09
    537c:	9a 85       	ldd	r25, Y+10	; 0x0a
    537e:	99 23       	and	r25, r25
    5380:	54 f0       	brlt	.+20     	; 0x5396 <_ZN16Adafruit_SSD13069drawPixelEiij+0x5c>
    5382:	8d 81       	ldd	r24, Y+5	; 0x05
    5384:	9e 81       	ldd	r25, Y+6	; 0x06
    5386:	0e 94 b5 28 	call	0x516a	; 0x516a <_ZNK12Adafruit_GFX6heightEv>
    538a:	9c 01       	movw	r18, r24
    538c:	89 85       	ldd	r24, Y+9	; 0x09
    538e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5390:	82 17       	cp	r24, r18
    5392:	93 07       	cpc	r25, r19
    5394:	14 f0       	brlt	.+4      	; 0x539a <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	01 c0       	rjmp	.+2      	; 0x539c <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	88 23       	and	r24, r24
    539e:	09 f0       	breq	.+2      	; 0x53a2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x68>
    53a0:	18 c1       	rjmp	.+560    	; 0x55d2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x298>
    53a2:	8d 81       	ldd	r24, Y+5	; 0x05
    53a4:	9e 81       	ldd	r25, Y+6	; 0x06
    53a6:	0e 94 3e 28 	call	0x507c	; 0x507c <_ZNK12Adafruit_GFX11getRotationEv>
    53aa:	88 2f       	mov	r24, r24
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	82 30       	cpi	r24, 0x02	; 2
    53b0:	91 05       	cpc	r25, r1
    53b2:	09 f1       	breq	.+66     	; 0x53f6 <_ZN16Adafruit_SSD13069drawPixelEiij+0xbc>
    53b4:	83 30       	cpi	r24, 0x03	; 3
    53b6:	91 05       	cpc	r25, r1
    53b8:	d9 f1       	breq	.+118    	; 0x5430 <_ZN16Adafruit_SSD13069drawPixelEiij+0xf6>
    53ba:	01 97       	sbiw	r24, 0x01	; 1
    53bc:	09 f0       	breq	.+2      	; 0x53c0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x86>
    53be:	53 c0       	rjmp	.+166    	; 0x5466 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12c>
    53c0:	8f 81       	ldd	r24, Y+7	; 0x07
    53c2:	98 85       	ldd	r25, Y+8	; 0x08
    53c4:	9a 83       	std	Y+2, r25	; 0x02
    53c6:	89 83       	std	Y+1, r24	; 0x01
    53c8:	89 85       	ldd	r24, Y+9	; 0x09
    53ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    53cc:	98 87       	std	Y+8, r25	; 0x08
    53ce:	8f 83       	std	Y+7, r24	; 0x07
    53d0:	89 81       	ldd	r24, Y+1	; 0x01
    53d2:	9a 81       	ldd	r25, Y+2	; 0x02
    53d4:	9a 87       	std	Y+10, r25	; 0x0a
    53d6:	89 87       	std	Y+9, r24	; 0x09
    53d8:	8d 81       	ldd	r24, Y+5	; 0x05
    53da:	9e 81       	ldd	r25, Y+6	; 0x06
    53dc:	fc 01       	movw	r30, r24
    53de:	24 81       	ldd	r18, Z+4	; 0x04
    53e0:	35 81       	ldd	r19, Z+5	; 0x05
    53e2:	8f 81       	ldd	r24, Y+7	; 0x07
    53e4:	98 85       	ldd	r25, Y+8	; 0x08
    53e6:	a9 01       	movw	r20, r18
    53e8:	48 1b       	sub	r20, r24
    53ea:	59 0b       	sbc	r21, r25
    53ec:	ca 01       	movw	r24, r20
    53ee:	01 97       	sbiw	r24, 0x01	; 1
    53f0:	98 87       	std	Y+8, r25	; 0x08
    53f2:	8f 83       	std	Y+7, r24	; 0x07
    53f4:	38 c0       	rjmp	.+112    	; 0x5466 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12c>
    53f6:	8d 81       	ldd	r24, Y+5	; 0x05
    53f8:	9e 81       	ldd	r25, Y+6	; 0x06
    53fa:	fc 01       	movw	r30, r24
    53fc:	24 81       	ldd	r18, Z+4	; 0x04
    53fe:	35 81       	ldd	r19, Z+5	; 0x05
    5400:	8f 81       	ldd	r24, Y+7	; 0x07
    5402:	98 85       	ldd	r25, Y+8	; 0x08
    5404:	a9 01       	movw	r20, r18
    5406:	48 1b       	sub	r20, r24
    5408:	59 0b       	sbc	r21, r25
    540a:	ca 01       	movw	r24, r20
    540c:	01 97       	sbiw	r24, 0x01	; 1
    540e:	98 87       	std	Y+8, r25	; 0x08
    5410:	8f 83       	std	Y+7, r24	; 0x07
    5412:	8d 81       	ldd	r24, Y+5	; 0x05
    5414:	9e 81       	ldd	r25, Y+6	; 0x06
    5416:	fc 01       	movw	r30, r24
    5418:	26 81       	ldd	r18, Z+6	; 0x06
    541a:	37 81       	ldd	r19, Z+7	; 0x07
    541c:	89 85       	ldd	r24, Y+9	; 0x09
    541e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5420:	a9 01       	movw	r20, r18
    5422:	48 1b       	sub	r20, r24
    5424:	59 0b       	sbc	r21, r25
    5426:	ca 01       	movw	r24, r20
    5428:	01 97       	sbiw	r24, 0x01	; 1
    542a:	9a 87       	std	Y+10, r25	; 0x0a
    542c:	89 87       	std	Y+9, r24	; 0x09
    542e:	1b c0       	rjmp	.+54     	; 0x5466 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12c>
    5430:	8f 81       	ldd	r24, Y+7	; 0x07
    5432:	98 85       	ldd	r25, Y+8	; 0x08
    5434:	9c 83       	std	Y+4, r25	; 0x04
    5436:	8b 83       	std	Y+3, r24	; 0x03
    5438:	89 85       	ldd	r24, Y+9	; 0x09
    543a:	9a 85       	ldd	r25, Y+10	; 0x0a
    543c:	98 87       	std	Y+8, r25	; 0x08
    543e:	8f 83       	std	Y+7, r24	; 0x07
    5440:	8b 81       	ldd	r24, Y+3	; 0x03
    5442:	9c 81       	ldd	r25, Y+4	; 0x04
    5444:	9a 87       	std	Y+10, r25	; 0x0a
    5446:	89 87       	std	Y+9, r24	; 0x09
    5448:	8d 81       	ldd	r24, Y+5	; 0x05
    544a:	9e 81       	ldd	r25, Y+6	; 0x06
    544c:	fc 01       	movw	r30, r24
    544e:	26 81       	ldd	r18, Z+6	; 0x06
    5450:	37 81       	ldd	r19, Z+7	; 0x07
    5452:	89 85       	ldd	r24, Y+9	; 0x09
    5454:	9a 85       	ldd	r25, Y+10	; 0x0a
    5456:	a9 01       	movw	r20, r18
    5458:	48 1b       	sub	r20, r24
    545a:	59 0b       	sbc	r21, r25
    545c:	ca 01       	movw	r24, r20
    545e:	01 97       	sbiw	r24, 0x01	; 1
    5460:	9a 87       	std	Y+10, r25	; 0x0a
    5462:	89 87       	std	Y+9, r24	; 0x09
    5464:	00 00       	nop
    5466:	8b 85       	ldd	r24, Y+11	; 0x0b
    5468:	9c 85       	ldd	r25, Y+12	; 0x0c
    546a:	81 30       	cpi	r24, 0x01	; 1
    546c:	91 05       	cpc	r25, r1
    546e:	39 f0       	breq	.+14     	; 0x547e <_ZN16Adafruit_SSD13069drawPixelEiij+0x144>
    5470:	81 30       	cpi	r24, 0x01	; 1
    5472:	91 05       	cpc	r25, r1
    5474:	e0 f1       	brcs	.+120    	; 0x54ee <_ZN16Adafruit_SSD13069drawPixelEiij+0x1b4>
    5476:	02 97       	sbiw	r24, 0x02	; 2
    5478:	09 f4       	brne	.+2      	; 0x547c <_ZN16Adafruit_SSD13069drawPixelEiij+0x142>
    547a:	72 c0       	rjmp	.+228    	; 0x5560 <_ZN16Adafruit_SSD13069drawPixelEiij+0x226>
    547c:	ab c0       	rjmp	.+342    	; 0x55d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x29a>
    547e:	89 85       	ldd	r24, Y+9	; 0x09
    5480:	9a 85       	ldd	r25, Y+10	; 0x0a
    5482:	99 23       	and	r25, r25
    5484:	0c f4       	brge	.+2      	; 0x5488 <_ZN16Adafruit_SSD13069drawPixelEiij+0x14e>
    5486:	07 96       	adiw	r24, 0x07	; 7
    5488:	95 95       	asr	r25
    548a:	87 95       	ror	r24
    548c:	95 95       	asr	r25
    548e:	87 95       	ror	r24
    5490:	95 95       	asr	r25
    5492:	87 95       	ror	r24
    5494:	ac 01       	movw	r20, r24
    5496:	56 95       	lsr	r21
    5498:	54 2f       	mov	r21, r20
    549a:	44 27       	eor	r20, r20
    549c:	57 95       	ror	r21
    549e:	47 95       	ror	r20
    54a0:	2f 81       	ldd	r18, Y+7	; 0x07
    54a2:	38 85       	ldd	r19, Y+8	; 0x08
    54a4:	24 0f       	add	r18, r20
    54a6:	35 1f       	adc	r19, r21
    54a8:	ac 01       	movw	r20, r24
    54aa:	56 95       	lsr	r21
    54ac:	54 2f       	mov	r21, r20
    54ae:	44 27       	eor	r20, r20
    54b0:	57 95       	ror	r21
    54b2:	47 95       	ror	r20
    54b4:	8f 81       	ldd	r24, Y+7	; 0x07
    54b6:	98 85       	ldd	r25, Y+8	; 0x08
    54b8:	84 0f       	add	r24, r20
    54ba:	95 1f       	adc	r25, r21
    54bc:	8a 5e       	subi	r24, 0xEA	; 234
    54be:	9e 4f       	sbci	r25, 0xFE	; 254
    54c0:	fc 01       	movw	r30, r24
    54c2:	80 81       	ld	r24, Z
    54c4:	68 2f       	mov	r22, r24
    54c6:	89 85       	ldd	r24, Y+9	; 0x09
    54c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ca:	ac 01       	movw	r20, r24
    54cc:	47 70       	andi	r20, 0x07	; 7
    54ce:	55 27       	eor	r21, r21
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	02 c0       	rjmp	.+4      	; 0x54da <_ZN16Adafruit_SSD13069drawPixelEiij+0x1a0>
    54d6:	88 0f       	add	r24, r24
    54d8:	99 1f       	adc	r25, r25
    54da:	4a 95       	dec	r20
    54dc:	e2 f7       	brpl	.-8      	; 0x54d6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x19c>
    54de:	86 2b       	or	r24, r22
    54e0:	48 2f       	mov	r20, r24
    54e2:	c9 01       	movw	r24, r18
    54e4:	8a 5e       	subi	r24, 0xEA	; 234
    54e6:	9e 4f       	sbci	r25, 0xFE	; 254
    54e8:	fc 01       	movw	r30, r24
    54ea:	40 83       	st	Z, r20
    54ec:	73 c0       	rjmp	.+230    	; 0x55d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x29a>
    54ee:	89 85       	ldd	r24, Y+9	; 0x09
    54f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f2:	99 23       	and	r25, r25
    54f4:	0c f4       	brge	.+2      	; 0x54f8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x1be>
    54f6:	07 96       	adiw	r24, 0x07	; 7
    54f8:	95 95       	asr	r25
    54fa:	87 95       	ror	r24
    54fc:	95 95       	asr	r25
    54fe:	87 95       	ror	r24
    5500:	95 95       	asr	r25
    5502:	87 95       	ror	r24
    5504:	ac 01       	movw	r20, r24
    5506:	56 95       	lsr	r21
    5508:	54 2f       	mov	r21, r20
    550a:	44 27       	eor	r20, r20
    550c:	57 95       	ror	r21
    550e:	47 95       	ror	r20
    5510:	2f 81       	ldd	r18, Y+7	; 0x07
    5512:	38 85       	ldd	r19, Y+8	; 0x08
    5514:	24 0f       	add	r18, r20
    5516:	35 1f       	adc	r19, r21
    5518:	ac 01       	movw	r20, r24
    551a:	56 95       	lsr	r21
    551c:	54 2f       	mov	r21, r20
    551e:	44 27       	eor	r20, r20
    5520:	57 95       	ror	r21
    5522:	47 95       	ror	r20
    5524:	8f 81       	ldd	r24, Y+7	; 0x07
    5526:	98 85       	ldd	r25, Y+8	; 0x08
    5528:	84 0f       	add	r24, r20
    552a:	95 1f       	adc	r25, r21
    552c:	8a 5e       	subi	r24, 0xEA	; 234
    552e:	9e 4f       	sbci	r25, 0xFE	; 254
    5530:	fc 01       	movw	r30, r24
    5532:	80 81       	ld	r24, Z
    5534:	68 2f       	mov	r22, r24
    5536:	89 85       	ldd	r24, Y+9	; 0x09
    5538:	9a 85       	ldd	r25, Y+10	; 0x0a
    553a:	ac 01       	movw	r20, r24
    553c:	47 70       	andi	r20, 0x07	; 7
    553e:	55 27       	eor	r21, r21
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	02 c0       	rjmp	.+4      	; 0x554a <_ZN16Adafruit_SSD13069drawPixelEiij+0x210>
    5546:	88 0f       	add	r24, r24
    5548:	99 1f       	adc	r25, r25
    554a:	4a 95       	dec	r20
    554c:	e2 f7       	brpl	.-8      	; 0x5546 <_ZN16Adafruit_SSD13069drawPixelEiij+0x20c>
    554e:	80 95       	com	r24
    5550:	86 23       	and	r24, r22
    5552:	48 2f       	mov	r20, r24
    5554:	c9 01       	movw	r24, r18
    5556:	8a 5e       	subi	r24, 0xEA	; 234
    5558:	9e 4f       	sbci	r25, 0xFE	; 254
    555a:	fc 01       	movw	r30, r24
    555c:	40 83       	st	Z, r20
    555e:	3a c0       	rjmp	.+116    	; 0x55d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x29a>
    5560:	89 85       	ldd	r24, Y+9	; 0x09
    5562:	9a 85       	ldd	r25, Y+10	; 0x0a
    5564:	99 23       	and	r25, r25
    5566:	0c f4       	brge	.+2      	; 0x556a <_ZN16Adafruit_SSD13069drawPixelEiij+0x230>
    5568:	07 96       	adiw	r24, 0x07	; 7
    556a:	95 95       	asr	r25
    556c:	87 95       	ror	r24
    556e:	95 95       	asr	r25
    5570:	87 95       	ror	r24
    5572:	95 95       	asr	r25
    5574:	87 95       	ror	r24
    5576:	ac 01       	movw	r20, r24
    5578:	56 95       	lsr	r21
    557a:	54 2f       	mov	r21, r20
    557c:	44 27       	eor	r20, r20
    557e:	57 95       	ror	r21
    5580:	47 95       	ror	r20
    5582:	2f 81       	ldd	r18, Y+7	; 0x07
    5584:	38 85       	ldd	r19, Y+8	; 0x08
    5586:	24 0f       	add	r18, r20
    5588:	35 1f       	adc	r19, r21
    558a:	ac 01       	movw	r20, r24
    558c:	56 95       	lsr	r21
    558e:	54 2f       	mov	r21, r20
    5590:	44 27       	eor	r20, r20
    5592:	57 95       	ror	r21
    5594:	47 95       	ror	r20
    5596:	8f 81       	ldd	r24, Y+7	; 0x07
    5598:	98 85       	ldd	r25, Y+8	; 0x08
    559a:	84 0f       	add	r24, r20
    559c:	95 1f       	adc	r25, r21
    559e:	8a 5e       	subi	r24, 0xEA	; 234
    55a0:	9e 4f       	sbci	r25, 0xFE	; 254
    55a2:	fc 01       	movw	r30, r24
    55a4:	80 81       	ld	r24, Z
    55a6:	68 2f       	mov	r22, r24
    55a8:	89 85       	ldd	r24, Y+9	; 0x09
    55aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ac:	ac 01       	movw	r20, r24
    55ae:	47 70       	andi	r20, 0x07	; 7
    55b0:	55 27       	eor	r21, r21
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <_ZN16Adafruit_SSD13069drawPixelEiij+0x282>
    55b8:	88 0f       	add	r24, r24
    55ba:	99 1f       	adc	r25, r25
    55bc:	4a 95       	dec	r20
    55be:	e2 f7       	brpl	.-8      	; 0x55b8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x27e>
    55c0:	86 27       	eor	r24, r22
    55c2:	48 2f       	mov	r20, r24
    55c4:	c9 01       	movw	r24, r18
    55c6:	8a 5e       	subi	r24, 0xEA	; 234
    55c8:	9e 4f       	sbci	r25, 0xFE	; 254
    55ca:	fc 01       	movw	r30, r24
    55cc:	40 83       	st	Z, r20
    55ce:	00 00       	nop
    55d0:	01 c0       	rjmp	.+2      	; 0x55d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x29a>
    55d2:	00 00       	nop
    55d4:	2c 96       	adiw	r28, 0x0c	; 12
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	f8 94       	cli
    55da:	de bf       	out	0x3e, r29	; 62
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	cd bf       	out	0x3d, r28	; 61
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	08 95       	ret

000055e6 <_ZN16Adafruit_SSD1306C1Ea>:
    55e6:	cf 93       	push	r28
    55e8:	df 93       	push	r29
    55ea:	00 d0       	rcall	.+0      	; 0x55ec <_ZN16Adafruit_SSD1306C1Ea+0x6>
    55ec:	1f 92       	push	r1
    55ee:	cd b7       	in	r28, 0x3d	; 61
    55f0:	de b7       	in	r29, 0x3e	; 62
    55f2:	9a 83       	std	Y+2, r25	; 0x02
    55f4:	89 83       	std	Y+1, r24	; 0x01
    55f6:	6b 83       	std	Y+3, r22	; 0x03
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	9a 81       	ldd	r25, Y+2	; 0x02
    55fc:	40 e2       	ldi	r20, 0x20	; 32
    55fe:	50 e0       	ldi	r21, 0x00	; 0
    5600:	60 e8       	ldi	r22, 0x80	; 128
    5602:	70 e0       	ldi	r23, 0x00	; 0
    5604:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN12Adafruit_GFXC1Eii>
    5608:	24 ec       	ldi	r18, 0xC4	; 196
    560a:	33 e0       	ldi	r19, 0x03	; 3
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	9a 81       	ldd	r25, Y+2	; 0x02
    5610:	fc 01       	movw	r30, r24
    5612:	31 83       	std	Z+1, r19	; 0x01
    5614:	20 83       	st	Z, r18
    5616:	89 81       	ldd	r24, Y+1	; 0x01
    5618:	9a 81       	ldd	r25, Y+2	; 0x02
    561a:	2f ef       	ldi	r18, 0xFF	; 255
    561c:	fc 01       	movw	r30, r24
    561e:	24 8f       	std	Z+28, r18	; 0x1c
    5620:	89 81       	ldd	r24, Y+1	; 0x01
    5622:	9a 81       	ldd	r25, Y+2	; 0x02
    5624:	fc 01       	movw	r30, r24
    5626:	24 8d       	ldd	r18, Z+28	; 0x1c
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	9a 81       	ldd	r25, Y+2	; 0x02
    562c:	fc 01       	movw	r30, r24
    562e:	20 a3       	std	Z+32, r18	; 0x20
    5630:	89 81       	ldd	r24, Y+1	; 0x01
    5632:	9a 81       	ldd	r25, Y+2	; 0x02
    5634:	fc 01       	movw	r30, r24
    5636:	20 a1       	ldd	r18, Z+32	; 0x20
    5638:	89 81       	ldd	r24, Y+1	; 0x01
    563a:	9a 81       	ldd	r25, Y+2	; 0x02
    563c:	fc 01       	movw	r30, r24
    563e:	26 8f       	std	Z+30, r18	; 0x1e
    5640:	89 81       	ldd	r24, Y+1	; 0x01
    5642:	9a 81       	ldd	r25, Y+2	; 0x02
    5644:	fc 01       	movw	r30, r24
    5646:	26 8d       	ldd	r18, Z+30	; 0x1e
    5648:	89 81       	ldd	r24, Y+1	; 0x01
    564a:	9a 81       	ldd	r25, Y+2	; 0x02
    564c:	fc 01       	movw	r30, r24
    564e:	25 8f       	std	Z+29, r18	; 0x1d
    5650:	89 81       	ldd	r24, Y+1	; 0x01
    5652:	9a 81       	ldd	r25, Y+2	; 0x02
    5654:	2b 81       	ldd	r18, Y+3	; 0x03
    5656:	fc 01       	movw	r30, r24
    5658:	27 8f       	std	Z+31, r18	; 0x1f
    565a:	00 00       	nop
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	0f 90       	pop	r0
    5662:	df 91       	pop	r29
    5664:	cf 91       	pop	r28
    5666:	08 95       	ret

00005668 <_ZN16Adafruit_SSD13065beginEhhb>:
    5668:	0f 93       	push	r16
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	af 97       	sbiw	r28, 0x2f	; 47
    5674:	0f b6       	in	r0, 0x3f	; 63
    5676:	f8 94       	cli
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	0f be       	out	0x3f, r0	; 63
    567c:	cd bf       	out	0x3d, r28	; 61
    567e:	9c a7       	std	Y+44, r25	; 0x2c
    5680:	8b a7       	std	Y+43, r24	; 0x2b
    5682:	6d a7       	std	Y+45, r22	; 0x2d
    5684:	4e a7       	std	Y+46, r20	; 0x2e
    5686:	2f a7       	std	Y+47, r18	; 0x2f
    5688:	2d a5       	ldd	r18, Y+45	; 0x2d
    568a:	8b a5       	ldd	r24, Y+43	; 0x2b
    568c:	9c a5       	ldd	r25, Y+44	; 0x2c
    568e:	fc 01       	movw	r30, r24
    5690:	23 8f       	std	Z+27, r18	; 0x1b
    5692:	2e a5       	ldd	r18, Y+46	; 0x2e
    5694:	8b a5       	ldd	r24, Y+43	; 0x2b
    5696:	9c a5       	ldd	r25, Y+44	; 0x2c
    5698:	fc 01       	movw	r30, r24
    569a:	22 8f       	std	Z+26, r18	; 0x1a
    569c:	8b a5       	ldd	r24, Y+43	; 0x2b
    569e:	9c a5       	ldd	r25, Y+44	; 0x2c
    56a0:	fc 01       	movw	r30, r24
    56a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    56a4:	8f 3f       	cpi	r24, 0xFF	; 255
    56a6:	09 f4       	brne	.+2      	; 0x56aa <_ZN16Adafruit_SSD13065beginEhhb+0x42>
    56a8:	3c c1       	rjmp	.+632    	; 0x5922 <_ZN16Adafruit_SSD13065beginEhhb+0x2ba>
    56aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    56ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    56ae:	fc 01       	movw	r30, r24
    56b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    56b2:	61 e0       	ldi	r22, 0x01	; 1
    56b4:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    56b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    56ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    56bc:	fc 01       	movw	r30, r24
    56be:	80 a1       	ldd	r24, Z+32	; 0x20
    56c0:	61 e0       	ldi	r22, 0x01	; 1
    56c2:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    56c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    56c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    56ca:	fc 01       	movw	r30, r24
    56cc:	80 a1       	ldd	r24, Z+32	; 0x20
    56ce:	08 2e       	mov	r0, r24
    56d0:	00 0c       	add	r0, r0
    56d2:	99 0b       	sbc	r25, r25
    56d4:	84 57       	subi	r24, 0x74	; 116
    56d6:	9d 4f       	sbci	r25, 0xFD	; 253
    56d8:	9a 83       	std	Y+2, r25	; 0x02
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	89 81       	ldd	r24, Y+1	; 0x01
    56de:	9a 81       	ldd	r25, Y+2	; 0x02
    56e0:	fc 01       	movw	r30, r24
    56e2:	84 91       	lpm	r24, Z
    56e4:	8b 83       	std	Y+3, r24	; 0x03
    56e6:	8b 81       	ldd	r24, Y+3	; 0x03
    56e8:	88 2f       	mov	r24, r24
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	88 0f       	add	r24, r24
    56ee:	99 1f       	adc	r25, r25
    56f0:	88 58       	subi	r24, 0x88	; 136
    56f2:	9d 4f       	sbci	r25, 0xFD	; 253
    56f4:	9d 83       	std	Y+5, r25	; 0x05
    56f6:	8c 83       	std	Y+4, r24	; 0x04
    56f8:	8c 81       	ldd	r24, Y+4	; 0x04
    56fa:	9d 81       	ldd	r25, Y+5	; 0x05
    56fc:	fc 01       	movw	r30, r24
    56fe:	25 91       	lpm	r18, Z+
    5700:	34 91       	lpm	r19, Z
    5702:	cf 01       	movw	r24, r30
    5704:	3f 83       	std	Y+7, r19	; 0x07
    5706:	2e 83       	std	Y+6, r18	; 0x06
    5708:	9d 83       	std	Y+5, r25	; 0x05
    570a:	8c 83       	std	Y+4, r24	; 0x04
    570c:	8e 81       	ldd	r24, Y+6	; 0x06
    570e:	9f 81       	ldd	r25, Y+7	; 0x07
    5710:	9c 01       	movw	r18, r24
    5712:	8b a5       	ldd	r24, Y+43	; 0x2b
    5714:	9c a5       	ldd	r25, Y+44	; 0x2c
    5716:	fc 01       	movw	r30, r24
    5718:	37 a3       	std	Z+39, r19	; 0x27
    571a:	26 a3       	std	Z+38, r18	; 0x26
    571c:	8b a5       	ldd	r24, Y+43	; 0x2b
    571e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5720:	fc 01       	movw	r30, r24
    5722:	80 a1       	ldd	r24, Z+32	; 0x20
    5724:	08 2e       	mov	r0, r24
    5726:	00 0c       	add	r0, r0
    5728:	99 0b       	sbc	r25, r25
    572a:	80 56       	subi	r24, 0x60	; 96
    572c:	9d 4f       	sbci	r25, 0xFD	; 253
    572e:	99 87       	std	Y+9, r25	; 0x09
    5730:	88 87       	std	Y+8, r24	; 0x08
    5732:	88 85       	ldd	r24, Y+8	; 0x08
    5734:	99 85       	ldd	r25, Y+9	; 0x09
    5736:	fc 01       	movw	r30, r24
    5738:	84 91       	lpm	r24, Z
    573a:	8a 87       	std	Y+10, r24	; 0x0a
    573c:	8b a5       	ldd	r24, Y+43	; 0x2b
    573e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5740:	2a 85       	ldd	r18, Y+10	; 0x0a
    5742:	fc 01       	movw	r30, r24
    5744:	24 a7       	std	Z+44, r18	; 0x2c
    5746:	8b a5       	ldd	r24, Y+43	; 0x2b
    5748:	9c a5       	ldd	r25, Y+44	; 0x2c
    574a:	fc 01       	movw	r30, r24
    574c:	86 8d       	ldd	r24, Z+30	; 0x1e
    574e:	08 2e       	mov	r0, r24
    5750:	00 0c       	add	r0, r0
    5752:	99 0b       	sbc	r25, r25
    5754:	84 57       	subi	r24, 0x74	; 116
    5756:	9d 4f       	sbci	r25, 0xFD	; 253
    5758:	9c 87       	std	Y+12, r25	; 0x0c
    575a:	8b 87       	std	Y+11, r24	; 0x0b
    575c:	8b 85       	ldd	r24, Y+11	; 0x0b
    575e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5760:	fc 01       	movw	r30, r24
    5762:	84 91       	lpm	r24, Z
    5764:	8d 87       	std	Y+13, r24	; 0x0d
    5766:	8d 85       	ldd	r24, Y+13	; 0x0d
    5768:	88 2f       	mov	r24, r24
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	88 0f       	add	r24, r24
    576e:	99 1f       	adc	r25, r25
    5770:	88 58       	subi	r24, 0x88	; 136
    5772:	9d 4f       	sbci	r25, 0xFD	; 253
    5774:	9f 87       	std	Y+15, r25	; 0x0f
    5776:	8e 87       	std	Y+14, r24	; 0x0e
    5778:	8e 85       	ldd	r24, Y+14	; 0x0e
    577a:	9f 85       	ldd	r25, Y+15	; 0x0f
    577c:	fc 01       	movw	r30, r24
    577e:	25 91       	lpm	r18, Z+
    5780:	34 91       	lpm	r19, Z
    5782:	cf 01       	movw	r24, r30
    5784:	39 8b       	std	Y+17, r19	; 0x11
    5786:	28 8b       	std	Y+16, r18	; 0x10
    5788:	9f 87       	std	Y+15, r25	; 0x0f
    578a:	8e 87       	std	Y+14, r24	; 0x0e
    578c:	88 89       	ldd	r24, Y+16	; 0x10
    578e:	99 89       	ldd	r25, Y+17	; 0x11
    5790:	9c 01       	movw	r18, r24
    5792:	8b a5       	ldd	r24, Y+43	; 0x2b
    5794:	9c a5       	ldd	r25, Y+44	; 0x2c
    5796:	fc 01       	movw	r30, r24
    5798:	31 a7       	std	Z+41, r19	; 0x29
    579a:	20 a7       	std	Z+40, r18	; 0x28
    579c:	8b a5       	ldd	r24, Y+43	; 0x2b
    579e:	9c a5       	ldd	r25, Y+44	; 0x2c
    57a0:	fc 01       	movw	r30, r24
    57a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    57a4:	08 2e       	mov	r0, r24
    57a6:	00 0c       	add	r0, r0
    57a8:	99 0b       	sbc	r25, r25
    57aa:	80 56       	subi	r24, 0x60	; 96
    57ac:	9d 4f       	sbci	r25, 0xFD	; 253
    57ae:	9b 8b       	std	Y+19, r25	; 0x13
    57b0:	8a 8b       	std	Y+18, r24	; 0x12
    57b2:	8a 89       	ldd	r24, Y+18	; 0x12
    57b4:	9b 89       	ldd	r25, Y+19	; 0x13
    57b6:	fc 01       	movw	r30, r24
    57b8:	84 91       	lpm	r24, Z
    57ba:	8c 8b       	std	Y+20, r24	; 0x14
    57bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    57be:	9c a5       	ldd	r25, Y+44	; 0x2c
    57c0:	2c 89       	ldd	r18, Y+20	; 0x14
    57c2:	fc 01       	movw	r30, r24
    57c4:	25 a7       	std	Z+45, r18	; 0x2d
    57c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    57c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    57ca:	fc 01       	movw	r30, r24
    57cc:	91 a1       	ldd	r25, Z+33	; 0x21
    57ce:	81 e0       	ldi	r24, 0x01	; 1
    57d0:	89 27       	eor	r24, r25
    57d2:	88 23       	and	r24, r24
    57d4:	09 f4       	brne	.+2      	; 0x57d8 <_ZN16Adafruit_SSD13065beginEhhb+0x170>
    57d6:	8e c0       	rjmp	.+284    	; 0x58f4 <_ZN16Adafruit_SSD13065beginEhhb+0x28c>
    57d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    57da:	9c a5       	ldd	r25, Y+44	; 0x2c
    57dc:	fc 01       	movw	r30, r24
    57de:	84 8d       	ldd	r24, Z+28	; 0x1c
    57e0:	61 e0       	ldi	r22, 0x01	; 1
    57e2:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    57e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    57e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    57ea:	fc 01       	movw	r30, r24
    57ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    57ee:	61 e0       	ldi	r22, 0x01	; 1
    57f0:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    57f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    57f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    57f8:	fc 01       	movw	r30, r24
    57fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    57fc:	08 2e       	mov	r0, r24
    57fe:	00 0c       	add	r0, r0
    5800:	99 0b       	sbc	r25, r25
    5802:	84 57       	subi	r24, 0x74	; 116
    5804:	9d 4f       	sbci	r25, 0xFD	; 253
    5806:	9e 8b       	std	Y+22, r25	; 0x16
    5808:	8d 8b       	std	Y+21, r24	; 0x15
    580a:	8d 89       	ldd	r24, Y+21	; 0x15
    580c:	9e 89       	ldd	r25, Y+22	; 0x16
    580e:	fc 01       	movw	r30, r24
    5810:	84 91       	lpm	r24, Z
    5812:	8f 8b       	std	Y+23, r24	; 0x17
    5814:	8f 89       	ldd	r24, Y+23	; 0x17
    5816:	88 2f       	mov	r24, r24
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	88 0f       	add	r24, r24
    581c:	99 1f       	adc	r25, r25
    581e:	88 58       	subi	r24, 0x88	; 136
    5820:	9d 4f       	sbci	r25, 0xFD	; 253
    5822:	99 8f       	std	Y+25, r25	; 0x19
    5824:	88 8f       	std	Y+24, r24	; 0x18
    5826:	88 8d       	ldd	r24, Y+24	; 0x18
    5828:	99 8d       	ldd	r25, Y+25	; 0x19
    582a:	fc 01       	movw	r30, r24
    582c:	25 91       	lpm	r18, Z+
    582e:	34 91       	lpm	r19, Z
    5830:	cf 01       	movw	r24, r30
    5832:	3b 8f       	std	Y+27, r19	; 0x1b
    5834:	2a 8f       	std	Y+26, r18	; 0x1a
    5836:	99 8f       	std	Y+25, r25	; 0x19
    5838:	88 8f       	std	Y+24, r24	; 0x18
    583a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    583c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    583e:	9c 01       	movw	r18, r24
    5840:	8b a5       	ldd	r24, Y+43	; 0x2b
    5842:	9c a5       	ldd	r25, Y+44	; 0x2c
    5844:	fc 01       	movw	r30, r24
    5846:	35 a3       	std	Z+37, r19	; 0x25
    5848:	24 a3       	std	Z+36, r18	; 0x24
    584a:	8b a5       	ldd	r24, Y+43	; 0x2b
    584c:	9c a5       	ldd	r25, Y+44	; 0x2c
    584e:	fc 01       	movw	r30, r24
    5850:	85 8d       	ldd	r24, Z+29	; 0x1d
    5852:	08 2e       	mov	r0, r24
    5854:	00 0c       	add	r0, r0
    5856:	99 0b       	sbc	r25, r25
    5858:	80 56       	subi	r24, 0x60	; 96
    585a:	9d 4f       	sbci	r25, 0xFD	; 253
    585c:	9d 8f       	std	Y+29, r25	; 0x1d
    585e:	8c 8f       	std	Y+28, r24	; 0x1c
    5860:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5862:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5864:	fc 01       	movw	r30, r24
    5866:	84 91       	lpm	r24, Z
    5868:	8e 8f       	std	Y+30, r24	; 0x1e
    586a:	8b a5       	ldd	r24, Y+43	; 0x2b
    586c:	9c a5       	ldd	r25, Y+44	; 0x2c
    586e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5870:	fc 01       	movw	r30, r24
    5872:	23 a7       	std	Z+43, r18	; 0x2b
    5874:	8b a5       	ldd	r24, Y+43	; 0x2b
    5876:	9c a5       	ldd	r25, Y+44	; 0x2c
    5878:	fc 01       	movw	r30, r24
    587a:	84 8d       	ldd	r24, Z+28	; 0x1c
    587c:	08 2e       	mov	r0, r24
    587e:	00 0c       	add	r0, r0
    5880:	99 0b       	sbc	r25, r25
    5882:	84 57       	subi	r24, 0x74	; 116
    5884:	9d 4f       	sbci	r25, 0xFD	; 253
    5886:	98 a3       	std	Y+32, r25	; 0x20
    5888:	8f 8f       	std	Y+31, r24	; 0x1f
    588a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    588c:	98 a1       	ldd	r25, Y+32	; 0x20
    588e:	fc 01       	movw	r30, r24
    5890:	84 91       	lpm	r24, Z
    5892:	89 a3       	std	Y+33, r24	; 0x21
    5894:	89 a1       	ldd	r24, Y+33	; 0x21
    5896:	88 2f       	mov	r24, r24
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	88 0f       	add	r24, r24
    589c:	99 1f       	adc	r25, r25
    589e:	88 58       	subi	r24, 0x88	; 136
    58a0:	9d 4f       	sbci	r25, 0xFD	; 253
    58a2:	9b a3       	std	Y+35, r25	; 0x23
    58a4:	8a a3       	std	Y+34, r24	; 0x22
    58a6:	8a a1       	ldd	r24, Y+34	; 0x22
    58a8:	9b a1       	ldd	r25, Y+35	; 0x23
    58aa:	fc 01       	movw	r30, r24
    58ac:	25 91       	lpm	r18, Z+
    58ae:	34 91       	lpm	r19, Z
    58b0:	cf 01       	movw	r24, r30
    58b2:	3d a3       	std	Y+37, r19	; 0x25
    58b4:	2c a3       	std	Y+36, r18	; 0x24
    58b6:	9b a3       	std	Y+35, r25	; 0x23
    58b8:	8a a3       	std	Y+34, r24	; 0x22
    58ba:	8c a1       	ldd	r24, Y+36	; 0x24
    58bc:	9d a1       	ldd	r25, Y+37	; 0x25
    58be:	9c 01       	movw	r18, r24
    58c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    58c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    58c4:	fc 01       	movw	r30, r24
    58c6:	33 a3       	std	Z+35, r19	; 0x23
    58c8:	22 a3       	std	Z+34, r18	; 0x22
    58ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    58cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    58ce:	fc 01       	movw	r30, r24
    58d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    58d2:	08 2e       	mov	r0, r24
    58d4:	00 0c       	add	r0, r0
    58d6:	99 0b       	sbc	r25, r25
    58d8:	80 56       	subi	r24, 0x60	; 96
    58da:	9d 4f       	sbci	r25, 0xFD	; 253
    58dc:	9f a3       	std	Y+39, r25	; 0x27
    58de:	8e a3       	std	Y+38, r24	; 0x26
    58e0:	8e a1       	ldd	r24, Y+38	; 0x26
    58e2:	9f a1       	ldd	r25, Y+39	; 0x27
    58e4:	fc 01       	movw	r30, r24
    58e6:	84 91       	lpm	r24, Z
    58e8:	88 a7       	std	Y+40, r24	; 0x28
    58ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    58ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    58ee:	28 a5       	ldd	r18, Y+40	; 0x28
    58f0:	fc 01       	movw	r30, r24
    58f2:	22 a7       	std	Z+42, r18	; 0x2a
    58f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    58f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    58f8:	fc 01       	movw	r30, r24
    58fa:	81 a1       	ldd	r24, Z+33	; 0x21
    58fc:	88 23       	and	r24, r24
    58fe:	a9 f0       	breq	.+42     	; 0x592a <_ZN16Adafruit_SSD13065beginEhhb+0x2c2>
    5900:	0e 94 65 34 	call	0x68ca	; 0x68ca <_ZN8SPIClass5beginEv>
    5904:	ce 01       	movw	r24, r28
    5906:	89 96       	adiw	r24, 0x29	; 41
    5908:	00 e0       	ldi	r16, 0x00	; 0
    590a:	21 e0       	ldi	r18, 0x01	; 1
    590c:	40 e0       	ldi	r20, 0x00	; 0
    590e:	52 e1       	ldi	r21, 0x12	; 18
    5910:	6a e7       	ldi	r22, 0x7A	; 122
    5912:	70 e0       	ldi	r23, 0x00	; 0
    5914:	0e 94 f5 28 	call	0x51ea	; 0x51ea <_ZN11SPISettingsC1Emhh>
    5918:	89 a5       	ldd	r24, Y+41	; 0x29
    591a:	9a a5       	ldd	r25, Y+42	; 0x2a
    591c:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN8SPIClass16beginTransactionE11SPISettings>
    5920:	04 c0       	rjmp	.+8      	; 0x592a <_ZN16Adafruit_SSD13065beginEhhb+0x2c2>
    5922:	8f e8       	ldi	r24, 0x8F	; 143
    5924:	95 e0       	ldi	r25, 0x05	; 5
    5926:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire5beginEv>
    592a:	8f a5       	ldd	r24, Y+47	; 0x2f
    592c:	88 23       	and	r24, r24
    592e:	71 f1       	breq	.+92     	; 0x598c <_ZN16Adafruit_SSD13065beginEhhb+0x324>
    5930:	8b a5       	ldd	r24, Y+43	; 0x2b
    5932:	9c a5       	ldd	r25, Y+44	; 0x2c
    5934:	fc 01       	movw	r30, r24
    5936:	87 8d       	ldd	r24, Z+31	; 0x1f
    5938:	88 23       	and	r24, r24
    593a:	44 f1       	brlt	.+80     	; 0x598c <_ZN16Adafruit_SSD13065beginEhhb+0x324>
    593c:	8b a5       	ldd	r24, Y+43	; 0x2b
    593e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5940:	fc 01       	movw	r30, r24
    5942:	87 8d       	ldd	r24, Z+31	; 0x1f
    5944:	61 e0       	ldi	r22, 0x01	; 1
    5946:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    594a:	8b a5       	ldd	r24, Y+43	; 0x2b
    594c:	9c a5       	ldd	r25, Y+44	; 0x2c
    594e:	fc 01       	movw	r30, r24
    5950:	87 8d       	ldd	r24, Z+31	; 0x1f
    5952:	61 e0       	ldi	r22, 0x01	; 1
    5954:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    5958:	61 e0       	ldi	r22, 0x01	; 1
    595a:	70 e0       	ldi	r23, 0x00	; 0
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	0e 94 0d 19 	call	0x321a	; 0x321a <delay>
    5964:	8b a5       	ldd	r24, Y+43	; 0x2b
    5966:	9c a5       	ldd	r25, Y+44	; 0x2c
    5968:	fc 01       	movw	r30, r24
    596a:	87 8d       	ldd	r24, Z+31	; 0x1f
    596c:	60 e0       	ldi	r22, 0x00	; 0
    596e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    5972:	6a e0       	ldi	r22, 0x0A	; 10
    5974:	70 e0       	ldi	r23, 0x00	; 0
    5976:	80 e0       	ldi	r24, 0x00	; 0
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	0e 94 0d 19 	call	0x321a	; 0x321a <delay>
    597e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5980:	9c a5       	ldd	r25, Y+44	; 0x2c
    5982:	fc 01       	movw	r30, r24
    5984:	87 8d       	ldd	r24, Z+31	; 0x1f
    5986:	61 e0       	ldi	r22, 0x01	; 1
    5988:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    598c:	8b a5       	ldd	r24, Y+43	; 0x2b
    598e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5990:	6e ea       	ldi	r22, 0xAE	; 174
    5992:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5996:	8b a5       	ldd	r24, Y+43	; 0x2b
    5998:	9c a5       	ldd	r25, Y+44	; 0x2c
    599a:	65 ed       	ldi	r22, 0xD5	; 213
    599c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    59a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    59a4:	60 e8       	ldi	r22, 0x80	; 128
    59a6:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    59ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    59ae:	68 ea       	ldi	r22, 0xA8	; 168
    59b0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    59b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    59b8:	6f e1       	ldi	r22, 0x1F	; 31
    59ba:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59be:	8b a5       	ldd	r24, Y+43	; 0x2b
    59c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    59c2:	63 ed       	ldi	r22, 0xD3	; 211
    59c4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    59ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    59cc:	60 e0       	ldi	r22, 0x00	; 0
    59ce:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    59d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    59d6:	60 e4       	ldi	r22, 0x40	; 64
    59d8:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    59de:	9c a5       	ldd	r25, Y+44	; 0x2c
    59e0:	6d e8       	ldi	r22, 0x8D	; 141
    59e2:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    59e8:	81 30       	cpi	r24, 0x01	; 1
    59ea:	31 f4       	brne	.+12     	; 0x59f8 <_ZN16Adafruit_SSD13065beginEhhb+0x390>
    59ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    59ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    59f0:	60 e1       	ldi	r22, 0x10	; 16
    59f2:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    59f6:	05 c0       	rjmp	.+10     	; 0x5a02 <_ZN16Adafruit_SSD13065beginEhhb+0x39a>
    59f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    59fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    59fc:	64 e1       	ldi	r22, 0x14	; 20
    59fe:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a02:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a04:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a06:	60 e2       	ldi	r22, 0x20	; 32
    5a08:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a10:	60 e0       	ldi	r22, 0x00	; 0
    5a12:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a16:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a18:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a1a:	61 ea       	ldi	r22, 0xA1	; 161
    5a1c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a20:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a22:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a24:	68 ec       	ldi	r22, 0xC8	; 200
    5a26:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a2e:	6a ed       	ldi	r22, 0xDA	; 218
    5a30:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a38:	62 e0       	ldi	r22, 0x02	; 2
    5a3a:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a40:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a42:	61 e8       	ldi	r22, 0x81	; 129
    5a44:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a4c:	6f e8       	ldi	r22, 0x8F	; 143
    5a4e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a52:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a54:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a56:	69 ed       	ldi	r22, 0xD9	; 217
    5a58:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a5e:	81 30       	cpi	r24, 0x01	; 1
    5a60:	31 f4       	brne	.+12     	; 0x5a6e <_ZN16Adafruit_SSD13065beginEhhb+0x406>
    5a62:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a64:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a66:	62 e2       	ldi	r22, 0x22	; 34
    5a68:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a6c:	05 c0       	rjmp	.+10     	; 0x5a78 <_ZN16Adafruit_SSD13065beginEhhb+0x410>
    5a6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a70:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a72:	61 ef       	ldi	r22, 0xF1	; 241
    5a74:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a78:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a7c:	6b ed       	ldi	r22, 0xDB	; 219
    5a7e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a82:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a84:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a86:	60 e4       	ldi	r22, 0x40	; 64
    5a88:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a90:	64 ea       	ldi	r22, 0xA4	; 164
    5a92:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5a96:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a98:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a9a:	66 ea       	ldi	r22, 0xA6	; 166
    5a9c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5aa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5aa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5aa4:	6e e2       	ldi	r22, 0x2E	; 46
    5aa6:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5aaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    5aac:	9c a5       	ldd	r25, Y+44	; 0x2c
    5aae:	6f ea       	ldi	r22, 0xAF	; 175
    5ab0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    5ab4:	00 00       	nop
    5ab6:	af 96       	adiw	r28, 0x2f	; 47
    5ab8:	0f b6       	in	r0, 0x3f	; 63
    5aba:	f8 94       	cli
    5abc:	de bf       	out	0x3e, r29	; 62
    5abe:	0f be       	out	0x3f, r0	; 63
    5ac0:	cd bf       	out	0x3d, r28	; 61
    5ac2:	df 91       	pop	r29
    5ac4:	cf 91       	pop	r28
    5ac6:	0f 91       	pop	r16
    5ac8:	08 95       	ret

00005aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	00 d0       	rcall	.+0      	; 0x5ad0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x6>
    5ad0:	00 d0       	rcall	.+0      	; 0x5ad2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x8>
    5ad2:	cd b7       	in	r28, 0x3d	; 61
    5ad4:	de b7       	in	r29, 0x3e	; 62
    5ad6:	9b 83       	std	Y+3, r25	; 0x03
    5ad8:	8a 83       	std	Y+2, r24	; 0x02
    5ada:	6c 83       	std	Y+4, r22	; 0x04
    5adc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ade:	9b 81       	ldd	r25, Y+3	; 0x03
    5ae0:	fc 01       	movw	r30, r24
    5ae2:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ae4:	8f 3f       	cpi	r24, 0xFF	; 255
    5ae6:	09 f4       	brne	.+2      	; 0x5aea <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x20>
    5ae8:	56 c0       	rjmp	.+172    	; 0x5b96 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0xcc>
    5aea:	8a 81       	ldd	r24, Y+2	; 0x02
    5aec:	9b 81       	ldd	r25, Y+3	; 0x03
    5aee:	fc 01       	movw	r30, r24
    5af0:	86 a1       	ldd	r24, Z+38	; 0x26
    5af2:	97 a1       	ldd	r25, Z+39	; 0x27
    5af4:	2a 81       	ldd	r18, Y+2	; 0x02
    5af6:	3b 81       	ldd	r19, Y+3	; 0x03
    5af8:	f9 01       	movw	r30, r18
    5afa:	26 a1       	ldd	r18, Z+38	; 0x26
    5afc:	37 a1       	ldd	r19, Z+39	; 0x27
    5afe:	f9 01       	movw	r30, r18
    5b00:	40 81       	ld	r20, Z
    5b02:	2a 81       	ldd	r18, Y+2	; 0x02
    5b04:	3b 81       	ldd	r19, Y+3	; 0x03
    5b06:	f9 01       	movw	r30, r18
    5b08:	24 a5       	ldd	r18, Z+44	; 0x2c
    5b0a:	24 2b       	or	r18, r20
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	20 83       	st	Z, r18
    5b10:	8a 81       	ldd	r24, Y+2	; 0x02
    5b12:	9b 81       	ldd	r25, Y+3	; 0x03
    5b14:	fc 01       	movw	r30, r24
    5b16:	80 a5       	ldd	r24, Z+40	; 0x28
    5b18:	91 a5       	ldd	r25, Z+41	; 0x29
    5b1a:	2a 81       	ldd	r18, Y+2	; 0x02
    5b1c:	3b 81       	ldd	r19, Y+3	; 0x03
    5b1e:	f9 01       	movw	r30, r18
    5b20:	20 a5       	ldd	r18, Z+40	; 0x28
    5b22:	31 a5       	ldd	r19, Z+41	; 0x29
    5b24:	f9 01       	movw	r30, r18
    5b26:	20 81       	ld	r18, Z
    5b28:	42 2f       	mov	r20, r18
    5b2a:	2a 81       	ldd	r18, Y+2	; 0x02
    5b2c:	3b 81       	ldd	r19, Y+3	; 0x03
    5b2e:	f9 01       	movw	r30, r18
    5b30:	25 a5       	ldd	r18, Z+45	; 0x2d
    5b32:	20 95       	com	r18
    5b34:	24 23       	and	r18, r20
    5b36:	fc 01       	movw	r30, r24
    5b38:	20 83       	st	Z, r18
    5b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b3e:	fc 01       	movw	r30, r24
    5b40:	86 a1       	ldd	r24, Z+38	; 0x26
    5b42:	97 a1       	ldd	r25, Z+39	; 0x27
    5b44:	2a 81       	ldd	r18, Y+2	; 0x02
    5b46:	3b 81       	ldd	r19, Y+3	; 0x03
    5b48:	f9 01       	movw	r30, r18
    5b4a:	26 a1       	ldd	r18, Z+38	; 0x26
    5b4c:	37 a1       	ldd	r19, Z+39	; 0x27
    5b4e:	f9 01       	movw	r30, r18
    5b50:	20 81       	ld	r18, Z
    5b52:	42 2f       	mov	r20, r18
    5b54:	2a 81       	ldd	r18, Y+2	; 0x02
    5b56:	3b 81       	ldd	r19, Y+3	; 0x03
    5b58:	f9 01       	movw	r30, r18
    5b5a:	24 a5       	ldd	r18, Z+44	; 0x2c
    5b5c:	20 95       	com	r18
    5b5e:	24 23       	and	r18, r20
    5b60:	fc 01       	movw	r30, r24
    5b62:	20 83       	st	Z, r18
    5b64:	8a 81       	ldd	r24, Y+2	; 0x02
    5b66:	9b 81       	ldd	r25, Y+3	; 0x03
    5b68:	6c 81       	ldd	r22, Y+4	; 0x04
    5b6a:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    5b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b70:	9b 81       	ldd	r25, Y+3	; 0x03
    5b72:	fc 01       	movw	r30, r24
    5b74:	86 a1       	ldd	r24, Z+38	; 0x26
    5b76:	97 a1       	ldd	r25, Z+39	; 0x27
    5b78:	2a 81       	ldd	r18, Y+2	; 0x02
    5b7a:	3b 81       	ldd	r19, Y+3	; 0x03
    5b7c:	f9 01       	movw	r30, r18
    5b7e:	26 a1       	ldd	r18, Z+38	; 0x26
    5b80:	37 a1       	ldd	r19, Z+39	; 0x27
    5b82:	f9 01       	movw	r30, r18
    5b84:	40 81       	ld	r20, Z
    5b86:	2a 81       	ldd	r18, Y+2	; 0x02
    5b88:	3b 81       	ldd	r19, Y+3	; 0x03
    5b8a:	f9 01       	movw	r30, r18
    5b8c:	24 a5       	ldd	r18, Z+44	; 0x2c
    5b8e:	24 2b       	or	r18, r20
    5b90:	fc 01       	movw	r30, r24
    5b92:	20 83       	st	Z, r18
    5b94:	1b c0       	rjmp	.+54     	; 0x5bcc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x102>
    5b96:	19 82       	std	Y+1, r1	; 0x01
    5b98:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    5b9c:	fc 01       	movw	r30, r24
    5b9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ba0:	08 2e       	mov	r0, r24
    5ba2:	00 0c       	add	r0, r0
    5ba4:	99 0b       	sbc	r25, r25
    5ba6:	bc 01       	movw	r22, r24
    5ba8:	8f e8       	ldi	r24, 0x8F	; 143
    5baa:	95 e0       	ldi	r25, 0x05	; 5
    5bac:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <_ZN7TwoWire17beginTransmissionEi>
    5bb0:	69 81       	ldd	r22, Y+1	; 0x01
    5bb2:	8f e8       	ldi	r24, 0x8F	; 143
    5bb4:	95 e0       	ldi	r25, 0x05	; 5
    5bb6:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN7TwoWire5writeEh>
    5bba:	6c 81       	ldd	r22, Y+4	; 0x04
    5bbc:	8f e8       	ldi	r24, 0x8F	; 143
    5bbe:	95 e0       	ldi	r25, 0x05	; 5
    5bc0:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN7TwoWire5writeEh>
    5bc4:	8f e8       	ldi	r24, 0x8F	; 143
    5bc6:	95 e0       	ldi	r25, 0x05	; 5
    5bc8:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <_ZN7TwoWire15endTransmissionEv>
    5bcc:	00 00       	nop
    5bce:	0f 90       	pop	r0
    5bd0:	0f 90       	pop	r0
    5bd2:	0f 90       	pop	r0
    5bd4:	0f 90       	pop	r0
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	08 95       	ret

00005bdc <_ZN16Adafruit_SSD13067displayEv>:

void Adafruit_SSD1306::display(void) {
    5bdc:	cf 93       	push	r28
    5bde:	df 93       	push	r29
    5be0:	cd b7       	in	r28, 0x3d	; 61
    5be2:	de b7       	in	r29, 0x3e	; 62
    5be4:	28 97       	sbiw	r28, 0x08	; 8
    5be6:	0f b6       	in	r0, 0x3f	; 63
    5be8:	f8 94       	cli
    5bea:	de bf       	out	0x3e, r29	; 62
    5bec:	0f be       	out	0x3f, r0	; 63
    5bee:	cd bf       	out	0x3d, r28	; 61
    5bf0:	98 87       	std	Y+8, r25	; 0x08
    5bf2:	8f 83       	std	Y+7, r24	; 0x07
  ssd1306_command(SSD1306_COLUMNADDR);
    5bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    5bf6:	98 85       	ldd	r25, Y+8	; 0x08
    5bf8:	61 e2       	ldi	r22, 0x21	; 33
    5bfa:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
    5bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    5c00:	98 85       	ldd	r25, Y+8	; 0x08
    5c02:	60 e0       	ldi	r22, 0x00	; 0
    5c04:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
    5c08:	8f 81       	ldd	r24, Y+7	; 0x07
    5c0a:	98 85       	ldd	r25, Y+8	; 0x08
    5c0c:	6f e7       	ldi	r22, 0x7F	; 127
    5c0e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
    5c12:	8f 81       	ldd	r24, Y+7	; 0x07
    5c14:	98 85       	ldd	r25, Y+8	; 0x08
    5c16:	62 e2       	ldi	r22, 0x22	; 34
    5c18:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
    5c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    5c1e:	98 85       	ldd	r25, Y+8	; 0x08
    5c20:	60 e0       	ldi	r22, 0x00	; 0
    5c22:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
    5c26:	8f 81       	ldd	r24, Y+7	; 0x07
    5c28:	98 85       	ldd	r25, Y+8	; 0x08
    5c2a:	63 e0       	ldi	r22, 0x03	; 3
    5c2c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  #if SSD1306_LCDHEIGHT == 16
    ssd1306_command(1); // Page end address
  #endif

  if (sid != -1)
    5c30:	8f 81       	ldd	r24, Y+7	; 0x07
    5c32:	98 85       	ldd	r25, Y+8	; 0x08
    5c34:	fc 01       	movw	r30, r24
    5c36:	84 8d       	ldd	r24, Z+28	; 0x1c
    5c38:	8f 3f       	cpi	r24, 0xFF	; 255
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <_ZN16Adafruit_SSD13067displayEv+0x62>
    5c3c:	67 c0       	rjmp	.+206    	; 0x5d0c <_ZN16Adafruit_SSD13067displayEv+0x130>
  {
    // SPI
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    5c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    5c40:	98 85       	ldd	r25, Y+8	; 0x08
    5c42:	fc 01       	movw	r30, r24
    5c44:	86 a1       	ldd	r24, Z+38	; 0x26
    5c46:	97 a1       	ldd	r25, Z+39	; 0x27
    5c48:	2f 81       	ldd	r18, Y+7	; 0x07
    5c4a:	38 85       	ldd	r19, Y+8	; 0x08
    5c4c:	f9 01       	movw	r30, r18
    5c4e:	26 a1       	ldd	r18, Z+38	; 0x26
    5c50:	37 a1       	ldd	r19, Z+39	; 0x27
    5c52:	f9 01       	movw	r30, r18
    5c54:	40 81       	ld	r20, Z
    5c56:	2f 81       	ldd	r18, Y+7	; 0x07
    5c58:	38 85       	ldd	r19, Y+8	; 0x08
    5c5a:	f9 01       	movw	r30, r18
    5c5c:	24 a5       	ldd	r18, Z+44	; 0x2c
    5c5e:	24 2b       	or	r18, r20
    5c60:	fc 01       	movw	r30, r24
    5c62:	20 83       	st	Z, r18
    *dcport |= dcpinmask;
    5c64:	8f 81       	ldd	r24, Y+7	; 0x07
    5c66:	98 85       	ldd	r25, Y+8	; 0x08
    5c68:	fc 01       	movw	r30, r24
    5c6a:	80 a5       	ldd	r24, Z+40	; 0x28
    5c6c:	91 a5       	ldd	r25, Z+41	; 0x29
    5c6e:	2f 81       	ldd	r18, Y+7	; 0x07
    5c70:	38 85       	ldd	r19, Y+8	; 0x08
    5c72:	f9 01       	movw	r30, r18
    5c74:	20 a5       	ldd	r18, Z+40	; 0x28
    5c76:	31 a5       	ldd	r19, Z+41	; 0x29
    5c78:	f9 01       	movw	r30, r18
    5c7a:	40 81       	ld	r20, Z
    5c7c:	2f 81       	ldd	r18, Y+7	; 0x07
    5c7e:	38 85       	ldd	r19, Y+8	; 0x08
    5c80:	f9 01       	movw	r30, r18
    5c82:	25 a5       	ldd	r18, Z+45	; 0x2d
    5c84:	24 2b       	or	r18, r20
    5c86:	fc 01       	movw	r30, r24
    5c88:	20 83       	st	Z, r18
    *csport &= ~cspinmask;
    5c8a:	8f 81       	ldd	r24, Y+7	; 0x07
    5c8c:	98 85       	ldd	r25, Y+8	; 0x08
    5c8e:	fc 01       	movw	r30, r24
    5c90:	86 a1       	ldd	r24, Z+38	; 0x26
    5c92:	97 a1       	ldd	r25, Z+39	; 0x27
    5c94:	2f 81       	ldd	r18, Y+7	; 0x07
    5c96:	38 85       	ldd	r19, Y+8	; 0x08
    5c98:	f9 01       	movw	r30, r18
    5c9a:	26 a1       	ldd	r18, Z+38	; 0x26
    5c9c:	37 a1       	ldd	r19, Z+39	; 0x27
    5c9e:	f9 01       	movw	r30, r18
    5ca0:	20 81       	ld	r18, Z
    5ca2:	42 2f       	mov	r20, r18
    5ca4:	2f 81       	ldd	r18, Y+7	; 0x07
    5ca6:	38 85       	ldd	r19, Y+8	; 0x08
    5ca8:	f9 01       	movw	r30, r18
    5caa:	24 a5       	ldd	r18, Z+44	; 0x2c
    5cac:	20 95       	com	r18
    5cae:	24 23       	and	r18, r20
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	20 83       	st	Z, r18
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    5cb4:	1a 82       	std	Y+2, r1	; 0x02
    5cb6:	19 82       	std	Y+1, r1	; 0x01
    5cb8:	89 81       	ldd	r24, Y+1	; 0x01
    5cba:	9a 81       	ldd	r25, Y+2	; 0x02
    5cbc:	81 15       	cp	r24, r1
    5cbe:	92 40       	sbci	r25, 0x02	; 2
    5cc0:	88 f4       	brcc	.+34     	; 0x5ce4 <_ZN16Adafruit_SSD13067displayEv+0x108>
      fastSPIwrite(buffer[i]);
    5cc2:	89 81       	ldd	r24, Y+1	; 0x01
    5cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc6:	8a 5e       	subi	r24, 0xEA	; 234
    5cc8:	9e 4f       	sbci	r25, 0xFE	; 254
    5cca:	fc 01       	movw	r30, r24
    5ccc:	20 81       	ld	r18, Z
    5cce:	8f 81       	ldd	r24, Y+7	; 0x07
    5cd0:	98 85       	ldd	r25, Y+8	; 0x08
    5cd2:	62 2f       	mov	r22, r18
    5cd4:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    5cd8:	89 81       	ldd	r24, Y+1	; 0x01
    5cda:	9a 81       	ldd	r25, Y+2	; 0x02
    5cdc:	01 96       	adiw	r24, 0x01	; 1
    5cde:	9a 83       	std	Y+2, r25	; 0x02
    5ce0:	89 83       	std	Y+1, r24	; 0x01
    5ce2:	ea cf       	rjmp	.-44     	; 0x5cb8 <_ZN16Adafruit_SSD13067displayEv+0xdc>
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    5ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ce6:	98 85       	ldd	r25, Y+8	; 0x08
    5ce8:	fc 01       	movw	r30, r24
    5cea:	86 a1       	ldd	r24, Z+38	; 0x26
    5cec:	97 a1       	ldd	r25, Z+39	; 0x27
    5cee:	2f 81       	ldd	r18, Y+7	; 0x07
    5cf0:	38 85       	ldd	r19, Y+8	; 0x08
    5cf2:	f9 01       	movw	r30, r18
    5cf4:	26 a1       	ldd	r18, Z+38	; 0x26
    5cf6:	37 a1       	ldd	r19, Z+39	; 0x27
    5cf8:	f9 01       	movw	r30, r18
    5cfa:	40 81       	ld	r20, Z
    5cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    5cfe:	38 85       	ldd	r19, Y+8	; 0x08
    5d00:	f9 01       	movw	r30, r18
    5d02:	24 a5       	ldd	r18, Z+44	; 0x2c
    5d04:	24 2b       	or	r18, r20
    5d06:	fc 01       	movw	r30, r24
    5d08:	20 83       	st	Z, r18
    }
#ifdef TWBR
    TWBR = twbrbackup;
#endif
  }
}
    5d0a:	4f c0       	rjmp	.+158    	; 0x5daa <_ZN16Adafruit_SSD13067displayEv+0x1ce>
  }
  else
  {
    // save I2C bitrate
#ifdef TWBR
    uint8_t twbrbackup = TWBR;
    5d0c:	88 eb       	ldi	r24, 0xB8	; 184
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	fc 01       	movw	r30, r24
    5d12:	80 81       	ld	r24, Z
    5d14:	8e 83       	std	Y+6, r24	; 0x06
    TWBR = 12; // upgrade to 400KHz!
    5d16:	88 eb       	ldi	r24, 0xB8	; 184
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	2c e0       	ldi	r18, 0x0C	; 12
    5d1c:	fc 01       	movw	r30, r24
    5d1e:	20 83       	st	Z, r18

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    5d20:	1c 82       	std	Y+4, r1	; 0x04
    5d22:	1b 82       	std	Y+3, r1	; 0x03
    5d24:	8b 81       	ldd	r24, Y+3	; 0x03
    5d26:	9c 81       	ldd	r25, Y+4	; 0x04
    5d28:	81 15       	cp	r24, r1
    5d2a:	92 40       	sbci	r25, 0x02	; 2
    5d2c:	c8 f5       	brcc	.+114    	; 0x5da0 <_ZN16Adafruit_SSD13067displayEv+0x1c4>
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
    5d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    5d30:	98 85       	ldd	r25, Y+8	; 0x08
    5d32:	fc 01       	movw	r30, r24
    5d34:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d36:	08 2e       	mov	r0, r24
    5d38:	00 0c       	add	r0, r0
    5d3a:	99 0b       	sbc	r25, r25
    5d3c:	bc 01       	movw	r22, r24
    5d3e:	8f e8       	ldi	r24, 0x8F	; 143
    5d40:	95 e0       	ldi	r25, 0x05	; 5
    5d42:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <_ZN7TwoWire17beginTransmissionEi>
      WIRE_WRITE(0x40);
    5d46:	60 e4       	ldi	r22, 0x40	; 64
    5d48:	70 e0       	ldi	r23, 0x00	; 0
    5d4a:	8f e8       	ldi	r24, 0x8F	; 143
    5d4c:	95 e0       	ldi	r25, 0x05	; 5
    5d4e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <_ZN7TwoWire5writeEi>
      for (uint8_t x=0; x<16; x++) {
    5d52:	1d 82       	std	Y+5, r1	; 0x05
    5d54:	8d 81       	ldd	r24, Y+5	; 0x05
    5d56:	80 31       	cpi	r24, 0x10	; 16
    5d58:	a0 f4       	brcc	.+40     	; 0x5d82 <_ZN16Adafruit_SSD13067displayEv+0x1a6>
        WIRE_WRITE(buffer[i]);
    5d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5d5e:	8a 5e       	subi	r24, 0xEA	; 234
    5d60:	9e 4f       	sbci	r25, 0xFE	; 254
    5d62:	fc 01       	movw	r30, r24
    5d64:	80 81       	ld	r24, Z
    5d66:	68 2f       	mov	r22, r24
    5d68:	8f e8       	ldi	r24, 0x8F	; 143
    5d6a:	95 e0       	ldi	r25, 0x05	; 5
    5d6c:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN7TwoWire5writeEh>
        i++;
    5d70:	8b 81       	ldd	r24, Y+3	; 0x03
    5d72:	9c 81       	ldd	r25, Y+4	; 0x04
    5d74:	01 96       	adiw	r24, 0x01	; 1
    5d76:	9c 83       	std	Y+4, r25	; 0x04
    5d78:	8b 83       	std	Y+3, r24	; 0x03
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
    5d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d7c:	8f 5f       	subi	r24, 0xFF	; 255
    5d7e:	8d 83       	std	Y+5, r24	; 0x05
    5d80:	e9 cf       	rjmp	.-46     	; 0x5d54 <_ZN16Adafruit_SSD13067displayEv+0x178>
        WIRE_WRITE(buffer[i]);
        i++;
      }
      i--;
    5d82:	8b 81       	ldd	r24, Y+3	; 0x03
    5d84:	9c 81       	ldd	r25, Y+4	; 0x04
    5d86:	01 97       	sbiw	r24, 0x01	; 1
    5d88:	9c 83       	std	Y+4, r25	; 0x04
    5d8a:	8b 83       	std	Y+3, r24	; 0x03
      Wire.endTransmission();
    5d8c:	8f e8       	ldi	r24, 0x8F	; 143
    5d8e:	95 e0       	ldi	r25, 0x05	; 5
    5d90:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <_ZN7TwoWire15endTransmissionEv>

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    5d94:	8b 81       	ldd	r24, Y+3	; 0x03
    5d96:	9c 81       	ldd	r25, Y+4	; 0x04
    5d98:	01 96       	adiw	r24, 0x01	; 1
    5d9a:	9c 83       	std	Y+4, r25	; 0x04
    5d9c:	8b 83       	std	Y+3, r24	; 0x03
    5d9e:	c2 cf       	rjmp	.-124    	; 0x5d24 <_ZN16Adafruit_SSD13067displayEv+0x148>
      }
      i--;
      Wire.endTransmission();
    }
#ifdef TWBR
    TWBR = twbrbackup;
    5da0:	88 eb       	ldi	r24, 0xB8	; 184
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	2e 81       	ldd	r18, Y+6	; 0x06
    5da6:	fc 01       	movw	r30, r24
    5da8:	20 83       	st	Z, r18
#endif
  }
}
    5daa:	00 00       	nop
    5dac:	28 96       	adiw	r28, 0x08	; 8
    5dae:	0f b6       	in	r0, 0x3f	; 63
    5db0:	f8 94       	cli
    5db2:	de bf       	out	0x3e, r29	; 62
    5db4:	0f be       	out	0x3f, r0	; 63
    5db6:	cd bf       	out	0x3d, r28	; 61
    5db8:	df 91       	pop	r29
    5dba:	cf 91       	pop	r28
    5dbc:	08 95       	ret

00005dbe <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
    5dbe:	cf 93       	push	r28
    5dc0:	df 93       	push	r29
    5dc2:	00 d0       	rcall	.+0      	; 0x5dc4 <_ZN16Adafruit_SSD130612clearDisplayEv+0x6>
    5dc4:	cd b7       	in	r28, 0x3d	; 61
    5dc6:	de b7       	in	r29, 0x3e	; 62
    5dc8:	9a 83       	std	Y+2, r25	; 0x02
    5dca:	89 83       	std	Y+1, r24	; 0x01
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
    5dcc:	40 e0       	ldi	r20, 0x00	; 0
    5dce:	52 e0       	ldi	r21, 0x02	; 2
    5dd0:	60 e0       	ldi	r22, 0x00	; 0
    5dd2:	70 e0       	ldi	r23, 0x00	; 0
    5dd4:	86 e1       	ldi	r24, 0x16	; 22
    5dd6:	91 e0       	ldi	r25, 0x01	; 1
    5dd8:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <memset>
}
    5ddc:	00 00       	nop
    5dde:	0f 90       	pop	r0
    5de0:	0f 90       	pop	r0
    5de2:	df 91       	pop	r29
    5de4:	cf 91       	pop	r28
    5de6:	08 95       	ret

00005de8 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
    5de8:	cf 93       	push	r28
    5dea:	df 93       	push	r29
    5dec:	00 d0       	rcall	.+0      	; 0x5dee <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x6>
    5dee:	00 d0       	rcall	.+0      	; 0x5df0 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x8>
    5df0:	cd b7       	in	r28, 0x3d	; 61
    5df2:	de b7       	in	r29, 0x3e	; 62
    5df4:	9b 83       	std	Y+3, r25	; 0x03
    5df6:	8a 83       	std	Y+2, r24	; 0x02
    5df8:	6c 83       	std	Y+4, r22	; 0x04

  if(hwSPI) {
    5dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    5dfe:	fc 01       	movw	r30, r24
    5e00:	81 a1       	ldd	r24, Z+33	; 0x21
    5e02:	88 23       	and	r24, r24
    5e04:	21 f0       	breq	.+8      	; 0x5e0e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x26>
    (void)SPI.transfer(d);
    5e06:	8c 81       	ldd	r24, Y+4	; 0x04
    5e08:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN8SPIClass8transferEh>
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
    5e0c:	63 c0       	rjmp	.+198    	; 0x5ed4 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0xec>
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
    5e0e:	80 e8       	ldi	r24, 0x80	; 128
    5e10:	89 83       	std	Y+1, r24	; 0x01
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	88 23       	and	r24, r24
    5e16:	09 f4       	brne	.+2      	; 0x5e1a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x32>
    5e18:	5d c0       	rjmp	.+186    	; 0x5ed4 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0xec>
#ifdef HAVE_PORTREG
      *clkport &= ~clkpinmask;
    5e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1e:	fc 01       	movw	r30, r24
    5e20:	84 a1       	ldd	r24, Z+36	; 0x24
    5e22:	95 a1       	ldd	r25, Z+37	; 0x25
    5e24:	2a 81       	ldd	r18, Y+2	; 0x02
    5e26:	3b 81       	ldd	r19, Y+3	; 0x03
    5e28:	f9 01       	movw	r30, r18
    5e2a:	24 a1       	ldd	r18, Z+36	; 0x24
    5e2c:	35 a1       	ldd	r19, Z+37	; 0x25
    5e2e:	f9 01       	movw	r30, r18
    5e30:	20 81       	ld	r18, Z
    5e32:	42 2f       	mov	r20, r18
    5e34:	2a 81       	ldd	r18, Y+2	; 0x02
    5e36:	3b 81       	ldd	r19, Y+3	; 0x03
    5e38:	f9 01       	movw	r30, r18
    5e3a:	23 a5       	ldd	r18, Z+43	; 0x2b
    5e3c:	20 95       	com	r18
    5e3e:	24 23       	and	r18, r20
    5e40:	fc 01       	movw	r30, r24
    5e42:	20 83       	st	Z, r18
      if(d & bit) *mosiport |=  mosipinmask;
    5e44:	9c 81       	ldd	r25, Y+4	; 0x04
    5e46:	89 81       	ldd	r24, Y+1	; 0x01
    5e48:	89 23       	and	r24, r25
    5e4a:	88 23       	and	r24, r24
    5e4c:	a1 f0       	breq	.+40     	; 0x5e76 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x8e>
    5e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e50:	9b 81       	ldd	r25, Y+3	; 0x03
    5e52:	fc 01       	movw	r30, r24
    5e54:	82 a1       	ldd	r24, Z+34	; 0x22
    5e56:	93 a1       	ldd	r25, Z+35	; 0x23
    5e58:	2a 81       	ldd	r18, Y+2	; 0x02
    5e5a:	3b 81       	ldd	r19, Y+3	; 0x03
    5e5c:	f9 01       	movw	r30, r18
    5e5e:	22 a1       	ldd	r18, Z+34	; 0x22
    5e60:	33 a1       	ldd	r19, Z+35	; 0x23
    5e62:	f9 01       	movw	r30, r18
    5e64:	40 81       	ld	r20, Z
    5e66:	2a 81       	ldd	r18, Y+2	; 0x02
    5e68:	3b 81       	ldd	r19, Y+3	; 0x03
    5e6a:	f9 01       	movw	r30, r18
    5e6c:	22 a5       	ldd	r18, Z+42	; 0x2a
    5e6e:	24 2b       	or	r18, r20
    5e70:	fc 01       	movw	r30, r24
    5e72:	20 83       	st	Z, r18
    5e74:	15 c0       	rjmp	.+42     	; 0x5ea0 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0xb8>
      else        *mosiport &= ~mosipinmask;
    5e76:	8a 81       	ldd	r24, Y+2	; 0x02
    5e78:	9b 81       	ldd	r25, Y+3	; 0x03
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	82 a1       	ldd	r24, Z+34	; 0x22
    5e7e:	93 a1       	ldd	r25, Z+35	; 0x23
    5e80:	2a 81       	ldd	r18, Y+2	; 0x02
    5e82:	3b 81       	ldd	r19, Y+3	; 0x03
    5e84:	f9 01       	movw	r30, r18
    5e86:	22 a1       	ldd	r18, Z+34	; 0x22
    5e88:	33 a1       	ldd	r19, Z+35	; 0x23
    5e8a:	f9 01       	movw	r30, r18
    5e8c:	20 81       	ld	r18, Z
    5e8e:	42 2f       	mov	r20, r18
    5e90:	2a 81       	ldd	r18, Y+2	; 0x02
    5e92:	3b 81       	ldd	r19, Y+3	; 0x03
    5e94:	f9 01       	movw	r30, r18
    5e96:	22 a5       	ldd	r18, Z+42	; 0x2a
    5e98:	20 95       	com	r18
    5e9a:	24 23       	and	r18, r20
    5e9c:	fc 01       	movw	r30, r24
    5e9e:	20 83       	st	Z, r18
      *clkport |=  clkpinmask;
    5ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	84 a1       	ldd	r24, Z+36	; 0x24
    5ea8:	95 a1       	ldd	r25, Z+37	; 0x25
    5eaa:	2a 81       	ldd	r18, Y+2	; 0x02
    5eac:	3b 81       	ldd	r19, Y+3	; 0x03
    5eae:	f9 01       	movw	r30, r18
    5eb0:	24 a1       	ldd	r18, Z+36	; 0x24
    5eb2:	35 a1       	ldd	r19, Z+37	; 0x25
    5eb4:	f9 01       	movw	r30, r18
    5eb6:	40 81       	ld	r20, Z
    5eb8:	2a 81       	ldd	r18, Y+2	; 0x02
    5eba:	3b 81       	ldd	r19, Y+3	; 0x03
    5ebc:	f9 01       	movw	r30, r18
    5ebe:	23 a5       	ldd	r18, Z+43	; 0x2b
    5ec0:	24 2b       	or	r18, r20
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	20 83       	st	Z, r18
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
    5ec6:	89 81       	ldd	r24, Y+1	; 0x01
    5ec8:	88 2f       	mov	r24, r24
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	95 95       	asr	r25
    5ece:	87 95       	ror	r24
    5ed0:	89 83       	std	Y+1, r24	; 0x01
    5ed2:	9f cf       	rjmp	.-194    	; 0x5e12 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x2a>
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
    5ed4:	00 00       	nop
    5ed6:	0f 90       	pop	r0
    5ed8:	0f 90       	pop	r0
    5eda:	0f 90       	pop	r0
    5edc:	0f 90       	pop	r0
    5ede:	df 91       	pop	r29
    5ee0:	cf 91       	pop	r28
    5ee2:	08 95       	ret

00005ee4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
    5ee4:	df 92       	push	r13
    5ee6:	ef 92       	push	r14
    5ee8:	ff 92       	push	r15
    5eea:	0f 93       	push	r16
    5eec:	1f 93       	push	r17
    5eee:	cf 93       	push	r28
    5ef0:	df 93       	push	r29
    5ef2:	cd b7       	in	r28, 0x3d	; 61
    5ef4:	de b7       	in	r29, 0x3e	; 62
    5ef6:	a3 97       	sbiw	r28, 0x23	; 35
    5ef8:	0f b6       	in	r0, 0x3f	; 63
    5efa:	f8 94       	cli
    5efc:	de bf       	out	0x3e, r29	; 62
    5efe:	0f be       	out	0x3f, r0	; 63
    5f00:	cd bf       	out	0x3d, r28	; 61
    5f02:	9b 8f       	std	Y+27, r25	; 0x1b
    5f04:	8a 8f       	std	Y+26, r24	; 0x1a
    5f06:	7d 8f       	std	Y+29, r23	; 0x1d
    5f08:	6c 8f       	std	Y+28, r22	; 0x1c
    5f0a:	5f 8f       	std	Y+31, r21	; 0x1f
    5f0c:	4e 8f       	std	Y+30, r20	; 0x1e
    5f0e:	39 a3       	std	Y+33, r19	; 0x21
    5f10:	28 a3       	std	Y+32, r18	; 0x20
    5f12:	1b a3       	std	Y+35, r17	; 0x23
    5f14:	0a a3       	std	Y+34, r16	; 0x22
  boolean bSwap = false;
    5f16:	19 82       	std	Y+1, r1	; 0x01
  switch(rotation) {
    5f18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f1c:	fc 01       	movw	r30, r24
    5f1e:	85 89       	ldd	r24, Z+21	; 0x15
    5f20:	88 2f       	mov	r24, r24
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	81 30       	cpi	r24, 0x01	; 1
    5f26:	91 05       	cpc	r25, r1
    5f28:	59 f0       	breq	.+22     	; 0x5f40 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x5c>
    5f2a:	82 30       	cpi	r24, 0x02	; 2
    5f2c:	91 05       	cpc	r25, r1
    5f2e:	0c f4       	brge	.+2      	; 0x5f32 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4e>
    5f30:	74 c0       	rjmp	.+232    	; 0x601a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x136>
    5f32:	82 30       	cpi	r24, 0x02	; 2
    5f34:	91 05       	cpc	r25, r1
    5f36:	09 f1       	breq	.+66     	; 0x5f7a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x96>
    5f38:	03 97       	sbiw	r24, 0x03	; 3
    5f3a:	09 f4       	brne	.+2      	; 0x5f3e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x5a>
    5f3c:	46 c0       	rjmp	.+140    	; 0x5fca <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xe6>
    5f3e:	6e c0       	rjmp	.+220    	; 0x601c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x138>
    case 0:
      // 0 degree rotation, do nothing
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
    5f40:	81 e0       	ldi	r24, 0x01	; 1
    5f42:	89 83       	std	Y+1, r24	; 0x01
      ssd1306_swap(x, y);
    5f44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5f48:	9b 83       	std	Y+3, r25	; 0x03
    5f4a:	8a 83       	std	Y+2, r24	; 0x02
    5f4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5f4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5f50:	9d 8f       	std	Y+29, r25	; 0x1d
    5f52:	8c 8f       	std	Y+28, r24	; 0x1c
    5f54:	8a 81       	ldd	r24, Y+2	; 0x02
    5f56:	9b 81       	ldd	r25, Y+3	; 0x03
    5f58:	9f 8f       	std	Y+31, r25	; 0x1f
    5f5a:	8e 8f       	std	Y+30, r24	; 0x1e
      x = WIDTH - x - 1;
    5f5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f60:	fc 01       	movw	r30, r24
    5f62:	24 81       	ldd	r18, Z+4	; 0x04
    5f64:	35 81       	ldd	r19, Z+5	; 0x05
    5f66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5f6a:	a9 01       	movw	r20, r18
    5f6c:	48 1b       	sub	r20, r24
    5f6e:	59 0b       	sbc	r21, r25
    5f70:	ca 01       	movw	r24, r20
    5f72:	01 97       	sbiw	r24, 0x01	; 1
    5f74:	9d 8f       	std	Y+29, r25	; 0x1d
    5f76:	8c 8f       	std	Y+28, r24	; 0x1c
      break;
    5f78:	51 c0       	rjmp	.+162    	; 0x601c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x138>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
    5f7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f7e:	fc 01       	movw	r30, r24
    5f80:	24 81       	ldd	r18, Z+4	; 0x04
    5f82:	35 81       	ldd	r19, Z+5	; 0x05
    5f84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5f88:	a9 01       	movw	r20, r18
    5f8a:	48 1b       	sub	r20, r24
    5f8c:	59 0b       	sbc	r21, r25
    5f8e:	ca 01       	movw	r24, r20
    5f90:	01 97       	sbiw	r24, 0x01	; 1
    5f92:	9d 8f       	std	Y+29, r25	; 0x1d
    5f94:	8c 8f       	std	Y+28, r24	; 0x1c
      y = HEIGHT - y - 1;
    5f96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	26 81       	ldd	r18, Z+6	; 0x06
    5f9e:	37 81       	ldd	r19, Z+7	; 0x07
    5fa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5fa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5fa4:	a9 01       	movw	r20, r18
    5fa6:	48 1b       	sub	r20, r24
    5fa8:	59 0b       	sbc	r21, r25
    5faa:	ca 01       	movw	r24, r20
    5fac:	01 97       	sbiw	r24, 0x01	; 1
    5fae:	9f 8f       	std	Y+31, r25	; 0x1f
    5fb0:	8e 8f       	std	Y+30, r24	; 0x1e
      x -= (w-1);
    5fb2:	88 a1       	ldd	r24, Y+32	; 0x20
    5fb4:	99 a1       	ldd	r25, Y+33	; 0x21
    5fb6:	01 97       	sbiw	r24, 0x01	; 1
    5fb8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5fba:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5fbc:	f9 01       	movw	r30, r18
    5fbe:	e8 1b       	sub	r30, r24
    5fc0:	f9 0b       	sbc	r31, r25
    5fc2:	cf 01       	movw	r24, r30
    5fc4:	9d 8f       	std	Y+29, r25	; 0x1d
    5fc6:	8c 8f       	std	Y+28, r24	; 0x1c
      break;
    5fc8:	29 c0       	rjmp	.+82     	; 0x601c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x138>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
    5fca:	81 e0       	ldi	r24, 0x01	; 1
    5fcc:	89 83       	std	Y+1, r24	; 0x01
      ssd1306_swap(x, y);
    5fce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5fd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5fd2:	9d 83       	std	Y+5, r25	; 0x05
    5fd4:	8c 83       	std	Y+4, r24	; 0x04
    5fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5fd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5fda:	9d 8f       	std	Y+29, r25	; 0x1d
    5fdc:	8c 8f       	std	Y+28, r24	; 0x1c
    5fde:	8c 81       	ldd	r24, Y+4	; 0x04
    5fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    5fe2:	9f 8f       	std	Y+31, r25	; 0x1f
    5fe4:	8e 8f       	std	Y+30, r24	; 0x1e
      y = HEIGHT - y - 1;
    5fe6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5fe8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5fea:	fc 01       	movw	r30, r24
    5fec:	26 81       	ldd	r18, Z+6	; 0x06
    5fee:	37 81       	ldd	r19, Z+7	; 0x07
    5ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5ff4:	a9 01       	movw	r20, r18
    5ff6:	48 1b       	sub	r20, r24
    5ff8:	59 0b       	sbc	r21, r25
    5ffa:	ca 01       	movw	r24, r20
    5ffc:	01 97       	sbiw	r24, 0x01	; 1
    5ffe:	9f 8f       	std	Y+31, r25	; 0x1f
    6000:	8e 8f       	std	Y+30, r24	; 0x1e
      y -= (w-1);
    6002:	88 a1       	ldd	r24, Y+32	; 0x20
    6004:	99 a1       	ldd	r25, Y+33	; 0x21
    6006:	01 97       	sbiw	r24, 0x01	; 1
    6008:	2e 8d       	ldd	r18, Y+30	; 0x1e
    600a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    600c:	f9 01       	movw	r30, r18
    600e:	e8 1b       	sub	r30, r24
    6010:	f9 0b       	sbc	r31, r25
    6012:	cf 01       	movw	r24, r30
    6014:	9f 8f       	std	Y+31, r25	; 0x1f
    6016:	8e 8f       	std	Y+30, r24	; 0x1e
      break;
    6018:	01 c0       	rjmp	.+2      	; 0x601c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x138>
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  boolean bSwap = false;
  switch(rotation) {
    case 0:
      // 0 degree rotation, do nothing
      break;
    601a:	00 00       	nop
      y = HEIGHT - y - 1;
      y -= (w-1);
      break;
  }

  if(bSwap) {
    601c:	89 81       	ldd	r24, Y+1	; 0x01
    601e:	88 23       	and	r24, r24
    6020:	09 f4       	brne	.+2      	; 0x6024 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x140>
    6022:	01 c1       	rjmp	.+514    	; 0x6226 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x342>
    6024:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6026:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6028:	99 87       	std	Y+9, r25	; 0x09
    602a:	88 87       	std	Y+8, r24	; 0x08
    602c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    602e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6030:	9b 87       	std	Y+11, r25	; 0x0b
    6032:	8a 87       	std	Y+10, r24	; 0x0a
    6034:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6036:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6038:	9d 87       	std	Y+13, r25	; 0x0d
    603a:	8c 87       	std	Y+12, r24	; 0x0c
    603c:	88 a1       	ldd	r24, Y+32	; 0x20
    603e:	99 a1       	ldd	r25, Y+33	; 0x21
    6040:	9f 87       	std	Y+15, r25	; 0x0f
    6042:	8e 87       	std	Y+14, r24	; 0x0e
    6044:	8a a1       	ldd	r24, Y+34	; 0x22
    6046:	9b a1       	ldd	r25, Y+35	; 0x23
    6048:	99 8b       	std	Y+17, r25	; 0x11
    604a:	88 8b       	std	Y+16, r24	; 0x10


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
    604c:	8a 85       	ldd	r24, Y+10	; 0x0a
    604e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6050:	99 23       	and	r25, r25
    6052:	0c f4       	brge	.+2      	; 0x6056 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x172>
    6054:	b1 c1       	rjmp	.+866    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    6056:	88 85       	ldd	r24, Y+8	; 0x08
    6058:	99 85       	ldd	r25, Y+9	; 0x09
    605a:	fc 01       	movw	r30, r24
    605c:	84 81       	ldd	r24, Z+4	; 0x04
    605e:	95 81       	ldd	r25, Z+5	; 0x05
    6060:	2a 85       	ldd	r18, Y+10	; 0x0a
    6062:	3b 85       	ldd	r19, Y+11	; 0x0b
    6064:	28 17       	cp	r18, r24
    6066:	39 07       	cpc	r19, r25
    6068:	0c f0       	brlt	.+2      	; 0x606c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x188>
    606a:	a6 c1       	rjmp	.+844    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
    606c:	8c 85       	ldd	r24, Y+12	; 0x0c
    606e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6070:	99 23       	and	r25, r25
    6072:	54 f4       	brge	.+20     	; 0x6088 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1a4>
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    6074:	2e 85       	ldd	r18, Y+14	; 0x0e
    6076:	3f 85       	ldd	r19, Y+15	; 0x0f
    6078:	8c 85       	ldd	r24, Y+12	; 0x0c
    607a:	9d 85       	ldd	r25, Y+13	; 0x0d
    607c:	82 0f       	add	r24, r18
    607e:	93 1f       	adc	r25, r19
    6080:	9f 87       	std	Y+15, r25	; 0x0f
    6082:	8e 87       	std	Y+14, r24	; 0x0e
    __y = 0;
    6084:	1d 86       	std	Y+13, r1	; 0x0d
    6086:	1c 86       	std	Y+12, r1	; 0x0c

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
    6088:	2c 85       	ldd	r18, Y+12	; 0x0c
    608a:	3d 85       	ldd	r19, Y+13	; 0x0d
    608c:	8e 85       	ldd	r24, Y+14	; 0x0e
    608e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6090:	28 0f       	add	r18, r24
    6092:	39 1f       	adc	r19, r25
    6094:	88 85       	ldd	r24, Y+8	; 0x08
    6096:	99 85       	ldd	r25, Y+9	; 0x09
    6098:	fc 01       	movw	r30, r24
    609a:	86 81       	ldd	r24, Z+6	; 0x06
    609c:	97 81       	ldd	r25, Z+7	; 0x07
    609e:	82 17       	cp	r24, r18
    60a0:	93 07       	cpc	r25, r19
    60a2:	6c f4       	brge	.+26     	; 0x60be <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1da>
    __h = (HEIGHT - __y);
    60a4:	88 85       	ldd	r24, Y+8	; 0x08
    60a6:	99 85       	ldd	r25, Y+9	; 0x09
    60a8:	fc 01       	movw	r30, r24
    60aa:	26 81       	ldd	r18, Z+6	; 0x06
    60ac:	37 81       	ldd	r19, Z+7	; 0x07
    60ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    60b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    60b2:	a9 01       	movw	r20, r18
    60b4:	48 1b       	sub	r20, r24
    60b6:	59 0b       	sbc	r21, r25
    60b8:	ca 01       	movw	r24, r20
    60ba:	9f 87       	std	Y+15, r25	; 0x0f
    60bc:	8e 87       	std	Y+14, r24	; 0x0e
  }

  // if our height is now negative, punt
  if(__h <= 0) {
    60be:	8e 85       	ldd	r24, Y+14	; 0x0e
    60c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    60c2:	18 16       	cp	r1, r24
    60c4:	19 06       	cpc	r1, r25
    60c6:	0c f0       	brlt	.+2      	; 0x60ca <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1e6>
    60c8:	77 c1       	rjmp	.+750    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
    60ca:	ec 84       	ldd	r14, Y+12	; 0x0c
  register uint8_t h = __h;
    60cc:	fe 84       	ldd	r15, Y+14	; 0x0e


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
    60ce:	06 e1       	ldi	r16, 0x16	; 22
    60d0:	11 e0       	ldi	r17, 0x01	; 1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
    60d2:	8e 2d       	mov	r24, r14
    60d4:	86 95       	lsr	r24
    60d6:	86 95       	lsr	r24
    60d8:	86 95       	lsr	r24
    60da:	88 2f       	mov	r24, r24
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	96 95       	lsr	r25
    60e0:	98 2f       	mov	r25, r24
    60e2:	88 27       	eor	r24, r24
    60e4:	97 95       	ror	r25
    60e6:	87 95       	ror	r24
    60e8:	08 0f       	add	r16, r24
    60ea:	19 1f       	adc	r17, r25
  // and offset x columns in
  pBuf += x;
    60ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    60ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    60f0:	08 0f       	add	r16, r24
    60f2:	19 1f       	adc	r17, r25

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
    60f4:	5e 2d       	mov	r21, r14
    60f6:	57 70       	andi	r21, 0x07	; 7
    60f8:	e5 2e       	mov	r14, r21
  if(mod) {
    60fa:	ee 20       	and	r14, r14
    60fc:	09 f4       	brne	.+2      	; 0x6100 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x21c>
    60fe:	42 c0       	rjmp	.+132    	; 0x6184 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2a0>
    // mask off the high n bits we want to set
    mod = 8-mod;
    6100:	88 e0       	ldi	r24, 0x08	; 8
    6102:	98 2f       	mov	r25, r24
    6104:	9e 19       	sub	r25, r14
    6106:	e9 2e       	mov	r14, r25

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
    6108:	8e 2d       	mov	r24, r14
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	8a 5e       	subi	r24, 0xEA	; 234
    610e:	9c 4f       	sbci	r25, 0xFC	; 252
    6110:	fc 01       	movw	r30, r24
    6112:	d0 80       	ld	r13, Z

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
    6114:	fe 14       	cp	r15, r14
    6116:	88 f4       	brcc	.+34     	; 0x613a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x256>
      mask &= (0XFF >> (mod-h));
    6118:	2e 2d       	mov	r18, r14
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	8f 2d       	mov	r24, r15
    611e:	90 e0       	ldi	r25, 0x00	; 0
    6120:	28 1b       	sub	r18, r24
    6122:	39 0b       	sbc	r19, r25
    6124:	8f ef       	ldi	r24, 0xFF	; 255
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	02 c0       	rjmp	.+4      	; 0x612e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x24a>
    612a:	95 95       	asr	r25
    612c:	87 95       	ror	r24
    612e:	2a 95       	dec	r18
    6130:	e2 f7       	brpl	.-8      	; 0x612a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x246>
    6132:	98 2f       	mov	r25, r24
    6134:	8d 2d       	mov	r24, r13
    6136:	89 23       	and	r24, r25
    6138:	d8 2e       	mov	r13, r24
    }

  switch (color)
    613a:	88 89       	ldd	r24, Y+16	; 0x10
    613c:	99 89       	ldd	r25, Y+17	; 0x11
    613e:	81 30       	cpi	r24, 0x01	; 1
    6140:	91 05       	cpc	r25, r1
    6142:	31 f0       	breq	.+12     	; 0x6150 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x26c>
    6144:	81 30       	cpi	r24, 0x01	; 1
    6146:	91 05       	cpc	r25, r1
    6148:	48 f0       	brcs	.+18     	; 0x615c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x278>
    614a:	02 97       	sbiw	r24, 0x02	; 2
    614c:	81 f0       	breq	.+32     	; 0x616e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28a>
    614e:	14 c0       	rjmp	.+40     	; 0x6178 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x294>
    {
    case WHITE:   *pBuf |=  mask;  break;
    6150:	f8 01       	movw	r30, r16
    6152:	80 81       	ld	r24, Z
    6154:	8d 29       	or	r24, r13
    6156:	f8 01       	movw	r30, r16
    6158:	80 83       	st	Z, r24
    615a:	0e c0       	rjmp	.+28     	; 0x6178 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x294>
    case BLACK:   *pBuf &= ~mask;  break;
    615c:	f8 01       	movw	r30, r16
    615e:	80 81       	ld	r24, Z
    6160:	98 2f       	mov	r25, r24
    6162:	8d 2d       	mov	r24, r13
    6164:	80 95       	com	r24
    6166:	89 23       	and	r24, r25
    6168:	f8 01       	movw	r30, r16
    616a:	80 83       	st	Z, r24
    616c:	05 c0       	rjmp	.+10     	; 0x6178 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x294>
    case INVERSE: *pBuf ^=  mask;  break;
    616e:	f8 01       	movw	r30, r16
    6170:	80 81       	ld	r24, Z
    6172:	8d 25       	eor	r24, r13
    6174:	f8 01       	movw	r30, r16
    6176:	80 83       	st	Z, r24
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
    6178:	fe 14       	cp	r15, r14
    617a:	08 f4       	brcc	.+2      	; 0x617e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x29a>
    617c:	1d c1       	rjmp	.+570    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>

    h -= mod;
    617e:	fe 18       	sub	r15, r14

    pBuf += SSD1306_LCDWIDTH;
    6180:	00 58       	subi	r16, 0x80	; 128
    6182:	1f 4f       	sbci	r17, 0xFF	; 255
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    6184:	f7 e0       	ldi	r31, 0x07	; 7
    6186:	ff 15       	cp	r31, r15
    6188:	10 f5       	brcc	.+68     	; 0x61ce <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ea>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    618a:	88 89       	ldd	r24, Y+16	; 0x10
    618c:	99 89       	ldd	r25, Y+17	; 0x11
    618e:	02 97       	sbiw	r24, 0x02	; 2
    6190:	69 f4       	brne	.+26     	; 0x61ac <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c8>
      do  {
      *pBuf=~(*pBuf);
    6192:	f8 01       	movw	r30, r16
    6194:	80 81       	ld	r24, Z
    6196:	80 95       	com	r24
    6198:	f8 01       	movw	r30, r16
    619a:	80 83       	st	Z, r24

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
    619c:	00 58       	subi	r16, 0x80	; 128
    619e:	1f 4f       	sbci	r17, 0xFF	; 255

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
    61a0:	f8 ef       	ldi	r31, 0xF8	; 248
    61a2:	ff 0e       	add	r15, r31
      } while(h >= 8);
    61a4:	47 e0       	ldi	r20, 0x07	; 7
    61a6:	4f 15       	cp	r20, r15
    61a8:	90 f4       	brcc	.+36     	; 0x61ce <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ea>
    61aa:	f3 cf       	rjmp	.-26     	; 0x6192 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ae>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
    61ac:	88 89       	ldd	r24, Y+16	; 0x10
    61ae:	99 89       	ldd	r25, Y+17	; 0x11
    61b0:	01 97       	sbiw	r24, 0x01	; 1
    61b2:	11 f4       	brne	.+4      	; 0x61b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2d4>
    61b4:	8f ef       	ldi	r24, 0xFF	; 255
    61b6:	01 c0       	rjmp	.+2      	; 0x61ba <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2d6>
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	e8 2e       	mov	r14, r24

      do  {
        // write our value in
      *pBuf = val;
    61bc:	f8 01       	movw	r30, r16
    61be:	e0 82       	st	Z, r14

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
    61c0:	00 58       	subi	r16, 0x80	; 128
    61c2:	1f 4f       	sbci	r17, 0xFF	; 255

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
    61c4:	f8 ef       	ldi	r31, 0xF8	; 248
    61c6:	ff 0e       	add	r15, r31
      } while(h >= 8);
    61c8:	47 e0       	ldi	r20, 0x07	; 7
    61ca:	4f 15       	cp	r20, r15
    61cc:	b8 f3       	brcs	.-18     	; 0x61bc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2d8>
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
    61ce:	ff 20       	and	r15, r15
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2f0>
    61d2:	f2 c0       	rjmp	.+484    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    mod = h & 7;
    61d4:	5f 2d       	mov	r21, r15
    61d6:	57 70       	andi	r21, 0x07	; 7
    61d8:	e5 2e       	mov	r14, r21
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    61da:	8e 2d       	mov	r24, r14
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	82 5e       	subi	r24, 0xE2	; 226
    61e0:	9c 4f       	sbci	r25, 0xFC	; 252
    61e2:	fc 01       	movw	r30, r24
    61e4:	f0 80       	ld	r15, Z
    switch (color)
    61e6:	88 89       	ldd	r24, Y+16	; 0x10
    61e8:	99 89       	ldd	r25, Y+17	; 0x11
    61ea:	81 30       	cpi	r24, 0x01	; 1
    61ec:	91 05       	cpc	r25, r1
    61ee:	31 f0       	breq	.+12     	; 0x61fc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x318>
    61f0:	81 30       	cpi	r24, 0x01	; 1
    61f2:	91 05       	cpc	r25, r1
    61f4:	48 f0       	brcs	.+18     	; 0x6208 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x324>
    61f6:	02 97       	sbiw	r24, 0x02	; 2
    61f8:	81 f0       	breq	.+32     	; 0x621a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x336>
  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}
    61fa:	de c0       	rjmp	.+444    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
    61fc:	f8 01       	movw	r30, r16
    61fe:	80 81       	ld	r24, Z
    6200:	8f 29       	or	r24, r15
    6202:	f8 01       	movw	r30, r16
    6204:	80 83       	st	Z, r24
  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}
    6206:	d8 c0       	rjmp	.+432    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
    6208:	f8 01       	movw	r30, r16
    620a:	80 81       	ld	r24, Z
    620c:	98 2f       	mov	r25, r24
    620e:	8f 2d       	mov	r24, r15
    6210:	80 95       	com	r24
    6212:	89 23       	and	r24, r25
    6214:	f8 01       	movw	r30, r16
    6216:	80 83       	st	Z, r24
  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}
    6218:	cf c0       	rjmp	.+414    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
    621a:	f8 01       	movw	r30, r16
    621c:	80 81       	ld	r24, Z
    621e:	8f 25       	eor	r24, r15
    6220:	f8 01       	movw	r30, r16
    6222:	80 83       	st	Z, r24
  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}
    6224:	c9 c0       	rjmp	.+402    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    6226:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6228:	9b 8d       	ldd	r25, Y+27	; 0x1b
    622a:	9f 83       	std	Y+7, r25	; 0x07
    622c:	8e 83       	std	Y+6, r24	; 0x06
    622e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6230:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6232:	9b 8b       	std	Y+19, r25	; 0x13
    6234:	8a 8b       	std	Y+18, r24	; 0x12
    6236:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6238:	9f 8d       	ldd	r25, Y+31	; 0x1f
    623a:	9d 8b       	std	Y+21, r25	; 0x15
    623c:	8c 8b       	std	Y+20, r24	; 0x14
    623e:	88 a1       	ldd	r24, Y+32	; 0x20
    6240:	99 a1       	ldd	r25, Y+33	; 0x21
    6242:	9f 8b       	std	Y+23, r25	; 0x17
    6244:	8e 8b       	std	Y+22, r24	; 0x16
    6246:	8a a1       	ldd	r24, Y+34	; 0x22
    6248:	9b a1       	ldd	r25, Y+35	; 0x23
    624a:	99 8f       	std	Y+25, r25	; 0x19
    624c:	88 8f       	std	Y+24, r24	; 0x18

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
    624e:	8c 89       	ldd	r24, Y+20	; 0x14
    6250:	9d 89       	ldd	r25, Y+21	; 0x15
    6252:	99 23       	and	r25, r25
    6254:	0c f4       	brge	.+2      	; 0x6258 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x374>
    6256:	b0 c0       	rjmp	.+352    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    6258:	8e 81       	ldd	r24, Y+6	; 0x06
    625a:	9f 81       	ldd	r25, Y+7	; 0x07
    625c:	fc 01       	movw	r30, r24
    625e:	86 81       	ldd	r24, Z+6	; 0x06
    6260:	97 81       	ldd	r25, Z+7	; 0x07
    6262:	2c 89       	ldd	r18, Y+20	; 0x14
    6264:	3d 89       	ldd	r19, Y+21	; 0x15
    6266:	28 17       	cp	r18, r24
    6268:	39 07       	cpc	r19, r25
    626a:	0c f0       	brlt	.+2      	; 0x626e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x38a>
    626c:	a5 c0       	rjmp	.+330    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>

  // make sure we don't try to draw below 0
  if(x < 0) {
    626e:	8a 89       	ldd	r24, Y+18	; 0x12
    6270:	9b 89       	ldd	r25, Y+19	; 0x13
    6272:	99 23       	and	r25, r25
    6274:	54 f4       	brge	.+20     	; 0x628a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x3a6>
    w += x;
    6276:	2e 89       	ldd	r18, Y+22	; 0x16
    6278:	3f 89       	ldd	r19, Y+23	; 0x17
    627a:	8a 89       	ldd	r24, Y+18	; 0x12
    627c:	9b 89       	ldd	r25, Y+19	; 0x13
    627e:	82 0f       	add	r24, r18
    6280:	93 1f       	adc	r25, r19
    6282:	9f 8b       	std	Y+23, r25	; 0x17
    6284:	8e 8b       	std	Y+22, r24	; 0x16
    x = 0;
    6286:	1b 8a       	std	Y+19, r1	; 0x13
    6288:	1a 8a       	std	Y+18, r1	; 0x12
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
    628a:	2a 89       	ldd	r18, Y+18	; 0x12
    628c:	3b 89       	ldd	r19, Y+19	; 0x13
    628e:	8e 89       	ldd	r24, Y+22	; 0x16
    6290:	9f 89       	ldd	r25, Y+23	; 0x17
    6292:	28 0f       	add	r18, r24
    6294:	39 1f       	adc	r19, r25
    6296:	8e 81       	ldd	r24, Y+6	; 0x06
    6298:	9f 81       	ldd	r25, Y+7	; 0x07
    629a:	fc 01       	movw	r30, r24
    629c:	84 81       	ldd	r24, Z+4	; 0x04
    629e:	95 81       	ldd	r25, Z+5	; 0x05
    62a0:	82 17       	cp	r24, r18
    62a2:	93 07       	cpc	r25, r19
    62a4:	6c f4       	brge	.+26     	; 0x62c0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x3dc>
    w = (WIDTH - x);
    62a6:	8e 81       	ldd	r24, Y+6	; 0x06
    62a8:	9f 81       	ldd	r25, Y+7	; 0x07
    62aa:	fc 01       	movw	r30, r24
    62ac:	24 81       	ldd	r18, Z+4	; 0x04
    62ae:	35 81       	ldd	r19, Z+5	; 0x05
    62b0:	8a 89       	ldd	r24, Y+18	; 0x12
    62b2:	9b 89       	ldd	r25, Y+19	; 0x13
    62b4:	a9 01       	movw	r20, r18
    62b6:	48 1b       	sub	r20, r24
    62b8:	59 0b       	sbc	r21, r25
    62ba:	ca 01       	movw	r24, r20
    62bc:	9f 8b       	std	Y+23, r25	; 0x17
    62be:	8e 8b       	std	Y+22, r24	; 0x16
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
    62c0:	8e 89       	ldd	r24, Y+22	; 0x16
    62c2:	9f 89       	ldd	r25, Y+23	; 0x17
    62c4:	18 16       	cp	r1, r24
    62c6:	19 06       	cpc	r1, r25
    62c8:	0c f0       	brlt	.+2      	; 0x62cc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x3e8>
    62ca:	76 c0       	rjmp	.+236    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
    62cc:	06 e1       	ldi	r16, 0x16	; 22
    62ce:	11 e0       	ldi	r17, 0x01	; 1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
    62d0:	8c 89       	ldd	r24, Y+20	; 0x14
    62d2:	9d 89       	ldd	r25, Y+21	; 0x15
    62d4:	99 23       	and	r25, r25
    62d6:	0c f4       	brge	.+2      	; 0x62da <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x3f6>
    62d8:	07 96       	adiw	r24, 0x07	; 7
    62da:	95 95       	asr	r25
    62dc:	87 95       	ror	r24
    62de:	95 95       	asr	r25
    62e0:	87 95       	ror	r24
    62e2:	95 95       	asr	r25
    62e4:	87 95       	ror	r24
    62e6:	96 95       	lsr	r25
    62e8:	98 2f       	mov	r25, r24
    62ea:	88 27       	eor	r24, r24
    62ec:	97 95       	ror	r25
    62ee:	87 95       	ror	r24
    62f0:	08 0f       	add	r16, r24
    62f2:	19 1f       	adc	r17, r25
  // and offset x columns in
  pBuf += x;
    62f4:	8a 89       	ldd	r24, Y+18	; 0x12
    62f6:	9b 89       	ldd	r25, Y+19	; 0x13
    62f8:	08 0f       	add	r16, r24
    62fa:	19 1f       	adc	r17, r25

  register uint8_t mask = 1 << (y&7);
    62fc:	8c 89       	ldd	r24, Y+20	; 0x14
    62fe:	9d 89       	ldd	r25, Y+21	; 0x15
    6300:	9c 01       	movw	r18, r24
    6302:	27 70       	andi	r18, 0x07	; 7
    6304:	33 27       	eor	r19, r19
    6306:	81 e0       	ldi	r24, 0x01	; 1
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	02 c0       	rjmp	.+4      	; 0x6310 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x42c>
    630c:	88 0f       	add	r24, r24
    630e:	99 1f       	adc	r25, r25
    6310:	2a 95       	dec	r18
    6312:	e2 f7       	brpl	.-8      	; 0x630c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x428>
    6314:	f8 2e       	mov	r15, r24

  switch (color)
    6316:	88 8d       	ldd	r24, Y+24	; 0x18
    6318:	99 8d       	ldd	r25, Y+25	; 0x19
    631a:	81 30       	cpi	r24, 0x01	; 1
    631c:	91 05       	cpc	r25, r1
    631e:	31 f0       	breq	.+12     	; 0x632c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x448>
    6320:	81 30       	cpi	r24, 0x01	; 1
    6322:	91 05       	cpc	r25, r1
    6324:	d0 f0       	brcs	.+52     	; 0x635a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x476>
    6326:	02 97       	sbiw	r24, 0x02	; 2
    6328:	81 f1       	breq	.+96     	; 0x638a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4a6>
  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}
    632a:	46 c0       	rjmp	.+140    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>

  register uint8_t mask = 1 << (y&7);

  switch (color)
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
    632c:	8e 89       	ldd	r24, Y+22	; 0x16
    632e:	9f 89       	ldd	r25, Y+23	; 0x17
    6330:	9c 01       	movw	r18, r24
    6332:	21 50       	subi	r18, 0x01	; 1
    6334:	31 09       	sbc	r19, r1
    6336:	3f 8b       	std	Y+23, r19	; 0x17
    6338:	2e 8b       	std	Y+22, r18	; 0x16
    633a:	21 e0       	ldi	r18, 0x01	; 1
    633c:	89 2b       	or	r24, r25
    633e:	09 f4       	brne	.+2      	; 0x6342 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x45e>
    6340:	20 e0       	ldi	r18, 0x00	; 0
    6342:	22 23       	and	r18, r18
    6344:	c9 f1       	breq	.+114    	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    6346:	c8 01       	movw	r24, r16
    6348:	8c 01       	movw	r16, r24
    634a:	0f 5f       	subi	r16, 0xFF	; 255
    634c:	1f 4f       	sbci	r17, 0xFF	; 255
    634e:	fc 01       	movw	r30, r24
    6350:	20 81       	ld	r18, Z
    6352:	2f 29       	or	r18, r15
    6354:	fc 01       	movw	r30, r24
    6356:	20 83       	st	Z, r18
    6358:	e9 cf       	rjmp	.-46     	; 0x632c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x448>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
    635a:	f0 94       	com	r15
    635c:	8e 89       	ldd	r24, Y+22	; 0x16
    635e:	9f 89       	ldd	r25, Y+23	; 0x17
    6360:	9c 01       	movw	r18, r24
    6362:	21 50       	subi	r18, 0x01	; 1
    6364:	31 09       	sbc	r19, r1
    6366:	3f 8b       	std	Y+23, r19	; 0x17
    6368:	2e 8b       	std	Y+22, r18	; 0x16
    636a:	21 e0       	ldi	r18, 0x01	; 1
    636c:	89 2b       	or	r24, r25
    636e:	09 f4       	brne	.+2      	; 0x6372 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x48e>
    6370:	20 e0       	ldi	r18, 0x00	; 0
    6372:	22 23       	and	r18, r18
    6374:	09 f1       	breq	.+66     	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    6376:	c8 01       	movw	r24, r16
    6378:	8c 01       	movw	r16, r24
    637a:	0f 5f       	subi	r16, 0xFF	; 255
    637c:	1f 4f       	sbci	r17, 0xFF	; 255
    637e:	fc 01       	movw	r30, r24
    6380:	20 81       	ld	r18, Z
    6382:	2f 21       	and	r18, r15
    6384:	fc 01       	movw	r30, r24
    6386:	20 83       	st	Z, r18
    6388:	e9 cf       	rjmp	.-46     	; 0x635c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x478>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
    638a:	8e 89       	ldd	r24, Y+22	; 0x16
    638c:	9f 89       	ldd	r25, Y+23	; 0x17
    638e:	9c 01       	movw	r18, r24
    6390:	21 50       	subi	r18, 0x01	; 1
    6392:	31 09       	sbc	r19, r1
    6394:	3f 8b       	std	Y+23, r19	; 0x17
    6396:	2e 8b       	std	Y+22, r18	; 0x16
    6398:	21 e0       	ldi	r18, 0x01	; 1
    639a:	89 2b       	or	r24, r25
    639c:	09 f4       	brne	.+2      	; 0x63a0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4bc>
    639e:	20 e0       	ldi	r18, 0x00	; 0
    63a0:	22 23       	and	r18, r18
    63a2:	51 f0       	breq	.+20     	; 0x63b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4d4>
    63a4:	c8 01       	movw	r24, r16
    63a6:	8c 01       	movw	r16, r24
    63a8:	0f 5f       	subi	r16, 0xFF	; 255
    63aa:	1f 4f       	sbci	r17, 0xFF	; 255
    63ac:	fc 01       	movw	r30, r24
    63ae:	20 81       	ld	r18, Z
    63b0:	2f 25       	eor	r18, r15
    63b2:	fc 01       	movw	r30, r24
    63b4:	20 83       	st	Z, r18
    63b6:	e9 cf       	rjmp	.-46     	; 0x638a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4a6>
  if(bSwap) {
    drawFastVLineInternal(x, y, w, color);
  } else {
    drawFastHLineInternal(x, y, w, color);
  }
}
    63b8:	00 00       	nop
    63ba:	a3 96       	adiw	r28, 0x23	; 35
    63bc:	0f b6       	in	r0, 0x3f	; 63
    63be:	f8 94       	cli
    63c0:	de bf       	out	0x3e, r29	; 62
    63c2:	0f be       	out	0x3f, r0	; 63
    63c4:	cd bf       	out	0x3d, r28	; 61
    63c6:	df 91       	pop	r29
    63c8:	cf 91       	pop	r28
    63ca:	1f 91       	pop	r17
    63cc:	0f 91       	pop	r16
    63ce:	ff 90       	pop	r15
    63d0:	ef 90       	pop	r14
    63d2:	df 90       	pop	r13
    63d4:	08 95       	ret

000063d6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
    63d6:	df 92       	push	r13
    63d8:	ef 92       	push	r14
    63da:	ff 92       	push	r15
    63dc:	0f 93       	push	r16
    63de:	1f 93       	push	r17
    63e0:	cf 93       	push	r28
    63e2:	df 93       	push	r29
    63e4:	cd b7       	in	r28, 0x3d	; 61
    63e6:	de b7       	in	r29, 0x3e	; 62
    63e8:	a3 97       	sbiw	r28, 0x23	; 35
    63ea:	0f b6       	in	r0, 0x3f	; 63
    63ec:	f8 94       	cli
    63ee:	de bf       	out	0x3e, r29	; 62
    63f0:	0f be       	out	0x3f, r0	; 63
    63f2:	cd bf       	out	0x3d, r28	; 61
    63f4:	9b 8f       	std	Y+27, r25	; 0x1b
    63f6:	8a 8f       	std	Y+26, r24	; 0x1a
    63f8:	7d 8f       	std	Y+29, r23	; 0x1d
    63fa:	6c 8f       	std	Y+28, r22	; 0x1c
    63fc:	5f 8f       	std	Y+31, r21	; 0x1f
    63fe:	4e 8f       	std	Y+30, r20	; 0x1e
    6400:	39 a3       	std	Y+33, r19	; 0x21
    6402:	28 a3       	std	Y+32, r18	; 0x20
    6404:	1b a3       	std	Y+35, r17	; 0x23
    6406:	0a a3       	std	Y+34, r16	; 0x22
  bool bSwap = false;
    6408:	19 82       	std	Y+1, r1	; 0x01
  switch(rotation) {
    640a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    640c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    640e:	fc 01       	movw	r30, r24
    6410:	85 89       	ldd	r24, Z+21	; 0x15
    6412:	88 2f       	mov	r24, r24
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	81 30       	cpi	r24, 0x01	; 1
    6418:	91 05       	cpc	r25, r1
    641a:	59 f0       	breq	.+22     	; 0x6432 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x5c>
    641c:	82 30       	cpi	r24, 0x02	; 2
    641e:	91 05       	cpc	r25, r1
    6420:	0c f4       	brge	.+2      	; 0x6424 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4e>
    6422:	74 c0       	rjmp	.+232    	; 0x650c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x136>
    6424:	82 30       	cpi	r24, 0x02	; 2
    6426:	91 05       	cpc	r25, r1
    6428:	61 f1       	breq	.+88     	; 0x6482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xac>
    642a:	03 97       	sbiw	r24, 0x03	; 3
    642c:	09 f4       	brne	.+2      	; 0x6430 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x5a>
    642e:	51 c0       	rjmp	.+162    	; 0x64d2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xfc>
    6430:	6e c0       	rjmp	.+220    	; 0x650e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x138>
    case 0:
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
    6432:	81 e0       	ldi	r24, 0x01	; 1
    6434:	89 83       	std	Y+1, r24	; 0x01
      ssd1306_swap(x, y);
    6436:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6438:	9d 8d       	ldd	r25, Y+29	; 0x1d
    643a:	9b 83       	std	Y+3, r25	; 0x03
    643c:	8a 83       	std	Y+2, r24	; 0x02
    643e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6440:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6442:	9d 8f       	std	Y+29, r25	; 0x1d
    6444:	8c 8f       	std	Y+28, r24	; 0x1c
    6446:	8a 81       	ldd	r24, Y+2	; 0x02
    6448:	9b 81       	ldd	r25, Y+3	; 0x03
    644a:	9f 8f       	std	Y+31, r25	; 0x1f
    644c:	8e 8f       	std	Y+30, r24	; 0x1e
      x = WIDTH - x - 1;
    644e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6450:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6452:	fc 01       	movw	r30, r24
    6454:	24 81       	ldd	r18, Z+4	; 0x04
    6456:	35 81       	ldd	r19, Z+5	; 0x05
    6458:	8c 8d       	ldd	r24, Y+28	; 0x1c
    645a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    645c:	a9 01       	movw	r20, r18
    645e:	48 1b       	sub	r20, r24
    6460:	59 0b       	sbc	r21, r25
    6462:	ca 01       	movw	r24, r20
    6464:	01 97       	sbiw	r24, 0x01	; 1
    6466:	9d 8f       	std	Y+29, r25	; 0x1d
    6468:	8c 8f       	std	Y+28, r24	; 0x1c
      x -= (h-1);
    646a:	88 a1       	ldd	r24, Y+32	; 0x20
    646c:	99 a1       	ldd	r25, Y+33	; 0x21
    646e:	01 97       	sbiw	r24, 0x01	; 1
    6470:	2c 8d       	ldd	r18, Y+28	; 0x1c
    6472:	3d 8d       	ldd	r19, Y+29	; 0x1d
    6474:	f9 01       	movw	r30, r18
    6476:	e8 1b       	sub	r30, r24
    6478:	f9 0b       	sbc	r31, r25
    647a:	cf 01       	movw	r24, r30
    647c:	9d 8f       	std	Y+29, r25	; 0x1d
    647e:	8c 8f       	std	Y+28, r24	; 0x1c
      break;
    6480:	46 c0       	rjmp	.+140    	; 0x650e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x138>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
    6482:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6484:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6486:	fc 01       	movw	r30, r24
    6488:	24 81       	ldd	r18, Z+4	; 0x04
    648a:	35 81       	ldd	r19, Z+5	; 0x05
    648c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    648e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6490:	a9 01       	movw	r20, r18
    6492:	48 1b       	sub	r20, r24
    6494:	59 0b       	sbc	r21, r25
    6496:	ca 01       	movw	r24, r20
    6498:	01 97       	sbiw	r24, 0x01	; 1
    649a:	9d 8f       	std	Y+29, r25	; 0x1d
    649c:	8c 8f       	std	Y+28, r24	; 0x1c
      y = HEIGHT - y - 1;
    649e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64a2:	fc 01       	movw	r30, r24
    64a4:	26 81       	ldd	r18, Z+6	; 0x06
    64a6:	37 81       	ldd	r19, Z+7	; 0x07
    64a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    64aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    64ac:	a9 01       	movw	r20, r18
    64ae:	48 1b       	sub	r20, r24
    64b0:	59 0b       	sbc	r21, r25
    64b2:	ca 01       	movw	r24, r20
    64b4:	01 97       	sbiw	r24, 0x01	; 1
    64b6:	9f 8f       	std	Y+31, r25	; 0x1f
    64b8:	8e 8f       	std	Y+30, r24	; 0x1e
      y -= (h-1);
    64ba:	88 a1       	ldd	r24, Y+32	; 0x20
    64bc:	99 a1       	ldd	r25, Y+33	; 0x21
    64be:	01 97       	sbiw	r24, 0x01	; 1
    64c0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    64c2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    64c4:	f9 01       	movw	r30, r18
    64c6:	e8 1b       	sub	r30, r24
    64c8:	f9 0b       	sbc	r31, r25
    64ca:	cf 01       	movw	r24, r30
    64cc:	9f 8f       	std	Y+31, r25	; 0x1f
    64ce:	8e 8f       	std	Y+30, r24	; 0x1e
      break;
    64d0:	1e c0       	rjmp	.+60     	; 0x650e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x138>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y
      bSwap = true;
    64d2:	81 e0       	ldi	r24, 0x01	; 1
    64d4:	89 83       	std	Y+1, r24	; 0x01
      ssd1306_swap(x, y);
    64d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    64d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    64da:	9d 83       	std	Y+5, r25	; 0x05
    64dc:	8c 83       	std	Y+4, r24	; 0x04
    64de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    64e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    64e2:	9d 8f       	std	Y+29, r25	; 0x1d
    64e4:	8c 8f       	std	Y+28, r24	; 0x1c
    64e6:	8c 81       	ldd	r24, Y+4	; 0x04
    64e8:	9d 81       	ldd	r25, Y+5	; 0x05
    64ea:	9f 8f       	std	Y+31, r25	; 0x1f
    64ec:	8e 8f       	std	Y+30, r24	; 0x1e
      y = HEIGHT - y - 1;
    64ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    64f2:	fc 01       	movw	r30, r24
    64f4:	26 81       	ldd	r18, Z+6	; 0x06
    64f6:	37 81       	ldd	r19, Z+7	; 0x07
    64f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    64fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    64fc:	a9 01       	movw	r20, r18
    64fe:	48 1b       	sub	r20, r24
    6500:	59 0b       	sbc	r21, r25
    6502:	ca 01       	movw	r24, r20
    6504:	01 97       	sbiw	r24, 0x01	; 1
    6506:	9f 8f       	std	Y+31, r25	; 0x1f
    6508:	8e 8f       	std	Y+30, r24	; 0x1e
      break;
    650a:	01 c0       	rjmp	.+2      	; 0x650e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x138>

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
  bool bSwap = false;
  switch(rotation) {
    case 0:
      break;
    650c:	00 00       	nop
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
  }

  if(bSwap) {
    650e:	89 81       	ldd	r24, Y+1	; 0x01
    6510:	88 23       	and	r24, r24
    6512:	09 f4       	brne	.+2      	; 0x6516 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x140>
    6514:	cc c0       	rjmp	.+408    	; 0x66ae <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2d8>
    6516:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6518:	9b 8d       	ldd	r25, Y+27	; 0x1b
    651a:	99 87       	std	Y+9, r25	; 0x09
    651c:	88 87       	std	Y+8, r24	; 0x08
    651e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6520:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6522:	9b 87       	std	Y+11, r25	; 0x0b
    6524:	8a 87       	std	Y+10, r24	; 0x0a
    6526:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6528:	9f 8d       	ldd	r25, Y+31	; 0x1f
    652a:	9d 87       	std	Y+13, r25	; 0x0d
    652c:	8c 87       	std	Y+12, r24	; 0x0c
    652e:	88 a1       	ldd	r24, Y+32	; 0x20
    6530:	99 a1       	ldd	r25, Y+33	; 0x21
    6532:	9f 87       	std	Y+15, r25	; 0x0f
    6534:	8e 87       	std	Y+14, r24	; 0x0e
    6536:	8a a1       	ldd	r24, Y+34	; 0x22
    6538:	9b a1       	ldd	r25, Y+35	; 0x23
    653a:	99 8b       	std	Y+17, r25	; 0x11
    653c:	88 8b       	std	Y+16, r24	; 0x10
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
    653e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6540:	9d 85       	ldd	r25, Y+13	; 0x0d
    6542:	99 23       	and	r25, r25
    6544:	0c f4       	brge	.+2      	; 0x6548 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x172>
    6546:	b2 c1       	rjmp	.+868    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    6548:	88 85       	ldd	r24, Y+8	; 0x08
    654a:	99 85       	ldd	r25, Y+9	; 0x09
    654c:	fc 01       	movw	r30, r24
    654e:	86 81       	ldd	r24, Z+6	; 0x06
    6550:	97 81       	ldd	r25, Z+7	; 0x07
    6552:	2c 85       	ldd	r18, Y+12	; 0x0c
    6554:	3d 85       	ldd	r19, Y+13	; 0x0d
    6556:	28 17       	cp	r18, r24
    6558:	39 07       	cpc	r19, r25
    655a:	0c f0       	brlt	.+2      	; 0x655e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x188>
    655c:	a7 c1       	rjmp	.+846    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>

  // make sure we don't try to draw below 0
  if(x < 0) {
    655e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6560:	9b 85       	ldd	r25, Y+11	; 0x0b
    6562:	99 23       	and	r25, r25
    6564:	54 f4       	brge	.+20     	; 0x657a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1a4>
    w += x;
    6566:	2e 85       	ldd	r18, Y+14	; 0x0e
    6568:	3f 85       	ldd	r19, Y+15	; 0x0f
    656a:	8a 85       	ldd	r24, Y+10	; 0x0a
    656c:	9b 85       	ldd	r25, Y+11	; 0x0b
    656e:	82 0f       	add	r24, r18
    6570:	93 1f       	adc	r25, r19
    6572:	9f 87       	std	Y+15, r25	; 0x0f
    6574:	8e 87       	std	Y+14, r24	; 0x0e
    x = 0;
    6576:	1b 86       	std	Y+11, r1	; 0x0b
    6578:	1a 86       	std	Y+10, r1	; 0x0a
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
    657a:	2a 85       	ldd	r18, Y+10	; 0x0a
    657c:	3b 85       	ldd	r19, Y+11	; 0x0b
    657e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6580:	9f 85       	ldd	r25, Y+15	; 0x0f
    6582:	28 0f       	add	r18, r24
    6584:	39 1f       	adc	r19, r25
    6586:	88 85       	ldd	r24, Y+8	; 0x08
    6588:	99 85       	ldd	r25, Y+9	; 0x09
    658a:	fc 01       	movw	r30, r24
    658c:	84 81       	ldd	r24, Z+4	; 0x04
    658e:	95 81       	ldd	r25, Z+5	; 0x05
    6590:	82 17       	cp	r24, r18
    6592:	93 07       	cpc	r25, r19
    6594:	6c f4       	brge	.+26     	; 0x65b0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1da>
    w = (WIDTH - x);
    6596:	88 85       	ldd	r24, Y+8	; 0x08
    6598:	99 85       	ldd	r25, Y+9	; 0x09
    659a:	fc 01       	movw	r30, r24
    659c:	24 81       	ldd	r18, Z+4	; 0x04
    659e:	35 81       	ldd	r19, Z+5	; 0x05
    65a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    65a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    65a4:	a9 01       	movw	r20, r18
    65a6:	48 1b       	sub	r20, r24
    65a8:	59 0b       	sbc	r21, r25
    65aa:	ca 01       	movw	r24, r20
    65ac:	9f 87       	std	Y+15, r25	; 0x0f
    65ae:	8e 87       	std	Y+14, r24	; 0x0e
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
    65b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    65b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    65b4:	18 16       	cp	r1, r24
    65b6:	19 06       	cpc	r1, r25
    65b8:	0c f0       	brlt	.+2      	; 0x65bc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e6>
    65ba:	78 c1       	rjmp	.+752    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
    65bc:	06 e1       	ldi	r16, 0x16	; 22
    65be:	11 e0       	ldi	r17, 0x01	; 1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
    65c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    65c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    65c4:	99 23       	and	r25, r25
    65c6:	0c f4       	brge	.+2      	; 0x65ca <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1f4>
    65c8:	07 96       	adiw	r24, 0x07	; 7
    65ca:	95 95       	asr	r25
    65cc:	87 95       	ror	r24
    65ce:	95 95       	asr	r25
    65d0:	87 95       	ror	r24
    65d2:	95 95       	asr	r25
    65d4:	87 95       	ror	r24
    65d6:	96 95       	lsr	r25
    65d8:	98 2f       	mov	r25, r24
    65da:	88 27       	eor	r24, r24
    65dc:	97 95       	ror	r25
    65de:	87 95       	ror	r24
    65e0:	08 0f       	add	r16, r24
    65e2:	19 1f       	adc	r17, r25
  // and offset x columns in
  pBuf += x;
    65e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    65e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    65e8:	08 0f       	add	r16, r24
    65ea:	19 1f       	adc	r17, r25

  register uint8_t mask = 1 << (y&7);
    65ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    65ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    65f0:	9c 01       	movw	r18, r24
    65f2:	27 70       	andi	r18, 0x07	; 7
    65f4:	33 27       	eor	r19, r19
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	02 c0       	rjmp	.+4      	; 0x6600 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x22a>
    65fc:	88 0f       	add	r24, r24
    65fe:	99 1f       	adc	r25, r25
    6600:	2a 95       	dec	r18
    6602:	e2 f7       	brpl	.-8      	; 0x65fc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x226>
    6604:	f8 2e       	mov	r15, r24

  switch (color)
    6606:	88 89       	ldd	r24, Y+16	; 0x10
    6608:	99 89       	ldd	r25, Y+17	; 0x11
    660a:	81 30       	cpi	r24, 0x01	; 1
    660c:	91 05       	cpc	r25, r1
    660e:	31 f0       	breq	.+12     	; 0x661c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x246>
    6610:	81 30       	cpi	r24, 0x01	; 1
    6612:	91 05       	cpc	r25, r1
    6614:	d8 f0       	brcs	.+54     	; 0x664c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x276>
    6616:	02 97       	sbiw	r24, 0x02	; 2
    6618:	91 f1       	breq	.+100    	; 0x667e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a8>
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
    661a:	48 c1       	rjmp	.+656    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>

  register uint8_t mask = 1 << (y&7);

  switch (color)
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
    661c:	8e 85       	ldd	r24, Y+14	; 0x0e
    661e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6620:	9c 01       	movw	r18, r24
    6622:	21 50       	subi	r18, 0x01	; 1
    6624:	31 09       	sbc	r19, r1
    6626:	3f 87       	std	Y+15, r19	; 0x0f
    6628:	2e 87       	std	Y+14, r18	; 0x0e
    662a:	21 e0       	ldi	r18, 0x01	; 1
    662c:	89 2b       	or	r24, r25
    662e:	09 f4       	brne	.+2      	; 0x6632 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x25c>
    6630:	20 e0       	ldi	r18, 0x00	; 0
    6632:	22 23       	and	r18, r18
    6634:	09 f4       	brne	.+2      	; 0x6638 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x262>
    6636:	3a c1       	rjmp	.+628    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    6638:	c8 01       	movw	r24, r16
    663a:	8c 01       	movw	r16, r24
    663c:	0f 5f       	subi	r16, 0xFF	; 255
    663e:	1f 4f       	sbci	r17, 0xFF	; 255
    6640:	fc 01       	movw	r30, r24
    6642:	20 81       	ld	r18, Z
    6644:	2f 29       	or	r18, r15
    6646:	fc 01       	movw	r30, r24
    6648:	20 83       	st	Z, r18
    664a:	e8 cf       	rjmp	.-48     	; 0x661c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x246>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
    664c:	f0 94       	com	r15
    664e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6650:	9f 85       	ldd	r25, Y+15	; 0x0f
    6652:	9c 01       	movw	r18, r24
    6654:	21 50       	subi	r18, 0x01	; 1
    6656:	31 09       	sbc	r19, r1
    6658:	3f 87       	std	Y+15, r19	; 0x0f
    665a:	2e 87       	std	Y+14, r18	; 0x0e
    665c:	21 e0       	ldi	r18, 0x01	; 1
    665e:	89 2b       	or	r24, r25
    6660:	09 f4       	brne	.+2      	; 0x6664 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x28e>
    6662:	20 e0       	ldi	r18, 0x00	; 0
    6664:	22 23       	and	r18, r18
    6666:	09 f4       	brne	.+2      	; 0x666a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x294>
    6668:	21 c1       	rjmp	.+578    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    666a:	c8 01       	movw	r24, r16
    666c:	8c 01       	movw	r16, r24
    666e:	0f 5f       	subi	r16, 0xFF	; 255
    6670:	1f 4f       	sbci	r17, 0xFF	; 255
    6672:	fc 01       	movw	r30, r24
    6674:	20 81       	ld	r18, Z
    6676:	2f 21       	and	r18, r15
    6678:	fc 01       	movw	r30, r24
    667a:	20 83       	st	Z, r18
    667c:	e8 cf       	rjmp	.-48     	; 0x664e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x278>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
    667e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6680:	9f 85       	ldd	r25, Y+15	; 0x0f
    6682:	9c 01       	movw	r18, r24
    6684:	21 50       	subi	r18, 0x01	; 1
    6686:	31 09       	sbc	r19, r1
    6688:	3f 87       	std	Y+15, r19	; 0x0f
    668a:	2e 87       	std	Y+14, r18	; 0x0e
    668c:	21 e0       	ldi	r18, 0x01	; 1
    668e:	89 2b       	or	r24, r25
    6690:	09 f4       	brne	.+2      	; 0x6694 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2be>
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	22 23       	and	r18, r18
    6696:	09 f4       	brne	.+2      	; 0x669a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c4>
    6698:	09 c1       	rjmp	.+530    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    669a:	c8 01       	movw	r24, r16
    669c:	8c 01       	movw	r16, r24
    669e:	0f 5f       	subi	r16, 0xFF	; 255
    66a0:	1f 4f       	sbci	r17, 0xFF	; 255
    66a2:	fc 01       	movw	r30, r24
    66a4:	20 81       	ld	r18, Z
    66a6:	2f 25       	eor	r18, r15
    66a8:	fc 01       	movw	r30, r24
    66aa:	20 83       	st	Z, r18
    66ac:	e8 cf       	rjmp	.-48     	; 0x667e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a8>
    66ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    66b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    66b2:	9f 83       	std	Y+7, r25	; 0x07
    66b4:	8e 83       	std	Y+6, r24	; 0x06
    66b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    66ba:	9b 8b       	std	Y+19, r25	; 0x13
    66bc:	8a 8b       	std	Y+18, r24	; 0x12
    66be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    66c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    66c2:	9d 8b       	std	Y+21, r25	; 0x15
    66c4:	8c 8b       	std	Y+20, r24	; 0x14
    66c6:	88 a1       	ldd	r24, Y+32	; 0x20
    66c8:	99 a1       	ldd	r25, Y+33	; 0x21
    66ca:	9f 8b       	std	Y+23, r25	; 0x17
    66cc:	8e 8b       	std	Y+22, r24	; 0x16
    66ce:	8a a1       	ldd	r24, Y+34	; 0x22
    66d0:	9b a1       	ldd	r25, Y+35	; 0x23
    66d2:	99 8f       	std	Y+25, r25	; 0x19
    66d4:	88 8f       	std	Y+24, r24	; 0x18


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
    66d6:	8a 89       	ldd	r24, Y+18	; 0x12
    66d8:	9b 89       	ldd	r25, Y+19	; 0x13
    66da:	99 23       	and	r25, r25
    66dc:	0c f4       	brge	.+2      	; 0x66e0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x30a>
    66de:	e6 c0       	rjmp	.+460    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    66e0:	8e 81       	ldd	r24, Y+6	; 0x06
    66e2:	9f 81       	ldd	r25, Y+7	; 0x07
    66e4:	fc 01       	movw	r30, r24
    66e6:	84 81       	ldd	r24, Z+4	; 0x04
    66e8:	95 81       	ldd	r25, Z+5	; 0x05
    66ea:	2a 89       	ldd	r18, Y+18	; 0x12
    66ec:	3b 89       	ldd	r19, Y+19	; 0x13
    66ee:	28 17       	cp	r18, r24
    66f0:	39 07       	cpc	r19, r25
    66f2:	0c f0       	brlt	.+2      	; 0x66f6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x320>
    66f4:	db c0       	rjmp	.+438    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>

  // make sure we don't try to draw below 0
  if(__y < 0) {
    66f6:	8c 89       	ldd	r24, Y+20	; 0x14
    66f8:	9d 89       	ldd	r25, Y+21	; 0x15
    66fa:	99 23       	and	r25, r25
    66fc:	54 f4       	brge	.+20     	; 0x6712 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x33c>
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    66fe:	2e 89       	ldd	r18, Y+22	; 0x16
    6700:	3f 89       	ldd	r19, Y+23	; 0x17
    6702:	8c 89       	ldd	r24, Y+20	; 0x14
    6704:	9d 89       	ldd	r25, Y+21	; 0x15
    6706:	82 0f       	add	r24, r18
    6708:	93 1f       	adc	r25, r19
    670a:	9f 8b       	std	Y+23, r25	; 0x17
    670c:	8e 8b       	std	Y+22, r24	; 0x16
    __y = 0;
    670e:	1d 8a       	std	Y+21, r1	; 0x15
    6710:	1c 8a       	std	Y+20, r1	; 0x14

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
    6712:	2c 89       	ldd	r18, Y+20	; 0x14
    6714:	3d 89       	ldd	r19, Y+21	; 0x15
    6716:	8e 89       	ldd	r24, Y+22	; 0x16
    6718:	9f 89       	ldd	r25, Y+23	; 0x17
    671a:	28 0f       	add	r18, r24
    671c:	39 1f       	adc	r19, r25
    671e:	8e 81       	ldd	r24, Y+6	; 0x06
    6720:	9f 81       	ldd	r25, Y+7	; 0x07
    6722:	fc 01       	movw	r30, r24
    6724:	86 81       	ldd	r24, Z+6	; 0x06
    6726:	97 81       	ldd	r25, Z+7	; 0x07
    6728:	82 17       	cp	r24, r18
    672a:	93 07       	cpc	r25, r19
    672c:	6c f4       	brge	.+26     	; 0x6748 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x372>
    __h = (HEIGHT - __y);
    672e:	8e 81       	ldd	r24, Y+6	; 0x06
    6730:	9f 81       	ldd	r25, Y+7	; 0x07
    6732:	fc 01       	movw	r30, r24
    6734:	26 81       	ldd	r18, Z+6	; 0x06
    6736:	37 81       	ldd	r19, Z+7	; 0x07
    6738:	8c 89       	ldd	r24, Y+20	; 0x14
    673a:	9d 89       	ldd	r25, Y+21	; 0x15
    673c:	a9 01       	movw	r20, r18
    673e:	48 1b       	sub	r20, r24
    6740:	59 0b       	sbc	r21, r25
    6742:	ca 01       	movw	r24, r20
    6744:	9f 8b       	std	Y+23, r25	; 0x17
    6746:	8e 8b       	std	Y+22, r24	; 0x16
  }

  // if our height is now negative, punt
  if(__h <= 0) {
    6748:	8e 89       	ldd	r24, Y+22	; 0x16
    674a:	9f 89       	ldd	r25, Y+23	; 0x17
    674c:	18 16       	cp	r1, r24
    674e:	19 06       	cpc	r1, r25
    6750:	0c f0       	brlt	.+2      	; 0x6754 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x37e>
    6752:	ac c0       	rjmp	.+344    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
    6754:	ec 88       	ldd	r14, Y+20	; 0x14
  register uint8_t h = __h;
    6756:	fe 88       	ldd	r15, Y+22	; 0x16


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
    6758:	06 e1       	ldi	r16, 0x16	; 22
    675a:	11 e0       	ldi	r17, 0x01	; 1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
    675c:	8e 2d       	mov	r24, r14
    675e:	86 95       	lsr	r24
    6760:	86 95       	lsr	r24
    6762:	86 95       	lsr	r24
    6764:	88 2f       	mov	r24, r24
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	96 95       	lsr	r25
    676a:	98 2f       	mov	r25, r24
    676c:	88 27       	eor	r24, r24
    676e:	97 95       	ror	r25
    6770:	87 95       	ror	r24
    6772:	08 0f       	add	r16, r24
    6774:	19 1f       	adc	r17, r25
  // and offset x columns in
  pBuf += x;
    6776:	8a 89       	ldd	r24, Y+18	; 0x12
    6778:	9b 89       	ldd	r25, Y+19	; 0x13
    677a:	08 0f       	add	r16, r24
    677c:	19 1f       	adc	r17, r25

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
    677e:	5e 2d       	mov	r21, r14
    6780:	57 70       	andi	r21, 0x07	; 7
    6782:	e5 2e       	mov	r14, r21
  if(mod) {
    6784:	ee 20       	and	r14, r14
    6786:	09 f4       	brne	.+2      	; 0x678a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x3b4>
    6788:	42 c0       	rjmp	.+132    	; 0x680e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x438>
    // mask off the high n bits we want to set
    mod = 8-mod;
    678a:	88 e0       	ldi	r24, 0x08	; 8
    678c:	98 2f       	mov	r25, r24
    678e:	9e 19       	sub	r25, r14
    6790:	e9 2e       	mov	r14, r25

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
    6792:	8e 2d       	mov	r24, r14
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	8a 5e       	subi	r24, 0xEA	; 234
    6798:	9c 4f       	sbci	r25, 0xFC	; 252
    679a:	fc 01       	movw	r30, r24
    679c:	d0 80       	ld	r13, Z

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
    679e:	fe 14       	cp	r15, r14
    67a0:	88 f4       	brcc	.+34     	; 0x67c4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x3ee>
      mask &= (0XFF >> (mod-h));
    67a2:	2e 2d       	mov	r18, r14
    67a4:	30 e0       	ldi	r19, 0x00	; 0
    67a6:	8f 2d       	mov	r24, r15
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	28 1b       	sub	r18, r24
    67ac:	39 0b       	sbc	r19, r25
    67ae:	8f ef       	ldi	r24, 0xFF	; 255
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	02 c0       	rjmp	.+4      	; 0x67b8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x3e2>
    67b4:	95 95       	asr	r25
    67b6:	87 95       	ror	r24
    67b8:	2a 95       	dec	r18
    67ba:	e2 f7       	brpl	.-8      	; 0x67b4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x3de>
    67bc:	98 2f       	mov	r25, r24
    67be:	8d 2d       	mov	r24, r13
    67c0:	89 23       	and	r24, r25
    67c2:	d8 2e       	mov	r13, r24
    }

  switch (color)
    67c4:	88 8d       	ldd	r24, Y+24	; 0x18
    67c6:	99 8d       	ldd	r25, Y+25	; 0x19
    67c8:	81 30       	cpi	r24, 0x01	; 1
    67ca:	91 05       	cpc	r25, r1
    67cc:	31 f0       	breq	.+12     	; 0x67da <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x404>
    67ce:	81 30       	cpi	r24, 0x01	; 1
    67d0:	91 05       	cpc	r25, r1
    67d2:	48 f0       	brcs	.+18     	; 0x67e6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x410>
    67d4:	02 97       	sbiw	r24, 0x02	; 2
    67d6:	81 f0       	breq	.+32     	; 0x67f8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x422>
    67d8:	14 c0       	rjmp	.+40     	; 0x6802 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x42c>
    {
    case WHITE:   *pBuf |=  mask;  break;
    67da:	f8 01       	movw	r30, r16
    67dc:	80 81       	ld	r24, Z
    67de:	8d 29       	or	r24, r13
    67e0:	f8 01       	movw	r30, r16
    67e2:	80 83       	st	Z, r24
    67e4:	0e c0       	rjmp	.+28     	; 0x6802 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x42c>
    case BLACK:   *pBuf &= ~mask;  break;
    67e6:	f8 01       	movw	r30, r16
    67e8:	80 81       	ld	r24, Z
    67ea:	98 2f       	mov	r25, r24
    67ec:	8d 2d       	mov	r24, r13
    67ee:	80 95       	com	r24
    67f0:	89 23       	and	r24, r25
    67f2:	f8 01       	movw	r30, r16
    67f4:	80 83       	st	Z, r24
    67f6:	05 c0       	rjmp	.+10     	; 0x6802 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x42c>
    case INVERSE: *pBuf ^=  mask;  break;
    67f8:	f8 01       	movw	r30, r16
    67fa:	80 81       	ld	r24, Z
    67fc:	8d 25       	eor	r24, r13
    67fe:	f8 01       	movw	r30, r16
    6800:	80 83       	st	Z, r24
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
    6802:	fe 14       	cp	r15, r14
    6804:	08 f4       	brcc	.+2      	; 0x6808 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x432>
    6806:	52 c0       	rjmp	.+164    	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>

    h -= mod;
    6808:	fe 18       	sub	r15, r14

    pBuf += SSD1306_LCDWIDTH;
    680a:	00 58       	subi	r16, 0x80	; 128
    680c:	1f 4f       	sbci	r17, 0xFF	; 255
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    680e:	f7 e0       	ldi	r31, 0x07	; 7
    6810:	ff 15       	cp	r31, r15
    6812:	10 f5       	brcc	.+68     	; 0x6858 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x482>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    6814:	88 8d       	ldd	r24, Y+24	; 0x18
    6816:	99 8d       	ldd	r25, Y+25	; 0x19
    6818:	02 97       	sbiw	r24, 0x02	; 2
    681a:	69 f4       	brne	.+26     	; 0x6836 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x460>
      do  {
      *pBuf=~(*pBuf);
    681c:	f8 01       	movw	r30, r16
    681e:	80 81       	ld	r24, Z
    6820:	80 95       	com	r24
    6822:	f8 01       	movw	r30, r16
    6824:	80 83       	st	Z, r24

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
    6826:	00 58       	subi	r16, 0x80	; 128
    6828:	1f 4f       	sbci	r17, 0xFF	; 255

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
    682a:	f8 ef       	ldi	r31, 0xF8	; 248
    682c:	ff 0e       	add	r15, r31
      } while(h >= 8);
    682e:	47 e0       	ldi	r20, 0x07	; 7
    6830:	4f 15       	cp	r20, r15
    6832:	90 f4       	brcc	.+36     	; 0x6858 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x482>
    6834:	f3 cf       	rjmp	.-26     	; 0x681c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x446>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
    6836:	88 8d       	ldd	r24, Y+24	; 0x18
    6838:	99 8d       	ldd	r25, Y+25	; 0x19
    683a:	01 97       	sbiw	r24, 0x01	; 1
    683c:	11 f4       	brne	.+4      	; 0x6842 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x46c>
    683e:	8f ef       	ldi	r24, 0xFF	; 255
    6840:	01 c0       	rjmp	.+2      	; 0x6844 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x46e>
    6842:	80 e0       	ldi	r24, 0x00	; 0
    6844:	e8 2e       	mov	r14, r24

      do  {
        // write our value in
      *pBuf = val;
    6846:	f8 01       	movw	r30, r16
    6848:	e0 82       	st	Z, r14

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
    684a:	00 58       	subi	r16, 0x80	; 128
    684c:	1f 4f       	sbci	r17, 0xFF	; 255

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
    684e:	f8 ef       	ldi	r31, 0xF8	; 248
    6850:	ff 0e       	add	r15, r31
      } while(h >= 8);
    6852:	47 e0       	ldi	r20, 0x07	; 7
    6854:	4f 15       	cp	r20, r15
    6856:	b8 f3       	brcs	.-18     	; 0x6846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x470>
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
    6858:	ff 20       	and	r15, r15
    685a:	41 f1       	breq	.+80     	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    mod = h & 7;
    685c:	5f 2d       	mov	r21, r15
    685e:	57 70       	andi	r21, 0x07	; 7
    6860:	e5 2e       	mov	r14, r21
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    6862:	8e 2d       	mov	r24, r14
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	82 5e       	subi	r24, 0xE2	; 226
    6868:	9c 4f       	sbci	r25, 0xFC	; 252
    686a:	fc 01       	movw	r30, r24
    686c:	f0 80       	ld	r15, Z
    switch (color)
    686e:	88 8d       	ldd	r24, Y+24	; 0x18
    6870:	99 8d       	ldd	r25, Y+25	; 0x19
    6872:	81 30       	cpi	r24, 0x01	; 1
    6874:	91 05       	cpc	r25, r1
    6876:	31 f0       	breq	.+12     	; 0x6884 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4ae>
    6878:	81 30       	cpi	r24, 0x01	; 1
    687a:	91 05       	cpc	r25, r1
    687c:	48 f0       	brcs	.+18     	; 0x6890 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4ba>
    687e:	02 97       	sbiw	r24, 0x02	; 2
    6880:	81 f0       	breq	.+32     	; 0x68a2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4cc>
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
    6882:	14 c0       	rjmp	.+40     	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
    6884:	f8 01       	movw	r30, r16
    6886:	80 81       	ld	r24, Z
    6888:	8f 29       	or	r24, r15
    688a:	f8 01       	movw	r30, r16
    688c:	80 83       	st	Z, r24
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
    688e:	0e c0       	rjmp	.+28     	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
    6890:	f8 01       	movw	r30, r16
    6892:	80 81       	ld	r24, Z
    6894:	98 2f       	mov	r25, r24
    6896:	8f 2d       	mov	r24, r15
    6898:	80 95       	com	r24
    689a:	89 23       	and	r24, r25
    689c:	f8 01       	movw	r30, r16
    689e:	80 83       	st	Z, r24
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
    68a0:	05 c0       	rjmp	.+10     	; 0x68ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4d6>
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
    68a2:	f8 01       	movw	r30, r16
    68a4:	80 81       	ld	r24, Z
    68a6:	8f 25       	eor	r24, r15
    68a8:	f8 01       	movw	r30, r16
    68aa:	80 83       	st	Z, r24
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
    68ac:	00 00       	nop
    68ae:	a3 96       	adiw	r28, 0x23	; 35
    68b0:	0f b6       	in	r0, 0x3f	; 63
    68b2:	f8 94       	cli
    68b4:	de bf       	out	0x3e, r29	; 62
    68b6:	0f be       	out	0x3f, r0	; 63
    68b8:	cd bf       	out	0x3d, r28	; 61
    68ba:	df 91       	pop	r29
    68bc:	cf 91       	pop	r28
    68be:	1f 91       	pop	r17
    68c0:	0f 91       	pop	r16
    68c2:	ff 90       	pop	r15
    68c4:	ef 90       	pop	r14
    68c6:	df 90       	pop	r13
    68c8:	08 95       	ret

000068ca <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    68ca:	cf 93       	push	r28
    68cc:	df 93       	push	r29
    68ce:	cd b7       	in	r28, 0x3d	; 61
    68d0:	de b7       	in	r29, 0x3e	; 62
    68d2:	2f 97       	sbiw	r28, 0x0f	; 15
    68d4:	0f b6       	in	r0, 0x3f	; 63
    68d6:	f8 94       	cli
    68d8:	de bf       	out	0x3e, r29	; 62
    68da:	0f be       	out	0x3f, r0	; 63
    68dc:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    68de:	8f e5       	ldi	r24, 0x5F	; 95
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	fc 01       	movw	r30, r24
    68e4:	80 81       	ld	r24, Z
    68e6:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    68e8:	f8 94       	cli
  if (!initialized) {
    68ea:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <_ZN8SPIClass11initializedE>
    68ee:	88 23       	and	r24, r24
    68f0:	09 f0       	breq	.+2      	; 0x68f4 <_ZN8SPIClass5beginEv+0x2a>
    68f2:	5b c0       	rjmp	.+182    	; 0x69aa <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    68f4:	86 e9       	ldi	r24, 0x96	; 150
    68f6:	92 e0       	ldi	r25, 0x02	; 2
    68f8:	9b 83       	std	Y+3, r25	; 0x03
    68fa:	8a 83       	std	Y+2, r24	; 0x02
    68fc:	8a 81       	ldd	r24, Y+2	; 0x02
    68fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6900:	fc 01       	movw	r30, r24
    6902:	84 91       	lpm	r24, Z
    6904:	8c 83       	std	Y+4, r24	; 0x04
    6906:	8c 81       	ldd	r24, Y+4	; 0x04
    6908:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    690a:	8a ea       	ldi	r24, 0xAA	; 170
    690c:	92 e0       	ldi	r25, 0x02	; 2
    690e:	9f 83       	std	Y+7, r25	; 0x07
    6910:	8e 83       	std	Y+6, r24	; 0x06
    6912:	8e 81       	ldd	r24, Y+6	; 0x06
    6914:	9f 81       	ldd	r25, Y+7	; 0x07
    6916:	fc 01       	movw	r30, r24
    6918:	84 91       	lpm	r24, Z
    691a:	88 87       	std	Y+8, r24	; 0x08
    691c:	88 85       	ldd	r24, Y+8	; 0x08
    691e:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    6920:	8d 81       	ldd	r24, Y+5	; 0x05
    6922:	88 2f       	mov	r24, r24
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	88 0f       	add	r24, r24
    6928:	99 1f       	adc	r25, r25
    692a:	82 59       	subi	r24, 0x92	; 146
    692c:	9d 4f       	sbci	r25, 0xFD	; 253
    692e:	9b 87       	std	Y+11, r25	; 0x0b
    6930:	8a 87       	std	Y+10, r24	; 0x0a
    6932:	8a 85       	ldd	r24, Y+10	; 0x0a
    6934:	9b 85       	ldd	r25, Y+11	; 0x0b
    6936:	fc 01       	movw	r30, r24
    6938:	25 91       	lpm	r18, Z+
    693a:	34 91       	lpm	r19, Z
    693c:	cf 01       	movw	r24, r30
    693e:	3d 87       	std	Y+13, r19	; 0x0d
    6940:	2c 87       	std	Y+12, r18	; 0x0c
    6942:	9b 87       	std	Y+11, r25	; 0x0b
    6944:	8a 87       	std	Y+10, r24	; 0x0a
    6946:	8c 85       	ldd	r24, Y+12	; 0x0c
    6948:	9d 85       	ldd	r25, Y+13	; 0x0d
    694a:	9f 87       	std	Y+15, r25	; 0x0f
    694c:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    694e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6950:	9f 85       	ldd	r25, Y+15	; 0x0f
    6952:	fc 01       	movw	r30, r24
    6954:	90 81       	ld	r25, Z
    6956:	89 85       	ldd	r24, Y+9	; 0x09
    6958:	98 23       	and	r25, r24
    695a:	81 e0       	ldi	r24, 0x01	; 1
    695c:	99 23       	and	r25, r25
    695e:	09 f0       	breq	.+2      	; 0x6962 <_ZN8SPIClass5beginEv+0x98>
    6960:	80 e0       	ldi	r24, 0x00	; 0
    6962:	88 23       	and	r24, r24
    6964:	21 f0       	breq	.+8      	; 0x696e <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    6966:	61 e0       	ldi	r22, 0x01	; 1
    6968:	8a e0       	ldi	r24, 0x0A	; 10
    696a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    696e:	61 e0       	ldi	r22, 0x01	; 1
    6970:	8a e0       	ldi	r24, 0x0A	; 10
    6972:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6976:	8c e4       	ldi	r24, 0x4C	; 76
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	2c e4       	ldi	r18, 0x4C	; 76
    697c:	30 e0       	ldi	r19, 0x00	; 0
    697e:	f9 01       	movw	r30, r18
    6980:	20 81       	ld	r18, Z
    6982:	20 61       	ori	r18, 0x10	; 16
    6984:	fc 01       	movw	r30, r24
    6986:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    6988:	8c e4       	ldi	r24, 0x4C	; 76
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	2c e4       	ldi	r18, 0x4C	; 76
    698e:	30 e0       	ldi	r19, 0x00	; 0
    6990:	f9 01       	movw	r30, r18
    6992:	20 81       	ld	r18, Z
    6994:	20 64       	ori	r18, 0x40	; 64
    6996:	fc 01       	movw	r30, r24
    6998:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    699a:	61 e0       	ldi	r22, 0x01	; 1
    699c:	8d e0       	ldi	r24, 0x0D	; 13
    699e:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    pinMode(MOSI, OUTPUT);
    69a2:	61 e0       	ldi	r22, 0x01	; 1
    69a4:	8b e0       	ldi	r24, 0x0B	; 11
    69a6:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
  }
  initialized++; // reference count
    69aa:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <_ZN8SPIClass11initializedE>
    69ae:	8f 5f       	subi	r24, 0xFF	; 255
    69b0:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    69b4:	8f e5       	ldi	r24, 0x5F	; 95
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	29 81       	ldd	r18, Y+1	; 0x01
    69ba:	fc 01       	movw	r30, r24
    69bc:	20 83       	st	Z, r18
}
    69be:	00 00       	nop
    69c0:	2f 96       	adiw	r28, 0x0f	; 15
    69c2:	0f b6       	in	r0, 0x3f	; 63
    69c4:	f8 94       	cli
    69c6:	de bf       	out	0x3e, r29	; 62
    69c8:	0f be       	out	0x3f, r0	; 63
    69ca:	cd bf       	out	0x3d, r28	; 61
    69cc:	df 91       	pop	r29
    69ce:	cf 91       	pop	r28
    69d0:	08 95       	ret

000069d2 <__vector_13>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    69d2:	1f 92       	push	r1
    69d4:	0f 92       	push	r0
    69d6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    69da:	0f 92       	push	r0
    69dc:	11 24       	eor	r1, r1
    69de:	2f 93       	push	r18
    69e0:	3f 93       	push	r19
    69e2:	4f 93       	push	r20
    69e4:	5f 93       	push	r21
    69e6:	6f 93       	push	r22
    69e8:	7f 93       	push	r23
    69ea:	8f 93       	push	r24
    69ec:	9f 93       	push	r25
    69ee:	af 93       	push	r26
    69f0:	bf 93       	push	r27
    69f2:	ef 93       	push	r30
    69f4:	ff 93       	push	r31
    69f6:	cf 93       	push	r28
    69f8:	df 93       	push	r29
    69fa:	cd b7       	in	r28, 0x3d	; 61
    69fc:	de b7       	in	r29, 0x3e	; 62
  Timer1.isrCallback();
    69fe:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <_ZN8TimerOne11isrCallbackE>
    6a02:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <_ZN8TimerOne11isrCallbackE+0x1>
    6a06:	fc 01       	movw	r30, r24
    6a08:	09 95       	icall
}
    6a0a:	00 00       	nop
    6a0c:	df 91       	pop	r29
    6a0e:	cf 91       	pop	r28
    6a10:	ff 91       	pop	r31
    6a12:	ef 91       	pop	r30
    6a14:	bf 91       	pop	r27
    6a16:	af 91       	pop	r26
    6a18:	9f 91       	pop	r25
    6a1a:	8f 91       	pop	r24
    6a1c:	7f 91       	pop	r23
    6a1e:	6f 91       	pop	r22
    6a20:	5f 91       	pop	r21
    6a22:	4f 91       	pop	r20
    6a24:	3f 91       	pop	r19
    6a26:	2f 91       	pop	r18
    6a28:	0f 90       	pop	r0
    6a2a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    6a2e:	0f 90       	pop	r0
    6a30:	1f 90       	pop	r1
    6a32:	18 95       	reti

00006a34 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    6a34:	cf 93       	push	r28
    6a36:	df 93       	push	r29
    6a38:	00 d0       	rcall	.+0      	; 0x6a3a <_ZN5Print13setWriteErrorEi+0x6>
    6a3a:	00 d0       	rcall	.+0      	; 0x6a3c <_ZN5Print13setWriteErrorEi+0x8>
    6a3c:	cd b7       	in	r28, 0x3d	; 61
    6a3e:	de b7       	in	r29, 0x3e	; 62
    6a40:	9a 83       	std	Y+2, r25	; 0x02
    6a42:	89 83       	std	Y+1, r24	; 0x01
    6a44:	7c 83       	std	Y+4, r23	; 0x04
    6a46:	6b 83       	std	Y+3, r22	; 0x03
    6a48:	89 81       	ldd	r24, Y+1	; 0x01
    6a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    6a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    6a50:	fc 01       	movw	r30, r24
    6a52:	33 83       	std	Z+3, r19	; 0x03
    6a54:	22 83       	std	Z+2, r18	; 0x02
    6a56:	00 00       	nop
    6a58:	0f 90       	pop	r0
    6a5a:	0f 90       	pop	r0
    6a5c:	0f 90       	pop	r0
    6a5e:	0f 90       	pop	r0
    6a60:	df 91       	pop	r29
    6a62:	cf 91       	pop	r28
    6a64:	08 95       	ret

00006a66 <_ZN7TwoWireC1Ev>:
    6a66:	cf 93       	push	r28
    6a68:	df 93       	push	r29
    6a6a:	00 d0       	rcall	.+0      	; 0x6a6c <_ZN7TwoWireC1Ev+0x6>
    6a6c:	cd b7       	in	r28, 0x3d	; 61
    6a6e:	de b7       	in	r29, 0x3e	; 62
    6a70:	9a 83       	std	Y+2, r25	; 0x02
    6a72:	89 83       	std	Y+1, r24	; 0x01
    6a74:	89 81       	ldd	r24, Y+1	; 0x01
    6a76:	9a 81       	ldd	r25, Y+2	; 0x02
    6a78:	0e 94 b6 12 	call	0x256c	; 0x256c <_ZN6StreamC1Ev>
    6a7c:	20 ef       	ldi	r18, 0xF0	; 240
    6a7e:	33 e0       	ldi	r19, 0x03	; 3
    6a80:	89 81       	ldd	r24, Y+1	; 0x01
    6a82:	9a 81       	ldd	r25, Y+2	; 0x02
    6a84:	fc 01       	movw	r30, r24
    6a86:	31 83       	std	Z+1, r19	; 0x01
    6a88:	20 83       	st	Z, r18
    6a8a:	00 00       	nop
    6a8c:	0f 90       	pop	r0
    6a8e:	0f 90       	pop	r0
    6a90:	df 91       	pop	r29
    6a92:	cf 91       	pop	r28
    6a94:	08 95       	ret

00006a96 <_ZN7TwoWire5beginEv>:
    6a96:	cf 93       	push	r28
    6a98:	df 93       	push	r29
    6a9a:	00 d0       	rcall	.+0      	; 0x6a9c <_ZN7TwoWire5beginEv+0x6>
    6a9c:	cd b7       	in	r28, 0x3d	; 61
    6a9e:	de b7       	in	r29, 0x3e	; 62
    6aa0:	9a 83       	std	Y+2, r25	; 0x02
    6aa2:	89 83       	std	Y+1, r24	; 0x01
    6aa4:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6aa8:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZN7TwoWire14rxBufferLengthE>
    6aac:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6ab0:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZN7TwoWire14txBufferLengthE>
    6ab4:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <twi_init>
    6ab8:	00 00       	nop
    6aba:	0f 90       	pop	r0
    6abc:	0f 90       	pop	r0
    6abe:	df 91       	pop	r29
    6ac0:	cf 91       	pop	r28
    6ac2:	08 95       	ret

00006ac4 <_ZN7TwoWire17beginTransmissionEh>:
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	00 d0       	rcall	.+0      	; 0x6aca <_ZN7TwoWire17beginTransmissionEh+0x6>
    6aca:	1f 92       	push	r1
    6acc:	cd b7       	in	r28, 0x3d	; 61
    6ace:	de b7       	in	r29, 0x3e	; 62
    6ad0:	9a 83       	std	Y+2, r25	; 0x02
    6ad2:	89 83       	std	Y+1, r24	; 0x01
    6ad4:	6b 83       	std	Y+3, r22	; 0x03
    6ad6:	81 e0       	ldi	r24, 0x01	; 1
    6ad8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <_ZN7TwoWire12transmittingE>
    6adc:	8b 81       	ldd	r24, Y+3	; 0x03
    6ade:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <_ZN7TwoWire9txAddressE>
    6ae2:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6ae6:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZN7TwoWire14txBufferLengthE>
    6aea:	00 00       	nop
    6aec:	0f 90       	pop	r0
    6aee:	0f 90       	pop	r0
    6af0:	0f 90       	pop	r0
    6af2:	df 91       	pop	r29
    6af4:	cf 91       	pop	r28
    6af6:	08 95       	ret

00006af8 <_ZN7TwoWire17beginTransmissionEi>:
    6af8:	cf 93       	push	r28
    6afa:	df 93       	push	r29
    6afc:	00 d0       	rcall	.+0      	; 0x6afe <_ZN7TwoWire17beginTransmissionEi+0x6>
    6afe:	00 d0       	rcall	.+0      	; 0x6b00 <_ZN7TwoWire17beginTransmissionEi+0x8>
    6b00:	cd b7       	in	r28, 0x3d	; 61
    6b02:	de b7       	in	r29, 0x3e	; 62
    6b04:	9a 83       	std	Y+2, r25	; 0x02
    6b06:	89 83       	std	Y+1, r24	; 0x01
    6b08:	7c 83       	std	Y+4, r23	; 0x04
    6b0a:	6b 83       	std	Y+3, r22	; 0x03
    6b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    6b0e:	89 81       	ldd	r24, Y+1	; 0x01
    6b10:	9a 81       	ldd	r25, Y+2	; 0x02
    6b12:	62 2f       	mov	r22, r18
    6b14:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <_ZN7TwoWire17beginTransmissionEh>
    6b18:	00 00       	nop
    6b1a:	0f 90       	pop	r0
    6b1c:	0f 90       	pop	r0
    6b1e:	0f 90       	pop	r0
    6b20:	0f 90       	pop	r0
    6b22:	df 91       	pop	r29
    6b24:	cf 91       	pop	r28
    6b26:	08 95       	ret

00006b28 <_ZN7TwoWire15endTransmissionEh>:
    6b28:	0f 93       	push	r16
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	00 d0       	rcall	.+0      	; 0x6b30 <_ZN7TwoWire15endTransmissionEh+0x8>
    6b30:	00 d0       	rcall	.+0      	; 0x6b32 <_ZN7TwoWire15endTransmissionEh+0xa>
    6b32:	cd b7       	in	r28, 0x3d	; 61
    6b34:	de b7       	in	r29, 0x3e	; 62
    6b36:	9b 83       	std	Y+3, r25	; 0x03
    6b38:	8a 83       	std	Y+2, r24	; 0x02
    6b3a:	6c 83       	std	Y+4, r22	; 0x04
    6b3c:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <_ZN7TwoWire14txBufferLengthE>
    6b40:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <_ZN7TwoWire9txAddressE>
    6b44:	0c 81       	ldd	r16, Y+4	; 0x04
    6b46:	21 e0       	ldi	r18, 0x01	; 1
    6b48:	49 2f       	mov	r20, r25
    6b4a:	6c e6       	ldi	r22, 0x6C	; 108
    6b4c:	75 e0       	ldi	r23, 0x05	; 5
    6b4e:	0e 94 31 37 	call	0x6e62	; 0x6e62 <twi_writeTo>
    6b52:	89 83       	std	Y+1, r24	; 0x01
    6b54:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6b58:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZN7TwoWire14txBufferLengthE>
    6b5c:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <_ZN7TwoWire12transmittingE>
    6b60:	89 81       	ldd	r24, Y+1	; 0x01
    6b62:	0f 90       	pop	r0
    6b64:	0f 90       	pop	r0
    6b66:	0f 90       	pop	r0
    6b68:	0f 90       	pop	r0
    6b6a:	df 91       	pop	r29
    6b6c:	cf 91       	pop	r28
    6b6e:	0f 91       	pop	r16
    6b70:	08 95       	ret

00006b72 <_ZN7TwoWire15endTransmissionEv>:
    6b72:	cf 93       	push	r28
    6b74:	df 93       	push	r29
    6b76:	00 d0       	rcall	.+0      	; 0x6b78 <_ZN7TwoWire15endTransmissionEv+0x6>
    6b78:	cd b7       	in	r28, 0x3d	; 61
    6b7a:	de b7       	in	r29, 0x3e	; 62
    6b7c:	9a 83       	std	Y+2, r25	; 0x02
    6b7e:	89 83       	std	Y+1, r24	; 0x01
    6b80:	89 81       	ldd	r24, Y+1	; 0x01
    6b82:	9a 81       	ldd	r25, Y+2	; 0x02
    6b84:	61 e0       	ldi	r22, 0x01	; 1
    6b86:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN7TwoWire15endTransmissionEh>
    6b8a:	0f 90       	pop	r0
    6b8c:	0f 90       	pop	r0
    6b8e:	df 91       	pop	r29
    6b90:	cf 91       	pop	r28
    6b92:	08 95       	ret

00006b94 <_ZN7TwoWire5writeEh>:
    6b94:	cf 93       	push	r28
    6b96:	df 93       	push	r29
    6b98:	00 d0       	rcall	.+0      	; 0x6b9a <_ZN7TwoWire5writeEh+0x6>
    6b9a:	1f 92       	push	r1
    6b9c:	cd b7       	in	r28, 0x3d	; 61
    6b9e:	de b7       	in	r29, 0x3e	; 62
    6ba0:	9a 83       	std	Y+2, r25	; 0x02
    6ba2:	89 83       	std	Y+1, r24	; 0x01
    6ba4:	6b 83       	std	Y+3, r22	; 0x03
    6ba6:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <_ZN7TwoWire12transmittingE>
    6baa:	88 23       	and	r24, r24
    6bac:	01 f1       	breq	.+64     	; 0x6bee <_ZN7TwoWire5writeEh+0x5a>
    6bae:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <_ZN7TwoWire14txBufferLengthE>
    6bb2:	80 32       	cpi	r24, 0x20	; 32
    6bb4:	48 f0       	brcs	.+18     	; 0x6bc8 <_ZN7TwoWire5writeEh+0x34>
    6bb6:	89 81       	ldd	r24, Y+1	; 0x01
    6bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bba:	61 e0       	ldi	r22, 0x01	; 1
    6bbc:	70 e0       	ldi	r23, 0x00	; 0
    6bbe:	0e 94 1a 35 	call	0x6a34	; 0x6a34 <_ZN5Print13setWriteErrorEi>
    6bc2:	80 e0       	ldi	r24, 0x00	; 0
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	1a c0       	rjmp	.+52     	; 0x6bfc <_ZN7TwoWire5writeEh+0x68>
    6bc8:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6bcc:	88 2f       	mov	r24, r24
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    6bd2:	84 59       	subi	r24, 0x94	; 148
    6bd4:	9a 4f       	sbci	r25, 0xFA	; 250
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	20 83       	st	Z, r18
    6bda:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6bde:	8f 5f       	subi	r24, 0xFF	; 255
    6be0:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6be4:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    6be8:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <_ZN7TwoWire14txBufferLengthE>
    6bec:	05 c0       	rjmp	.+10     	; 0x6bf8 <_ZN7TwoWire5writeEh+0x64>
    6bee:	ce 01       	movw	r24, r28
    6bf0:	03 96       	adiw	r24, 0x03	; 3
    6bf2:	61 e0       	ldi	r22, 0x01	; 1
    6bf4:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <twi_transmit>
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	0f 90       	pop	r0
    6bfe:	0f 90       	pop	r0
    6c00:	0f 90       	pop	r0
    6c02:	df 91       	pop	r29
    6c04:	cf 91       	pop	r28
    6c06:	08 95       	ret

00006c08 <_ZN7TwoWire5writeEPKhj>:
    6c08:	cf 93       	push	r28
    6c0a:	df 93       	push	r29
    6c0c:	cd b7       	in	r28, 0x3d	; 61
    6c0e:	de b7       	in	r29, 0x3e	; 62
    6c10:	28 97       	sbiw	r28, 0x08	; 8
    6c12:	0f b6       	in	r0, 0x3f	; 63
    6c14:	f8 94       	cli
    6c16:	de bf       	out	0x3e, r29	; 62
    6c18:	0f be       	out	0x3f, r0	; 63
    6c1a:	cd bf       	out	0x3d, r28	; 61
    6c1c:	9c 83       	std	Y+4, r25	; 0x04
    6c1e:	8b 83       	std	Y+3, r24	; 0x03
    6c20:	7e 83       	std	Y+6, r23	; 0x06
    6c22:	6d 83       	std	Y+5, r22	; 0x05
    6c24:	58 87       	std	Y+8, r21	; 0x08
    6c26:	4f 83       	std	Y+7, r20	; 0x07
    6c28:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <_ZN7TwoWire12transmittingE>
    6c2c:	88 23       	and	r24, r24
    6c2e:	21 f1       	breq	.+72     	; 0x6c78 <_ZN7TwoWire5writeEPKhj+0x70>
    6c30:	1a 82       	std	Y+2, r1	; 0x02
    6c32:	19 82       	std	Y+1, r1	; 0x01
    6c34:	29 81       	ldd	r18, Y+1	; 0x01
    6c36:	3a 81       	ldd	r19, Y+2	; 0x02
    6c38:	8f 81       	ldd	r24, Y+7	; 0x07
    6c3a:	98 85       	ldd	r25, Y+8	; 0x08
    6c3c:	28 17       	cp	r18, r24
    6c3e:	39 07       	cpc	r19, r25
    6c40:	08 f5       	brcc	.+66     	; 0x6c84 <_ZN7TwoWire5writeEPKhj+0x7c>
    6c42:	8b 81       	ldd	r24, Y+3	; 0x03
    6c44:	9c 81       	ldd	r25, Y+4	; 0x04
    6c46:	fc 01       	movw	r30, r24
    6c48:	80 81       	ld	r24, Z
    6c4a:	91 81       	ldd	r25, Z+1	; 0x01
    6c4c:	fc 01       	movw	r30, r24
    6c4e:	20 81       	ld	r18, Z
    6c50:	31 81       	ldd	r19, Z+1	; 0x01
    6c52:	4d 81       	ldd	r20, Y+5	; 0x05
    6c54:	5e 81       	ldd	r21, Y+6	; 0x06
    6c56:	89 81       	ldd	r24, Y+1	; 0x01
    6c58:	9a 81       	ldd	r25, Y+2	; 0x02
    6c5a:	84 0f       	add	r24, r20
    6c5c:	95 1f       	adc	r25, r21
    6c5e:	fc 01       	movw	r30, r24
    6c60:	40 81       	ld	r20, Z
    6c62:	8b 81       	ldd	r24, Y+3	; 0x03
    6c64:	9c 81       	ldd	r25, Y+4	; 0x04
    6c66:	64 2f       	mov	r22, r20
    6c68:	f9 01       	movw	r30, r18
    6c6a:	09 95       	icall
    6c6c:	89 81       	ldd	r24, Y+1	; 0x01
    6c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    6c70:	01 96       	adiw	r24, 0x01	; 1
    6c72:	9a 83       	std	Y+2, r25	; 0x02
    6c74:	89 83       	std	Y+1, r24	; 0x01
    6c76:	de cf       	rjmp	.-68     	; 0x6c34 <_ZN7TwoWire5writeEPKhj+0x2c>
    6c78:	2f 81       	ldd	r18, Y+7	; 0x07
    6c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c7e:	62 2f       	mov	r22, r18
    6c80:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <twi_transmit>
    6c84:	8f 81       	ldd	r24, Y+7	; 0x07
    6c86:	98 85       	ldd	r25, Y+8	; 0x08
    6c88:	28 96       	adiw	r28, 0x08	; 8
    6c8a:	0f b6       	in	r0, 0x3f	; 63
    6c8c:	f8 94       	cli
    6c8e:	de bf       	out	0x3e, r29	; 62
    6c90:	0f be       	out	0x3f, r0	; 63
    6c92:	cd bf       	out	0x3d, r28	; 61
    6c94:	df 91       	pop	r29
    6c96:	cf 91       	pop	r28
    6c98:	08 95       	ret

00006c9a <_ZN7TwoWire9availableEv>:
    6c9a:	cf 93       	push	r28
    6c9c:	df 93       	push	r29
    6c9e:	00 d0       	rcall	.+0      	; 0x6ca0 <_ZN7TwoWire9availableEv+0x6>
    6ca0:	cd b7       	in	r28, 0x3d	; 61
    6ca2:	de b7       	in	r29, 0x3e	; 62
    6ca4:	9a 83       	std	Y+2, r25	; 0x02
    6ca6:	89 83       	std	Y+1, r24	; 0x01
    6ca8:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_ZN7TwoWire14rxBufferLengthE>
    6cac:	28 2f       	mov	r18, r24
    6cae:	30 e0       	ldi	r19, 0x00	; 0
    6cb0:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6cb4:	88 2f       	mov	r24, r24
    6cb6:	90 e0       	ldi	r25, 0x00	; 0
    6cb8:	a9 01       	movw	r20, r18
    6cba:	48 1b       	sub	r20, r24
    6cbc:	59 0b       	sbc	r21, r25
    6cbe:	ca 01       	movw	r24, r20
    6cc0:	0f 90       	pop	r0
    6cc2:	0f 90       	pop	r0
    6cc4:	df 91       	pop	r29
    6cc6:	cf 91       	pop	r28
    6cc8:	08 95       	ret

00006cca <_ZN7TwoWire4readEv>:
    6cca:	cf 93       	push	r28
    6ccc:	df 93       	push	r29
    6cce:	00 d0       	rcall	.+0      	; 0x6cd0 <_ZN7TwoWire4readEv+0x6>
    6cd0:	00 d0       	rcall	.+0      	; 0x6cd2 <_ZN7TwoWire4readEv+0x8>
    6cd2:	cd b7       	in	r28, 0x3d	; 61
    6cd4:	de b7       	in	r29, 0x3e	; 62
    6cd6:	9c 83       	std	Y+4, r25	; 0x04
    6cd8:	8b 83       	std	Y+3, r24	; 0x03
    6cda:	8f ef       	ldi	r24, 0xFF	; 255
    6cdc:	9f ef       	ldi	r25, 0xFF	; 255
    6cde:	9a 83       	std	Y+2, r25	; 0x02
    6ce0:	89 83       	std	Y+1, r24	; 0x01
    6ce2:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6ce6:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_ZN7TwoWire14rxBufferLengthE>
    6cea:	98 17       	cp	r25, r24
    6cec:	88 f4       	brcc	.+34     	; 0x6d10 <_ZN7TwoWire4readEv+0x46>
    6cee:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6cf2:	88 2f       	mov	r24, r24
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	87 5b       	subi	r24, 0xB7	; 183
    6cf8:	9a 4f       	sbci	r25, 0xFA	; 250
    6cfa:	fc 01       	movw	r30, r24
    6cfc:	80 81       	ld	r24, Z
    6cfe:	88 2f       	mov	r24, r24
    6d00:	90 e0       	ldi	r25, 0x00	; 0
    6d02:	9a 83       	std	Y+2, r25	; 0x02
    6d04:	89 83       	std	Y+1, r24	; 0x01
    6d06:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6d0a:	8f 5f       	subi	r24, 0xFF	; 255
    6d0c:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6d10:	89 81       	ldd	r24, Y+1	; 0x01
    6d12:	9a 81       	ldd	r25, Y+2	; 0x02
    6d14:	0f 90       	pop	r0
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	df 91       	pop	r29
    6d1e:	cf 91       	pop	r28
    6d20:	08 95       	ret

00006d22 <_ZN7TwoWire4peekEv>:
    6d22:	cf 93       	push	r28
    6d24:	df 93       	push	r29
    6d26:	00 d0       	rcall	.+0      	; 0x6d28 <_ZN7TwoWire4peekEv+0x6>
    6d28:	00 d0       	rcall	.+0      	; 0x6d2a <_ZN7TwoWire4peekEv+0x8>
    6d2a:	cd b7       	in	r28, 0x3d	; 61
    6d2c:	de b7       	in	r29, 0x3e	; 62
    6d2e:	9c 83       	std	Y+4, r25	; 0x04
    6d30:	8b 83       	std	Y+3, r24	; 0x03
    6d32:	8f ef       	ldi	r24, 0xFF	; 255
    6d34:	9f ef       	ldi	r25, 0xFF	; 255
    6d36:	9a 83       	std	Y+2, r25	; 0x02
    6d38:	89 83       	std	Y+1, r24	; 0x01
    6d3a:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6d3e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_ZN7TwoWire14rxBufferLengthE>
    6d42:	98 17       	cp	r25, r24
    6d44:	60 f4       	brcc	.+24     	; 0x6d5e <_ZN7TwoWire4peekEv+0x3c>
    6d46:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    6d4a:	88 2f       	mov	r24, r24
    6d4c:	90 e0       	ldi	r25, 0x00	; 0
    6d4e:	87 5b       	subi	r24, 0xB7	; 183
    6d50:	9a 4f       	sbci	r25, 0xFA	; 250
    6d52:	fc 01       	movw	r30, r24
    6d54:	80 81       	ld	r24, Z
    6d56:	88 2f       	mov	r24, r24
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	9a 83       	std	Y+2, r25	; 0x02
    6d5c:	89 83       	std	Y+1, r24	; 0x01
    6d5e:	89 81       	ldd	r24, Y+1	; 0x01
    6d60:	9a 81       	ldd	r25, Y+2	; 0x02
    6d62:	0f 90       	pop	r0
    6d64:	0f 90       	pop	r0
    6d66:	0f 90       	pop	r0
    6d68:	0f 90       	pop	r0
    6d6a:	df 91       	pop	r29
    6d6c:	cf 91       	pop	r28
    6d6e:	08 95       	ret

00006d70 <_ZN7TwoWire5flushEv>:
    6d70:	cf 93       	push	r28
    6d72:	df 93       	push	r29
    6d74:	00 d0       	rcall	.+0      	; 0x6d76 <_ZN7TwoWire5flushEv+0x6>
    6d76:	cd b7       	in	r28, 0x3d	; 61
    6d78:	de b7       	in	r29, 0x3e	; 62
    6d7a:	9a 83       	std	Y+2, r25	; 0x02
    6d7c:	89 83       	std	Y+1, r24	; 0x01
    6d7e:	00 00       	nop
    6d80:	0f 90       	pop	r0
    6d82:	0f 90       	pop	r0
    6d84:	df 91       	pop	r29
    6d86:	cf 91       	pop	r28
    6d88:	08 95       	ret

00006d8a <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6d8a:	cf 93       	push	r28
    6d8c:	df 93       	push	r29
    6d8e:	00 d0       	rcall	.+0      	; 0x6d90 <_Z41__static_initialization_and_destruction_0ii+0x6>
    6d90:	00 d0       	rcall	.+0      	; 0x6d92 <_Z41__static_initialization_and_destruction_0ii+0x8>
    6d92:	cd b7       	in	r28, 0x3d	; 61
    6d94:	de b7       	in	r29, 0x3e	; 62
    6d96:	9a 83       	std	Y+2, r25	; 0x02
    6d98:	89 83       	std	Y+1, r24	; 0x01
    6d9a:	7c 83       	std	Y+4, r23	; 0x04
    6d9c:	6b 83       	std	Y+3, r22	; 0x03
    6d9e:	89 81       	ldd	r24, Y+1	; 0x01
    6da0:	9a 81       	ldd	r25, Y+2	; 0x02
    6da2:	01 97       	sbiw	r24, 0x01	; 1
    6da4:	41 f4       	brne	.+16     	; 0x6db6 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    6da6:	8b 81       	ldd	r24, Y+3	; 0x03
    6da8:	9c 81       	ldd	r25, Y+4	; 0x04
    6daa:	01 96       	adiw	r24, 0x01	; 1
    6dac:	21 f4       	brne	.+8      	; 0x6db6 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    6dae:	8f e8       	ldi	r24, 0x8F	; 143
    6db0:	95 e0       	ldi	r25, 0x05	; 5
    6db2:	0e 94 33 35 	call	0x6a66	; 0x6a66 <_ZN7TwoWireC1Ev>
    6db6:	00 00       	nop
    6db8:	0f 90       	pop	r0
    6dba:	0f 90       	pop	r0
    6dbc:	0f 90       	pop	r0
    6dbe:	0f 90       	pop	r0
    6dc0:	df 91       	pop	r29
    6dc2:	cf 91       	pop	r28
    6dc4:	08 95       	ret

00006dc6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    6dc6:	cf 93       	push	r28
    6dc8:	df 93       	push	r29
    6dca:	cd b7       	in	r28, 0x3d	; 61
    6dcc:	de b7       	in	r29, 0x3e	; 62
    6dce:	6f ef       	ldi	r22, 0xFF	; 255
    6dd0:	7f ef       	ldi	r23, 0xFF	; 255
    6dd2:	81 e0       	ldi	r24, 0x01	; 1
    6dd4:	90 e0       	ldi	r25, 0x00	; 0
    6dd6:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_Z41__static_initialization_and_destruction_0ii>
    6dda:	df 91       	pop	r29
    6ddc:	cf 91       	pop	r28
    6dde:	08 95       	ret

00006de0 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	cd b7       	in	r28, 0x3d	; 61
    6de6:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    6de8:	0e 94 4f 3a 	call	0x749e	; 0x749e <abort>

00006dec <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6dec:	cf 93       	push	r28
    6dee:	df 93       	push	r29
    6df0:	cd b7       	in	r28, 0x3d	; 61
    6df2:	de b7       	in	r29, 0x3e	; 62
	// Empty
}
    6df4:	00 00       	nop
    6df6:	df 91       	pop	r29
    6df8:	cf 91       	pop	r28
    6dfa:	08 95       	ret

00006dfc <twi_init>:
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
}
    6dfc:	cf 93       	push	r28
    6dfe:	df 93       	push	r29
    6e00:	cd b7       	in	r28, 0x3d	; 61
    6e02:	de b7       	in	r29, 0x3e	; 62
    6e04:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_state>
    6e08:	81 e0       	ldi	r24, 0x01	; 1
    6e0a:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_sendStop>
    6e0e:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <twi_inRepStart>
    6e12:	82 e1       	ldi	r24, 0x12	; 18
    6e14:	61 e0       	ldi	r22, 0x01	; 1
    6e16:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    6e1a:	83 e1       	ldi	r24, 0x13	; 19
    6e1c:	61 e0       	ldi	r22, 0x01	; 1
    6e1e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <digitalWrite>
    6e22:	89 eb       	ldi	r24, 0xB9	; 185
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	29 eb       	ldi	r18, 0xB9	; 185
    6e28:	30 e0       	ldi	r19, 0x00	; 0
    6e2a:	f9 01       	movw	r30, r18
    6e2c:	20 81       	ld	r18, Z
    6e2e:	2e 7f       	andi	r18, 0xFE	; 254
    6e30:	fc 01       	movw	r30, r24
    6e32:	20 83       	st	Z, r18
    6e34:	89 eb       	ldi	r24, 0xB9	; 185
    6e36:	90 e0       	ldi	r25, 0x00	; 0
    6e38:	29 eb       	ldi	r18, 0xB9	; 185
    6e3a:	30 e0       	ldi	r19, 0x00	; 0
    6e3c:	f9 01       	movw	r30, r18
    6e3e:	20 81       	ld	r18, Z
    6e40:	2d 7f       	andi	r18, 0xFD	; 253
    6e42:	fc 01       	movw	r30, r24
    6e44:	20 83       	st	Z, r18
    6e46:	88 eb       	ldi	r24, 0xB8	; 184
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	28 e4       	ldi	r18, 0x48	; 72
    6e4c:	fc 01       	movw	r30, r24
    6e4e:	20 83       	st	Z, r18
    6e50:	8c eb       	ldi	r24, 0xBC	; 188
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	25 e4       	ldi	r18, 0x45	; 69
    6e56:	fc 01       	movw	r30, r24
    6e58:	20 83       	st	Z, r18
    6e5a:	00 00       	nop
    6e5c:	df 91       	pop	r29
    6e5e:	cf 91       	pop	r28
    6e60:	08 95       	ret

00006e62 <twi_writeTo>:
    6e62:	0f 93       	push	r16
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	cd b7       	in	r28, 0x3d	; 61
    6e6a:	de b7       	in	r29, 0x3e	; 62
    6e6c:	27 97       	sbiw	r28, 0x07	; 7
    6e6e:	0f b6       	in	r0, 0x3f	; 63
    6e70:	f8 94       	cli
    6e72:	de bf       	out	0x3e, r29	; 62
    6e74:	0f be       	out	0x3f, r0	; 63
    6e76:	cd bf       	out	0x3d, r28	; 61
    6e78:	8a 83       	std	Y+2, r24	; 0x02
    6e7a:	7c 83       	std	Y+4, r23	; 0x04
    6e7c:	6b 83       	std	Y+3, r22	; 0x03
    6e7e:	4d 83       	std	Y+5, r20	; 0x05
    6e80:	2e 83       	std	Y+6, r18	; 0x06
    6e82:	0f 83       	std	Y+7, r16	; 0x07
    6e84:	8d 81       	ldd	r24, Y+5	; 0x05
    6e86:	81 32       	cpi	r24, 0x21	; 33
    6e88:	18 f0       	brcs	.+6      	; 0x6e90 <twi_writeTo+0x2e>
    6e8a:	81 e0       	ldi	r24, 0x01	; 1
    6e8c:	76 c0       	rjmp	.+236    	; 0x6f7a <twi_writeTo+0x118>
    6e8e:	00 00       	nop
    6e90:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_state>
    6e94:	88 23       	and	r24, r24
    6e96:	d9 f7       	brne	.-10     	; 0x6e8e <twi_writeTo+0x2c>
    6e98:	82 e0       	ldi	r24, 0x02	; 2
    6e9a:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_state>
    6e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    6ea0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_sendStop>
    6ea4:	8f ef       	ldi	r24, 0xFF	; 255
    6ea6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <twi_error>
    6eaa:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <twi_masterBufferIndex>
    6eae:	8d 81       	ldd	r24, Y+5	; 0x05
    6eb0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <twi_masterBufferLength>
    6eb4:	19 82       	std	Y+1, r1	; 0x01
    6eb6:	13 c0       	rjmp	.+38     	; 0x6ede <twi_writeTo+0x7c>
    6eb8:	89 81       	ldd	r24, Y+1	; 0x01
    6eba:	88 2f       	mov	r24, r24
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	29 81       	ldd	r18, Y+1	; 0x01
    6ec0:	22 2f       	mov	r18, r18
    6ec2:	30 e0       	ldi	r19, 0x00	; 0
    6ec4:	4b 81       	ldd	r20, Y+3	; 0x03
    6ec6:	5c 81       	ldd	r21, Y+4	; 0x04
    6ec8:	24 0f       	add	r18, r20
    6eca:	35 1f       	adc	r19, r21
    6ecc:	f9 01       	movw	r30, r18
    6ece:	20 81       	ld	r18, Z
    6ed0:	8d 55       	subi	r24, 0x5D	; 93
    6ed2:	9a 4f       	sbci	r25, 0xFA	; 250
    6ed4:	fc 01       	movw	r30, r24
    6ed6:	20 83       	st	Z, r18
    6ed8:	89 81       	ldd	r24, Y+1	; 0x01
    6eda:	8f 5f       	subi	r24, 0xFF	; 255
    6edc:	89 83       	std	Y+1, r24	; 0x01
    6ede:	99 81       	ldd	r25, Y+1	; 0x01
    6ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ee2:	98 17       	cp	r25, r24
    6ee4:	48 f3       	brcs	.-46     	; 0x6eb8 <twi_writeTo+0x56>
    6ee6:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_slarw>
    6eea:	8a 81       	ldd	r24, Y+2	; 0x02
    6eec:	88 2f       	mov	r24, r24
    6eee:	90 e0       	ldi	r25, 0x00	; 0
    6ef0:	88 0f       	add	r24, r24
    6ef2:	99 1f       	adc	r25, r25
    6ef4:	98 2f       	mov	r25, r24
    6ef6:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_slarw>
    6efa:	89 2b       	or	r24, r25
    6efc:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_slarw>
    6f00:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <twi_inRepStart>
    6f04:	81 30       	cpi	r24, 0x01	; 1
    6f06:	c1 f4       	brne	.+48     	; 0x6f38 <twi_writeTo+0xd6>
    6f08:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <twi_inRepStart>
    6f0c:	8b eb       	ldi	r24, 0xBB	; 187
    6f0e:	90 e0       	ldi	r25, 0x00	; 0
    6f10:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <twi_slarw>
    6f14:	fc 01       	movw	r30, r24
    6f16:	20 83       	st	Z, r18
    6f18:	8c eb       	ldi	r24, 0xBC	; 188
    6f1a:	90 e0       	ldi	r25, 0x00	; 0
    6f1c:	fc 01       	movw	r30, r24
    6f1e:	80 81       	ld	r24, Z
    6f20:	88 2f       	mov	r24, r24
    6f22:	90 e0       	ldi	r25, 0x00	; 0
    6f24:	88 70       	andi	r24, 0x08	; 8
    6f26:	99 27       	eor	r25, r25
    6f28:	89 2b       	or	r24, r25
    6f2a:	81 f7       	brne	.-32     	; 0x6f0c <twi_writeTo+0xaa>
    6f2c:	8c eb       	ldi	r24, 0xBC	; 188
    6f2e:	90 e0       	ldi	r25, 0x00	; 0
    6f30:	25 ec       	ldi	r18, 0xC5	; 197
    6f32:	fc 01       	movw	r30, r24
    6f34:	20 83       	st	Z, r18
    6f36:	07 c0       	rjmp	.+14     	; 0x6f46 <twi_writeTo+0xe4>
    6f38:	8c eb       	ldi	r24, 0xBC	; 188
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	25 ee       	ldi	r18, 0xE5	; 229
    6f3e:	fc 01       	movw	r30, r24
    6f40:	20 83       	st	Z, r18
    6f42:	01 c0       	rjmp	.+2      	; 0x6f46 <twi_writeTo+0xe4>
    6f44:	00 00       	nop
    6f46:	8e 81       	ldd	r24, Y+6	; 0x06
    6f48:	88 23       	and	r24, r24
    6f4a:	21 f0       	breq	.+8      	; 0x6f54 <twi_writeTo+0xf2>
    6f4c:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_state>
    6f50:	82 30       	cpi	r24, 0x02	; 2
    6f52:	c1 f3       	breq	.-16     	; 0x6f44 <twi_writeTo+0xe2>
    6f54:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <twi_error>
    6f58:	8f 3f       	cpi	r24, 0xFF	; 255
    6f5a:	11 f4       	brne	.+4      	; 0x6f60 <twi_writeTo+0xfe>
    6f5c:	80 e0       	ldi	r24, 0x00	; 0
    6f5e:	0d c0       	rjmp	.+26     	; 0x6f7a <twi_writeTo+0x118>
    6f60:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <twi_error>
    6f64:	80 32       	cpi	r24, 0x20	; 32
    6f66:	11 f4       	brne	.+4      	; 0x6f6c <twi_writeTo+0x10a>
    6f68:	82 e0       	ldi	r24, 0x02	; 2
    6f6a:	07 c0       	rjmp	.+14     	; 0x6f7a <twi_writeTo+0x118>
    6f6c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <twi_error>
    6f70:	80 33       	cpi	r24, 0x30	; 48
    6f72:	11 f4       	brne	.+4      	; 0x6f78 <twi_writeTo+0x116>
    6f74:	83 e0       	ldi	r24, 0x03	; 3
    6f76:	01 c0       	rjmp	.+2      	; 0x6f7a <twi_writeTo+0x118>
    6f78:	84 e0       	ldi	r24, 0x04	; 4
    6f7a:	27 96       	adiw	r28, 0x07	; 7
    6f7c:	0f b6       	in	r0, 0x3f	; 63
    6f7e:	f8 94       	cli
    6f80:	de bf       	out	0x3e, r29	; 62
    6f82:	0f be       	out	0x3f, r0	; 63
    6f84:	cd bf       	out	0x3d, r28	; 61
    6f86:	df 91       	pop	r29
    6f88:	cf 91       	pop	r28
    6f8a:	0f 91       	pop	r16
    6f8c:	08 95       	ret

00006f8e <twi_transmit>:
    6f8e:	cf 93       	push	r28
    6f90:	df 93       	push	r29
    6f92:	00 d0       	rcall	.+0      	; 0x6f94 <twi_transmit+0x6>
    6f94:	00 d0       	rcall	.+0      	; 0x6f96 <twi_transmit+0x8>
    6f96:	cd b7       	in	r28, 0x3d	; 61
    6f98:	de b7       	in	r29, 0x3e	; 62
    6f9a:	9b 83       	std	Y+3, r25	; 0x03
    6f9c:	8a 83       	std	Y+2, r24	; 0x02
    6f9e:	6c 83       	std	Y+4, r22	; 0x04
    6fa0:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <twi_txBufferLength>
    6fa4:	28 2f       	mov	r18, r24
    6fa6:	30 e0       	ldi	r19, 0x00	; 0
    6fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    6faa:	88 2f       	mov	r24, r24
    6fac:	90 e0       	ldi	r25, 0x00	; 0
    6fae:	82 0f       	add	r24, r18
    6fb0:	93 1f       	adc	r25, r19
    6fb2:	81 97       	sbiw	r24, 0x21	; 33
    6fb4:	14 f0       	brlt	.+4      	; 0x6fba <twi_transmit+0x2c>
    6fb6:	81 e0       	ldi	r24, 0x01	; 1
    6fb8:	2c c0       	rjmp	.+88     	; 0x7012 <twi_transmit+0x84>
    6fba:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_state>
    6fbe:	84 30       	cpi	r24, 0x04	; 4
    6fc0:	11 f0       	breq	.+4      	; 0x6fc6 <twi_transmit+0x38>
    6fc2:	82 e0       	ldi	r24, 0x02	; 2
    6fc4:	26 c0       	rjmp	.+76     	; 0x7012 <twi_transmit+0x84>
    6fc6:	19 82       	std	Y+1, r1	; 0x01
    6fc8:	19 c0       	rjmp	.+50     	; 0x6ffc <twi_transmit+0x6e>
    6fca:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <twi_txBufferLength>
    6fce:	28 2f       	mov	r18, r24
    6fd0:	30 e0       	ldi	r19, 0x00	; 0
    6fd2:	89 81       	ldd	r24, Y+1	; 0x01
    6fd4:	88 2f       	mov	r24, r24
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	82 0f       	add	r24, r18
    6fda:	93 1f       	adc	r25, r19
    6fdc:	29 81       	ldd	r18, Y+1	; 0x01
    6fde:	22 2f       	mov	r18, r18
    6fe0:	30 e0       	ldi	r19, 0x00	; 0
    6fe2:	4a 81       	ldd	r20, Y+2	; 0x02
    6fe4:	5b 81       	ldd	r21, Y+3	; 0x03
    6fe6:	24 0f       	add	r18, r20
    6fe8:	35 1f       	adc	r19, r21
    6fea:	f9 01       	movw	r30, r18
    6fec:	20 81       	ld	r18, Z
    6fee:	8b 53       	subi	r24, 0x3B	; 59
    6ff0:	9a 4f       	sbci	r25, 0xFA	; 250
    6ff2:	fc 01       	movw	r30, r24
    6ff4:	20 83       	st	Z, r18
    6ff6:	89 81       	ldd	r24, Y+1	; 0x01
    6ff8:	8f 5f       	subi	r24, 0xFF	; 255
    6ffa:	89 83       	std	Y+1, r24	; 0x01
    6ffc:	99 81       	ldd	r25, Y+1	; 0x01
    6ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    7000:	98 17       	cp	r25, r24
    7002:	18 f3       	brcs	.-58     	; 0x6fca <twi_transmit+0x3c>
    7004:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <twi_txBufferLength>
    7008:	8c 81       	ldd	r24, Y+4	; 0x04
    700a:	89 0f       	add	r24, r25
    700c:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <twi_txBufferLength>
    7010:	80 e0       	ldi	r24, 0x00	; 0
    7012:	0f 90       	pop	r0
    7014:	0f 90       	pop	r0
    7016:	0f 90       	pop	r0
    7018:	0f 90       	pop	r0
    701a:	df 91       	pop	r29
    701c:	cf 91       	pop	r28
    701e:	08 95       	ret

00007020 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    7020:	cf 93       	push	r28
    7022:	df 93       	push	r29
    7024:	1f 92       	push	r1
    7026:	cd b7       	in	r28, 0x3d	; 61
    7028:	de b7       	in	r29, 0x3e	; 62
    702a:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    702c:	89 81       	ldd	r24, Y+1	; 0x01
    702e:	88 23       	and	r24, r24
    7030:	31 f0       	breq	.+12     	; 0x703e <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    7032:	8c eb       	ldi	r24, 0xBC	; 188
    7034:	90 e0       	ldi	r25, 0x00	; 0
    7036:	25 ec       	ldi	r18, 0xC5	; 197
    7038:	fc 01       	movw	r30, r24
    703a:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    703c:	05 c0       	rjmp	.+10     	; 0x7048 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    703e:	8c eb       	ldi	r24, 0xBC	; 188
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	25 e8       	ldi	r18, 0x85	; 133
    7044:	fc 01       	movw	r30, r24
    7046:	20 83       	st	Z, r18
  }
}
    7048:	00 00       	nop
    704a:	0f 90       	pop	r0
    704c:	df 91       	pop	r29
    704e:	cf 91       	pop	r28
    7050:	08 95       	ret

00007052 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    7052:	cf 93       	push	r28
    7054:	df 93       	push	r29
    7056:	cd b7       	in	r28, 0x3d	; 61
    7058:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    705a:	8c eb       	ldi	r24, 0xBC	; 188
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	25 ed       	ldi	r18, 0xD5	; 213
    7060:	fc 01       	movw	r30, r24
    7062:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    7064:	01 c0       	rjmp	.+2      	; 0x7068 <twi_stop+0x16>
    continue;
    7066:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    7068:	8c eb       	ldi	r24, 0xBC	; 188
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	fc 01       	movw	r30, r24
    706e:	80 81       	ld	r24, Z
    7070:	88 2f       	mov	r24, r24
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	80 71       	andi	r24, 0x10	; 16
    7076:	99 27       	eor	r25, r25
    7078:	89 2b       	or	r24, r25
    707a:	a9 f7       	brne	.-22     	; 0x7066 <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    707c:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_state>
}
    7080:	00 00       	nop
    7082:	df 91       	pop	r29
    7084:	cf 91       	pop	r28
    7086:	08 95       	ret

00007088 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    7088:	cf 93       	push	r28
    708a:	df 93       	push	r29
    708c:	cd b7       	in	r28, 0x3d	; 61
    708e:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    7090:	8c eb       	ldi	r24, 0xBC	; 188
    7092:	90 e0       	ldi	r25, 0x00	; 0
    7094:	25 ec       	ldi	r18, 0xC5	; 197
    7096:	fc 01       	movw	r30, r24
    7098:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    709a:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_state>
}
    709e:	00 00       	nop
    70a0:	df 91       	pop	r29
    70a2:	cf 91       	pop	r28
    70a4:	08 95       	ret

000070a6 <__vector_24>:

ISR(TWI_vect)
{
    70a6:	1f 92       	push	r1
    70a8:	0f 92       	push	r0
    70aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    70ae:	0f 92       	push	r0
    70b0:	11 24       	eor	r1, r1
    70b2:	2f 93       	push	r18
    70b4:	3f 93       	push	r19
    70b6:	4f 93       	push	r20
    70b8:	5f 93       	push	r21
    70ba:	6f 93       	push	r22
    70bc:	7f 93       	push	r23
    70be:	8f 93       	push	r24
    70c0:	9f 93       	push	r25
    70c2:	af 93       	push	r26
    70c4:	bf 93       	push	r27
    70c6:	ef 93       	push	r30
    70c8:	ff 93       	push	r31
    70ca:	cf 93       	push	r28
    70cc:	df 93       	push	r29
    70ce:	cd b7       	in	r28, 0x3d	; 61
    70d0:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    70d2:	89 eb       	ldi	r24, 0xB9	; 185
    70d4:	90 e0       	ldi	r25, 0x00	; 0
    70d6:	fc 01       	movw	r30, r24
    70d8:	80 81       	ld	r24, Z
    70da:	88 2f       	mov	r24, r24
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	88 7f       	andi	r24, 0xF8	; 248
    70e0:	99 27       	eor	r25, r25
    70e2:	09 2e       	mov	r0, r25
    70e4:	00 0c       	add	r0, r0
    70e6:	aa 0b       	sbc	r26, r26
    70e8:	bb 0b       	sbc	r27, r27
    70ea:	40 e0       	ldi	r20, 0x00	; 0
    70ec:	50 e0       	ldi	r21, 0x00	; 0
    70ee:	28 ef       	ldi	r18, 0xF8	; 248
    70f0:	30 e0       	ldi	r19, 0x00	; 0
    70f2:	84 1b       	sub	r24, r20
    70f4:	95 0b       	sbc	r25, r21
    70f6:	28 17       	cp	r18, r24
    70f8:	39 07       	cpc	r19, r25
    70fa:	08 f4       	brcc	.+2      	; 0x70fe <__vector_24+0x58>
    70fc:	17 c1       	rjmp	.+558    	; 0x732c <__vector_24+0x286>
    70fe:	8c 5c       	subi	r24, 0xCC	; 204
    7100:	9f 4f       	sbci	r25, 0xFF	; 255
    7102:	fc 01       	movw	r30, r24
    7104:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    7108:	8b eb       	ldi	r24, 0xBB	; 187
    710a:	90 e0       	ldi	r25, 0x00	; 0
    710c:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <twi_slarw>
    7110:	fc 01       	movw	r30, r24
    7112:	20 83       	st	Z, r18
      twi_reply(1);
    7114:	81 e0       	ldi	r24, 0x01	; 1
    7116:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      break;
    711a:	08 c1       	rjmp	.+528    	; 0x732c <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    711c:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <twi_masterBufferIndex>
    7120:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <twi_masterBufferLength>
    7124:	98 17       	cp	r25, r24
    7126:	a0 f4       	brcc	.+40     	; 0x7150 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    7128:	8b eb       	ldi	r24, 0xBB	; 187
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <twi_masterBufferIndex>
    7130:	31 e0       	ldi	r19, 0x01	; 1
    7132:	32 0f       	add	r19, r18
    7134:	30 93 c3 05 	sts	0x05C3, r19	; 0x8005c3 <twi_masterBufferIndex>
    7138:	22 2f       	mov	r18, r18
    713a:	30 e0       	ldi	r19, 0x00	; 0
    713c:	2d 55       	subi	r18, 0x5D	; 93
    713e:	3a 4f       	sbci	r19, 0xFA	; 250
    7140:	f9 01       	movw	r30, r18
    7142:	20 81       	ld	r18, Z
    7144:	fc 01       	movw	r30, r24
    7146:	20 83       	st	Z, r18
        twi_reply(1);
    7148:	81 e0       	ldi	r24, 0x01	; 1
    714a:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    714e:	ee c0       	rjmp	.+476    	; 0x732c <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    7150:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <twi_sendStop>
    7154:	88 23       	and	r24, r24
    7156:	19 f0       	breq	.+6      	; 0x715e <__vector_24+0xb8>
          twi_stop();
    7158:	0e 94 29 38 	call	0x7052	; 0x7052 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    715c:	e7 c0       	rjmp	.+462    	; 0x732c <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    715e:	81 e0       	ldi	r24, 0x01	; 1
    7160:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    7164:	8c eb       	ldi	r24, 0xBC	; 188
    7166:	90 e0       	ldi	r25, 0x00	; 0
    7168:	24 ea       	ldi	r18, 0xA4	; 164
    716a:	fc 01       	movw	r30, r24
    716c:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    716e:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_state>
	}
      }
      break;
    7172:	dc c0       	rjmp	.+440    	; 0x732c <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    7174:	80 e2       	ldi	r24, 0x20	; 32
    7176:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <twi_error>
      twi_stop();
    717a:	0e 94 29 38 	call	0x7052	; 0x7052 <twi_stop>
      break;
    717e:	d6 c0       	rjmp	.+428    	; 0x732c <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    7180:	80 e3       	ldi	r24, 0x30	; 48
    7182:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <twi_error>
      twi_stop();
    7186:	0e 94 29 38 	call	0x7052	; 0x7052 <twi_stop>
      break;
    718a:	d0 c0       	rjmp	.+416    	; 0x732c <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    718c:	88 e3       	ldi	r24, 0x38	; 56
    718e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <twi_error>
      twi_releaseBus();
    7192:	0e 94 44 38 	call	0x7088	; 0x7088 <twi_releaseBus>
      break;
    7196:	ca c0       	rjmp	.+404    	; 0x732c <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    7198:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <twi_masterBufferIndex>
    719c:	91 e0       	ldi	r25, 0x01	; 1
    719e:	98 0f       	add	r25, r24
    71a0:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <twi_masterBufferIndex>
    71a4:	88 2f       	mov	r24, r24
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	2b eb       	ldi	r18, 0xBB	; 187
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	f9 01       	movw	r30, r18
    71ae:	20 81       	ld	r18, Z
    71b0:	8d 55       	subi	r24, 0x5D	; 93
    71b2:	9a 4f       	sbci	r25, 0xFA	; 250
    71b4:	fc 01       	movw	r30, r24
    71b6:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    71b8:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <twi_masterBufferIndex>
    71bc:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <twi_masterBufferLength>
    71c0:	98 17       	cp	r25, r24
    71c2:	20 f4       	brcc	.+8      	; 0x71cc <__vector_24+0x126>
        twi_reply(1);
    71c4:	81 e0       	ldi	r24, 0x01	; 1
    71c6:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    71ca:	b0 c0       	rjmp	.+352    	; 0x732c <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    71cc:	80 e0       	ldi	r24, 0x00	; 0
    71ce:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      }
      break;
    71d2:	ac c0       	rjmp	.+344    	; 0x732c <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    71d4:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <twi_masterBufferIndex>
    71d8:	91 e0       	ldi	r25, 0x01	; 1
    71da:	98 0f       	add	r25, r24
    71dc:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <twi_masterBufferIndex>
    71e0:	88 2f       	mov	r24, r24
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	2b eb       	ldi	r18, 0xBB	; 187
    71e6:	30 e0       	ldi	r19, 0x00	; 0
    71e8:	f9 01       	movw	r30, r18
    71ea:	20 81       	ld	r18, Z
    71ec:	8d 55       	subi	r24, 0x5D	; 93
    71ee:	9a 4f       	sbci	r25, 0xFA	; 250
    71f0:	fc 01       	movw	r30, r24
    71f2:	20 83       	st	Z, r18
	if (twi_sendStop)
    71f4:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <twi_sendStop>
    71f8:	88 23       	and	r24, r24
    71fa:	19 f0       	breq	.+6      	; 0x7202 <__vector_24+0x15c>
          twi_stop();
    71fc:	0e 94 29 38 	call	0x7052	; 0x7052 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    7200:	95 c0       	rjmp	.+298    	; 0x732c <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    7202:	81 e0       	ldi	r24, 0x01	; 1
    7204:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    7208:	8c eb       	ldi	r24, 0xBC	; 188
    720a:	90 e0       	ldi	r25, 0x00	; 0
    720c:	24 ea       	ldi	r18, 0xA4	; 164
    720e:	fc 01       	movw	r30, r24
    7210:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    7212:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_state>
	}    
	break;
    7216:	8a c0       	rjmp	.+276    	; 0x732c <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    7218:	0e 94 29 38 	call	0x7052	; 0x7052 <twi_stop>
      break;
    721c:	87 c0       	rjmp	.+270    	; 0x732c <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    721e:	83 e0       	ldi	r24, 0x03	; 3
    7220:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    7224:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <twi_rxBufferIndex>
      twi_reply(1);
    7228:	81 e0       	ldi	r24, 0x01	; 1
    722a:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      break;
    722e:	7e c0       	rjmp	.+252    	; 0x732c <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    7230:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <twi_rxBufferIndex>
    7234:	80 32       	cpi	r24, 0x20	; 32
    7236:	a0 f4       	brcc	.+40     	; 0x7260 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    7238:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <twi_rxBufferIndex>
    723c:	91 e0       	ldi	r25, 0x01	; 1
    723e:	98 0f       	add	r25, r24
    7240:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <twi_rxBufferIndex>
    7244:	88 2f       	mov	r24, r24
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	2b eb       	ldi	r18, 0xBB	; 187
    724a:	30 e0       	ldi	r19, 0x00	; 0
    724c:	f9 01       	movw	r30, r18
    724e:	20 81       	ld	r18, Z
    7250:	89 51       	subi	r24, 0x19	; 25
    7252:	9a 4f       	sbci	r25, 0xFA	; 250
    7254:	fc 01       	movw	r30, r24
    7256:	20 83       	st	Z, r18
        twi_reply(1);
    7258:	81 e0       	ldi	r24, 0x01	; 1
    725a:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    725e:	66 c0       	rjmp	.+204    	; 0x732c <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    7260:	80 e0       	ldi	r24, 0x00	; 0
    7262:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      }
      break;
    7266:	62 c0       	rjmp	.+196    	; 0x732c <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    7268:	0e 94 44 38 	call	0x7088	; 0x7088 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    726c:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <twi_rxBufferIndex>
    7270:	80 32       	cpi	r24, 0x20	; 32
    7272:	40 f4       	brcc	.+16     	; 0x7284 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    7274:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <twi_rxBufferIndex>
    7278:	88 2f       	mov	r24, r24
    727a:	90 e0       	ldi	r25, 0x00	; 0
    727c:	89 51       	subi	r24, 0x19	; 25
    727e:	9a 4f       	sbci	r25, 0xFA	; 250
    7280:	fc 01       	movw	r30, r24
    7282:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    7284:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <twi_onSlaveReceive>
    7288:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <twi_onSlaveReceive+0x1>
    728c:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <twi_rxBufferIndex>
    7290:	88 2f       	mov	r24, r24
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	bc 01       	movw	r22, r24
    7296:	87 ee       	ldi	r24, 0xE7	; 231
    7298:	95 e0       	ldi	r25, 0x05	; 5
    729a:	f9 01       	movw	r30, r18
    729c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    729e:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <twi_rxBufferIndex>
      break;
    72a2:	44 c0       	rjmp	.+136    	; 0x732c <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    72a4:	80 e0       	ldi	r24, 0x00	; 0
    72a6:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      break;
    72aa:	40 c0       	rjmp	.+128    	; 0x732c <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    72ac:	84 e0       	ldi	r24, 0x04	; 4
    72ae:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    72b2:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    72b6:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    72ba:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_onSlaveTransmit>
    72be:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <twi_onSlaveTransmit+0x1>
    72c2:	fc 01       	movw	r30, r24
    72c4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    72c6:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <twi_txBufferLength>
    72ca:	88 23       	and	r24, r24
    72cc:	29 f4       	brne	.+10     	; 0x72d8 <__vector_24+0x232>
        twi_txBufferLength = 1;
    72ce:	81 e0       	ldi	r24, 0x01	; 1
    72d0:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    72d4:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    72d8:	8b eb       	ldi	r24, 0xBB	; 187
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	20 91 e5 05 	lds	r18, 0x05E5	; 0x8005e5 <twi_txBufferIndex>
    72e0:	31 e0       	ldi	r19, 0x01	; 1
    72e2:	32 0f       	add	r19, r18
    72e4:	30 93 e5 05 	sts	0x05E5, r19	; 0x8005e5 <twi_txBufferIndex>
    72e8:	22 2f       	mov	r18, r18
    72ea:	30 e0       	ldi	r19, 0x00	; 0
    72ec:	2b 53       	subi	r18, 0x3B	; 59
    72ee:	3a 4f       	sbci	r19, 0xFA	; 250
    72f0:	f9 01       	movw	r30, r18
    72f2:	20 81       	ld	r18, Z
    72f4:	fc 01       	movw	r30, r24
    72f6:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    72f8:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <twi_txBufferIndex>
    72fc:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <twi_txBufferLength>
    7300:	98 17       	cp	r25, r24
    7302:	20 f4       	brcc	.+8      	; 0x730c <__vector_24+0x266>
        twi_reply(1);
    7304:	81 e0       	ldi	r24, 0x01	; 1
    7306:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    730a:	10 c0       	rjmp	.+32     	; 0x732c <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    730c:	80 e0       	ldi	r24, 0x00	; 0
    730e:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      }
      break;
    7312:	0c c0       	rjmp	.+24     	; 0x732c <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    7314:	81 e0       	ldi	r24, 0x01	; 1
    7316:	0e 94 10 38 	call	0x7020	; 0x7020 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    731a:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_state>
      break;
    731e:	06 c0       	rjmp	.+12     	; 0x732c <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    7320:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <twi_error>
      twi_stop();
    7324:	0e 94 29 38 	call	0x7052	; 0x7052 <twi_stop>
      break;
    7328:	01 c0       	rjmp	.+2      	; 0x732c <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    732a:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    732c:	00 00       	nop
    732e:	df 91       	pop	r29
    7330:	cf 91       	pop	r28
    7332:	ff 91       	pop	r31
    7334:	ef 91       	pop	r30
    7336:	bf 91       	pop	r27
    7338:	af 91       	pop	r26
    733a:	9f 91       	pop	r25
    733c:	8f 91       	pop	r24
    733e:	7f 91       	pop	r23
    7340:	6f 91       	pop	r22
    7342:	5f 91       	pop	r21
    7344:	4f 91       	pop	r20
    7346:	3f 91       	pop	r19
    7348:	2f 91       	pop	r18
    734a:	0f 90       	pop	r0
    734c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    7350:	0f 90       	pop	r0
    7352:	1f 90       	pop	r1
    7354:	18 95       	reti

00007356 <__cmpsf2>:
    7356:	0e 94 b0 39 	call	0x7360	; 0x7360 <__fp_cmp>
    735a:	08 f4       	brcc	.+2      	; 0x735e <__cmpsf2+0x8>
    735c:	81 e0       	ldi	r24, 0x01	; 1
    735e:	08 95       	ret

00007360 <__fp_cmp>:
    7360:	99 0f       	add	r25, r25
    7362:	00 08       	sbc	r0, r0
    7364:	55 0f       	add	r21, r21
    7366:	aa 0b       	sbc	r26, r26
    7368:	e0 e8       	ldi	r30, 0x80	; 128
    736a:	fe ef       	ldi	r31, 0xFE	; 254
    736c:	16 16       	cp	r1, r22
    736e:	17 06       	cpc	r1, r23
    7370:	e8 07       	cpc	r30, r24
    7372:	f9 07       	cpc	r31, r25
    7374:	c0 f0       	brcs	.+48     	; 0x73a6 <__fp_cmp+0x46>
    7376:	12 16       	cp	r1, r18
    7378:	13 06       	cpc	r1, r19
    737a:	e4 07       	cpc	r30, r20
    737c:	f5 07       	cpc	r31, r21
    737e:	98 f0       	brcs	.+38     	; 0x73a6 <__fp_cmp+0x46>
    7380:	62 1b       	sub	r22, r18
    7382:	73 0b       	sbc	r23, r19
    7384:	84 0b       	sbc	r24, r20
    7386:	95 0b       	sbc	r25, r21
    7388:	39 f4       	brne	.+14     	; 0x7398 <__fp_cmp+0x38>
    738a:	0a 26       	eor	r0, r26
    738c:	61 f0       	breq	.+24     	; 0x73a6 <__fp_cmp+0x46>
    738e:	23 2b       	or	r18, r19
    7390:	24 2b       	or	r18, r20
    7392:	25 2b       	or	r18, r21
    7394:	21 f4       	brne	.+8      	; 0x739e <__fp_cmp+0x3e>
    7396:	08 95       	ret
    7398:	0a 26       	eor	r0, r26
    739a:	09 f4       	brne	.+2      	; 0x739e <__fp_cmp+0x3e>
    739c:	a1 40       	sbci	r26, 0x01	; 1
    739e:	a6 95       	lsr	r26
    73a0:	8f ef       	ldi	r24, 0xFF	; 255
    73a2:	81 1d       	adc	r24, r1
    73a4:	81 1d       	adc	r24, r1
    73a6:	08 95       	ret

000073a8 <__gesf2>:
    73a8:	0e 94 b0 39 	call	0x7360	; 0x7360 <__fp_cmp>
    73ac:	08 f4       	brcc	.+2      	; 0x73b0 <__gesf2+0x8>
    73ae:	8f ef       	ldi	r24, 0xFF	; 255
    73b0:	08 95       	ret

000073b2 <__unordsf2>:
    73b2:	0e 94 b0 39 	call	0x7360	; 0x7360 <__fp_cmp>
    73b6:	88 0b       	sbc	r24, r24
    73b8:	99 0b       	sbc	r25, r25
    73ba:	08 95       	ret

000073bc <__mulsi3>:
    73bc:	db 01       	movw	r26, r22
    73be:	8f 93       	push	r24
    73c0:	9f 93       	push	r25
    73c2:	0e 94 35 3a 	call	0x746a	; 0x746a <__muluhisi3>
    73c6:	bf 91       	pop	r27
    73c8:	af 91       	pop	r26
    73ca:	a2 9f       	mul	r26, r18
    73cc:	80 0d       	add	r24, r0
    73ce:	91 1d       	adc	r25, r1
    73d0:	a3 9f       	mul	r26, r19
    73d2:	90 0d       	add	r25, r0
    73d4:	b2 9f       	mul	r27, r18
    73d6:	90 0d       	add	r25, r0
    73d8:	11 24       	eor	r1, r1
    73da:	08 95       	ret

000073dc <__udivmodsi4>:
    73dc:	a1 e2       	ldi	r26, 0x21	; 33
    73de:	1a 2e       	mov	r1, r26
    73e0:	aa 1b       	sub	r26, r26
    73e2:	bb 1b       	sub	r27, r27
    73e4:	fd 01       	movw	r30, r26
    73e6:	0d c0       	rjmp	.+26     	; 0x7402 <__udivmodsi4_ep>

000073e8 <__udivmodsi4_loop>:
    73e8:	aa 1f       	adc	r26, r26
    73ea:	bb 1f       	adc	r27, r27
    73ec:	ee 1f       	adc	r30, r30
    73ee:	ff 1f       	adc	r31, r31
    73f0:	a2 17       	cp	r26, r18
    73f2:	b3 07       	cpc	r27, r19
    73f4:	e4 07       	cpc	r30, r20
    73f6:	f5 07       	cpc	r31, r21
    73f8:	20 f0       	brcs	.+8      	; 0x7402 <__udivmodsi4_ep>
    73fa:	a2 1b       	sub	r26, r18
    73fc:	b3 0b       	sbc	r27, r19
    73fe:	e4 0b       	sbc	r30, r20
    7400:	f5 0b       	sbc	r31, r21

00007402 <__udivmodsi4_ep>:
    7402:	66 1f       	adc	r22, r22
    7404:	77 1f       	adc	r23, r23
    7406:	88 1f       	adc	r24, r24
    7408:	99 1f       	adc	r25, r25
    740a:	1a 94       	dec	r1
    740c:	69 f7       	brne	.-38     	; 0x73e8 <__udivmodsi4_loop>
    740e:	60 95       	com	r22
    7410:	70 95       	com	r23
    7412:	80 95       	com	r24
    7414:	90 95       	com	r25
    7416:	9b 01       	movw	r18, r22
    7418:	ac 01       	movw	r20, r24
    741a:	bd 01       	movw	r22, r26
    741c:	cf 01       	movw	r24, r30
    741e:	08 95       	ret

00007420 <__divmodsi4>:
    7420:	05 2e       	mov	r0, r21
    7422:	97 fb       	bst	r25, 7
    7424:	1e f4       	brtc	.+6      	; 0x742c <__divmodsi4+0xc>
    7426:	00 94       	com	r0
    7428:	0e 94 27 3a 	call	0x744e	; 0x744e <__negsi2>
    742c:	57 fd       	sbrc	r21, 7
    742e:	07 d0       	rcall	.+14     	; 0x743e <__divmodsi4_neg2>
    7430:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__udivmodsi4>
    7434:	07 fc       	sbrc	r0, 7
    7436:	03 d0       	rcall	.+6      	; 0x743e <__divmodsi4_neg2>
    7438:	4e f4       	brtc	.+18     	; 0x744c <__divmodsi4_exit>
    743a:	0c 94 27 3a 	jmp	0x744e	; 0x744e <__negsi2>

0000743e <__divmodsi4_neg2>:
    743e:	50 95       	com	r21
    7440:	40 95       	com	r20
    7442:	30 95       	com	r19
    7444:	21 95       	neg	r18
    7446:	3f 4f       	sbci	r19, 0xFF	; 255
    7448:	4f 4f       	sbci	r20, 0xFF	; 255
    744a:	5f 4f       	sbci	r21, 0xFF	; 255

0000744c <__divmodsi4_exit>:
    744c:	08 95       	ret

0000744e <__negsi2>:
    744e:	90 95       	com	r25
    7450:	80 95       	com	r24
    7452:	70 95       	com	r23
    7454:	61 95       	neg	r22
    7456:	7f 4f       	sbci	r23, 0xFF	; 255
    7458:	8f 4f       	sbci	r24, 0xFF	; 255
    745a:	9f 4f       	sbci	r25, 0xFF	; 255
    745c:	08 95       	ret

0000745e <__tablejump2__>:
    745e:	ee 0f       	add	r30, r30
    7460:	ff 1f       	adc	r31, r31
    7462:	05 90       	lpm	r0, Z+
    7464:	f4 91       	lpm	r31, Z
    7466:	e0 2d       	mov	r30, r0
    7468:	09 94       	ijmp

0000746a <__muluhisi3>:
    746a:	0e 94 40 3a 	call	0x7480	; 0x7480 <__umulhisi3>
    746e:	a5 9f       	mul	r26, r21
    7470:	90 0d       	add	r25, r0
    7472:	b4 9f       	mul	r27, r20
    7474:	90 0d       	add	r25, r0
    7476:	a4 9f       	mul	r26, r20
    7478:	80 0d       	add	r24, r0
    747a:	91 1d       	adc	r25, r1
    747c:	11 24       	eor	r1, r1
    747e:	08 95       	ret

00007480 <__umulhisi3>:
    7480:	a2 9f       	mul	r26, r18
    7482:	b0 01       	movw	r22, r0
    7484:	b3 9f       	mul	r27, r19
    7486:	c0 01       	movw	r24, r0
    7488:	a3 9f       	mul	r26, r19
    748a:	70 0d       	add	r23, r0
    748c:	81 1d       	adc	r24, r1
    748e:	11 24       	eor	r1, r1
    7490:	91 1d       	adc	r25, r1
    7492:	b2 9f       	mul	r27, r18
    7494:	70 0d       	add	r23, r0
    7496:	81 1d       	adc	r24, r1
    7498:	11 24       	eor	r1, r1
    749a:	91 1d       	adc	r25, r1
    749c:	08 95       	ret

0000749e <abort>:
    749e:	81 e0       	ldi	r24, 0x01	; 1
    74a0:	90 e0       	ldi	r25, 0x00	; 0
    74a2:	f8 94       	cli
    74a4:	0c 94 64 3a 	jmp	0x74c8	; 0x74c8 <_exit>

000074a8 <memset>:
    74a8:	dc 01       	movw	r26, r24
    74aa:	01 c0       	rjmp	.+2      	; 0x74ae <memset+0x6>
    74ac:	6d 93       	st	X+, r22
    74ae:	41 50       	subi	r20, 0x01	; 1
    74b0:	50 40       	sbci	r21, 0x00	; 0
    74b2:	e0 f7       	brcc	.-8      	; 0x74ac <memset+0x4>
    74b4:	08 95       	ret

000074b6 <strlen>:
    74b6:	fc 01       	movw	r30, r24
    74b8:	01 90       	ld	r0, Z+
    74ba:	00 20       	and	r0, r0
    74bc:	e9 f7       	brne	.-6      	; 0x74b8 <strlen+0x2>
    74be:	80 95       	com	r24
    74c0:	90 95       	com	r25
    74c2:	8e 0f       	add	r24, r30
    74c4:	9f 1f       	adc	r25, r31
    74c6:	08 95       	ret

000074c8 <_exit>:
    74c8:	f8 94       	cli

000074ca <__stop_program>:
    74ca:	ff cf       	rjmp	.-2      	; 0x74ca <__stop_program>
