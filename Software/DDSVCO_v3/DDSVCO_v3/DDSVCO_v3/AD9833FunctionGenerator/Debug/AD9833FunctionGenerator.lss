
AD9833FunctionGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e0  00800100  0000455e  000045f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000455e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020b  008003e0  008003e0  000048d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000930  00000000  00000000  00004944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000169f0  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003506  00000000  00000000  0001bc64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006290  00000000  00000000  0001f16a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002794  00000000  00000000  000253fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004d1e  00000000  00000000  00027b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011734  00000000  00000000  0002c8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b10  00000000  00000000  0003dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__ctors_end>
       4:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_1>
       8:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_2>
       c:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__vector_3>
      10:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_4>
      14:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_5>
      18:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      1c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      20:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      24:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      28:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      2c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      30:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      34:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__vector_13>
      38:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      3c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      40:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__vector_16>
      44:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      48:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_18>
      4c:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__vector_19>
      50:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      54:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_21>
      58:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      5c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      60:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__vector_24>
      64:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 01       	movw	r0, r0
      6a:	02 03       	mulsu	r16, r18
      6c:	04 05       	cpc	r16, r4
      6e:	06 07       	cpc	r16, r22
      70:	00 01       	movw	r0, r0
      72:	02 03       	mulsu	r16, r18
      74:	04 05       	cpc	r16, r4
      76:	00 01       	movw	r0, r0
      78:	02 03       	mulsu	r16, r18
      7a:	04 05       	cpc	r16, r4

0000007c <digital_pin_to_timer_PGM>:
      7c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      8c:	00 00 00 00                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <port_to_input_PGM>:
      b8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c2 <port_to_output_PGM>:
      c2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000cc <port_to_mode_PGM>:
      cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d6 <_ZL4font>:
      d6:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      e6:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      f6:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     106:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     116:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     126:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     136:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     146:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     156:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     166:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     176:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     186:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     196:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1a6:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1b6:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1c6:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1d6:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1e6:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1f6:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     206:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     216:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     226:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     236:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     246:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     256:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     266:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     276:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     286:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     296:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2a6:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2b6:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2c6:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2d6:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2e6:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2f6:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     306:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     316:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     326:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     336:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     346:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     356:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     366:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     376:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     386:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     396:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3a6:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3b6:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3c6:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3d6:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3e6:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3f6:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     406:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     416:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     426:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     436:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     446:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     456:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     466:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     476:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     486:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     496:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4a6:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4b6:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4c6:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4d6:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4e6:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4f6:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     506:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     516:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     526:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     536:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     546:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     556:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     566:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     576:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     586:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     596:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5a6:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5b6:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5c6:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005d6 <__ctors_start>:
     5d6:	56 0c       	add	r5, r6
     5d8:	fb 0f       	add	r31, r27
     5da:	24 20       	and	r2, r4

000005dc <__ctors_end>:
     5dc:	11 24       	eor	r1, r1
     5de:	1f be       	out	0x3f, r1	; 63
     5e0:	cf ef       	ldi	r28, 0xFF	; 255
     5e2:	d8 e0       	ldi	r29, 0x08	; 8
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	cd bf       	out	0x3d, r28	; 61

000005e8 <__do_copy_data>:
     5e8:	13 e0       	ldi	r17, 0x03	; 3
     5ea:	a0 e0       	ldi	r26, 0x00	; 0
     5ec:	b1 e0       	ldi	r27, 0x01	; 1
     5ee:	ee e5       	ldi	r30, 0x5E	; 94
     5f0:	f5 e4       	ldi	r31, 0x45	; 69
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__do_copy_data+0x10>
     5f4:	05 90       	lpm	r0, Z+
     5f6:	0d 92       	st	X+, r0
     5f8:	a0 3e       	cpi	r26, 0xE0	; 224
     5fa:	b1 07       	cpc	r27, r17
     5fc:	d9 f7       	brne	.-10     	; 0x5f4 <__do_copy_data+0xc>

000005fe <__do_clear_bss>:
     5fe:	25 e0       	ldi	r18, 0x05	; 5
     600:	a0 ee       	ldi	r26, 0xE0	; 224
     602:	b3 e0       	ldi	r27, 0x03	; 3
     604:	01 c0       	rjmp	.+2      	; 0x608 <.do_clear_bss_start>

00000606 <.do_clear_bss_loop>:
     606:	1d 92       	st	X+, r1

00000608 <.do_clear_bss_start>:
     608:	ab 3e       	cpi	r26, 0xEB	; 235
     60a:	b2 07       	cpc	r27, r18
     60c:	e1 f7       	brne	.-8      	; 0x606 <.do_clear_bss_loop>

0000060e <__do_global_ctors>:
     60e:	12 e0       	ldi	r17, 0x02	; 2
     610:	ce ee       	ldi	r28, 0xEE	; 238
     612:	d2 e0       	ldi	r29, 0x02	; 2
     614:	04 c0       	rjmp	.+8      	; 0x61e <__do_global_ctors+0x10>
     616:	21 97       	sbiw	r28, 0x01	; 1
     618:	fe 01       	movw	r30, r28
     61a:	0e 94 93 22 	call	0x4526	; 0x4526 <__tablejump2__>
     61e:	cb 3e       	cpi	r28, 0xEB	; 235
     620:	d1 07       	cpc	r29, r17
     622:	c9 f7       	brne	.-14     	; 0x616 <__do_global_ctors+0x8>
     624:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <main>
     628:	0c 94 ad 22 	jmp	0x455a	; 0x455a <_exit>

0000062c <__bad_interrupt>:
     62c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000630 <_Z8doPD2Intv>:
#endif
#ifndef EI_NOTINT1
if (arduinoPin == 3) {
  EIMSK &= ~_BV(1);
  EICRA &= (~_BV(2) & ~_BV(3));
  EIFR  |= _BV(1); // using a clue from the ATmega2560 datasheet.
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	0e 94 42 12 	call	0x2484	; 0x2484 <millis>
     640:	00 91 1a 04 	lds	r16, 0x041A	; 0x80041a <pd2_last_interrupt_time>
     644:	10 91 1b 04 	lds	r17, 0x041B	; 0x80041b <pd2_last_interrupt_time+0x1>
     648:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <pd2_last_interrupt_time+0x2>
     64c:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <pd2_last_interrupt_time+0x3>
     650:	6b 01       	movw	r12, r22
     652:	7c 01       	movw	r14, r24
     654:	c0 1a       	sub	r12, r16
     656:	d1 0a       	sbc	r13, r17
     658:	e2 0a       	sbc	r14, r18
     65a:	f3 0a       	sbc	r15, r19
     65c:	4d e2       	ldi	r20, 0x2D	; 45
     65e:	c4 16       	cp	r12, r20
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	d4 06       	cpc	r13, r20
     664:	e1 04       	cpc	r14, r1
     666:	f1 04       	cpc	r15, r1
     668:	e0 f0       	brcs	.+56     	; 0x6a2 <_Z8doPD2Intv+0x72>
     66a:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <mode>
     66e:	21 11       	cpse	r18, r1
     670:	14 c0       	rjmp	.+40     	; 0x69a <_Z8doPD2Intv+0x6a>
     672:	21 e0       	ldi	r18, 0x01	; 1
     674:	20 93 63 04 	sts	0x0463, r18	; 0x800463 <mode>
     678:	00 91 59 04 	lds	r16, 0x0459	; 0x800459 <selectedLowerFreq>
     67c:	10 91 5a 04 	lds	r17, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
     680:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
     684:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
     688:	00 93 64 04 	sts	0x0464, r16	; 0x800464 <sweepcounter>
     68c:	10 93 65 04 	sts	0x0465, r17	; 0x800465 <sweepcounter+0x1>
     690:	20 93 66 04 	sts	0x0466, r18	; 0x800466 <sweepcounter+0x2>
     694:	30 93 67 04 	sts	0x0467, r19	; 0x800467 <sweepcounter+0x3>
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <_Z8doPD2Intv+0x72>
     69a:	21 30       	cpi	r18, 0x01	; 1
     69c:	11 f4       	brne	.+4      	; 0x6a2 <_Z8doPD2Intv+0x72>
     69e:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <mode>
     6a2:	60 93 1a 04 	sts	0x041A, r22	; 0x80041a <pd2_last_interrupt_time>
     6a6:	70 93 1b 04 	sts	0x041B, r23	; 0x80041b <pd2_last_interrupt_time+0x1>
     6aa:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <pd2_last_interrupt_time+0x2>
     6ae:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <pd2_last_interrupt_time+0x3>
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	08 95       	ret

000006c0 <_Z8doPD5Intv>:
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	0e 94 42 12 	call	0x2484	; 0x2484 <millis>
     6d0:	00 91 0e 04 	lds	r16, 0x040E	; 0x80040e <pd5_last_interrupt_time>
     6d4:	10 91 0f 04 	lds	r17, 0x040F	; 0x80040f <pd5_last_interrupt_time+0x1>
     6d8:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <pd5_last_interrupt_time+0x2>
     6dc:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <pd5_last_interrupt_time+0x3>
     6e0:	6b 01       	movw	r12, r22
     6e2:	7c 01       	movw	r14, r24
     6e4:	c0 1a       	sub	r12, r16
     6e6:	d1 0a       	sbc	r13, r17
     6e8:	e2 0a       	sbc	r14, r18
     6ea:	f3 0a       	sbc	r15, r19
     6ec:	4d e2       	ldi	r20, 0x2D	; 45
     6ee:	c4 16       	cp	r12, r20
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	d4 06       	cpc	r13, r20
     6f4:	e1 04       	cpc	r14, r1
     6f6:	f1 04       	cpc	r15, r1
     6f8:	e8 f1       	brcs	.+122    	; 0x774 <_Z8doPD5Intv+0xb4>
     6fa:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     6fe:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     702:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     706:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     70a:	08 3e       	cpi	r16, 0xE8	; 232
     70c:	13 40       	sbci	r17, 0x03	; 3
     70e:	21 05       	cpc	r18, r1
     710:	31 05       	cpc	r19, r1
     712:	29 f4       	brne	.+10     	; 0x71e <_Z8doPD5Intv+0x5e>
     714:	00 e1       	ldi	r16, 0x10	; 16
     716:	17 e2       	ldi	r17, 0x27	; 39
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	23 c0       	rjmp	.+70     	; 0x764 <_Z8doPD5Intv+0xa4>
     71e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     722:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     726:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     72a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     72e:	00 31       	cpi	r16, 0x10	; 16
     730:	17 42       	sbci	r17, 0x27	; 39
     732:	21 05       	cpc	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	29 f4       	brne	.+10     	; 0x742 <_Z8doPD5Intv+0x82>
     738:	00 ea       	ldi	r16, 0xA0	; 160
     73a:	16 e8       	ldi	r17, 0x86	; 134
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	11 c0       	rjmp	.+34     	; 0x764 <_Z8doPD5Intv+0xa4>
     742:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     746:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     74a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     74e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     752:	00 3a       	cpi	r16, 0xA0	; 160
     754:	16 48       	sbci	r17, 0x86	; 134
     756:	21 40       	sbci	r18, 0x01	; 1
     758:	31 05       	cpc	r19, r1
     75a:	61 f4       	brne	.+24     	; 0x774 <_Z8doPD5Intv+0xb4>
     75c:	08 ee       	ldi	r16, 0xE8	; 232
     75e:	13 e0       	ldi	r17, 0x03	; 3
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <maxFreq>
     768:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <maxFreq+0x1>
     76c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <maxFreq+0x2>
     770:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <maxFreq+0x3>
     774:	60 93 0e 04 	sts	0x040E, r22	; 0x80040e <pd5_last_interrupt_time>
     778:	70 93 0f 04 	sts	0x040F, r23	; 0x80040f <pd5_last_interrupt_time+0x1>
     77c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <pd5_last_interrupt_time+0x2>
     780:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <pd5_last_interrupt_time+0x3>
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	08 95       	ret

00000792 <_Z8doPD6Intv>:
     792:	0e 94 42 12 	call	0x2484	; 0x2484 <millis>
     796:	60 93 12 04 	sts	0x0412, r22	; 0x800412 <pd6_last_interrupt_time>
     79a:	70 93 13 04 	sts	0x0413, r23	; 0x800413 <pd6_last_interrupt_time+0x1>
     79e:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pd6_last_interrupt_time+0x2>
     7a2:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pd6_last_interrupt_time+0x3>
     7a6:	08 95       	ret

000007a8 <_ZN8SPIClass14endTransactionEv.part.0>:
     7a8:	9f b7       	in	r25, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
     7b0:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_ZN8SPIClass13interruptSaveE>
     7b4:	21 30       	cpi	r18, 0x01	; 1
     7b6:	19 f4       	brne	.+6      	; 0x7be <_ZN8SPIClass14endTransactionEv.part.0+0x16>
     7b8:	8d bb       	out	0x1d, r24	; 29
     7ba:	9f bf       	out	0x3f, r25	; 63
     7bc:	08 95       	ret
     7be:	8f bf       	out	0x3f, r24	; 63
     7c0:	08 95       	ret

000007c2 <_Z9adc_setupv>:
     7c2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     7c6:	ea e7       	ldi	r30, 0x7A	; 122
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	80 83       	st	Z, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	80 62       	ori	r24, 0x20	; 32
     7d4:	80 83       	st	Z, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	88 60       	ori	r24, 0x08	; 8
     7da:	80 83       	st	Z, r24
     7dc:	80 81       	ld	r24, Z
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
     7e2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     7e6:	80 81       	ld	r24, Z
     7e8:	80 64       	ori	r24, 0x40	; 64
     7ea:	80 83       	st	Z, r24
     7ec:	08 95       	ret

000007ee <__vector_21>:
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	2f 93       	push	r18
     802:	3f 93       	push	r19
     804:	4f 93       	push	r20
     806:	5f 93       	push	r21
     808:	6f 93       	push	r22
     80a:	7f 93       	push	r23
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
     818:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__floatunsisf>
     826:	6b 01       	movw	r12, r22
     828:	7c 01       	movw	r14, r24
     82a:	60 93 78 04 	sts	0x0478, r22	; 0x800478 <rawAdcValue>
     82e:	70 93 79 04 	sts	0x0479, r23	; 0x800479 <rawAdcValue+0x1>
     832:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <rawAdcValue+0x2>
     836:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <rawAdcValue+0x3>
     83a:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	76 2f       	mov	r23, r22
     842:	66 27       	eor	r22, r22
     844:	07 2e       	mov	r0, r23
     846:	00 0c       	add	r0, r0
     848:	88 0b       	sbc	r24, r24
     84a:	99 0b       	sbc	r25, r25
     84c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__floatsisf>
     850:	a7 01       	movw	r20, r14
     852:	96 01       	movw	r18, r12
     854:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__addsf3>
     858:	60 93 78 04 	sts	0x0478, r22	; 0x800478 <rawAdcValue>
     85c:	70 93 79 04 	sts	0x0479, r23	; 0x800479 <rawAdcValue+0x1>
     860:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <rawAdcValue+0x2>
     864:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <rawAdcValue+0x3>
     868:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     86c:	22 30       	cpi	r18, 0x02	; 2
     86e:	11 f1       	breq	.+68     	; 0x8b4 <__vector_21+0xc6>
     870:	60 f4       	brcc	.+24     	; 0x88a <__vector_21+0x9c>
     872:	22 23       	and	r18, r18
     874:	b9 f0       	breq	.+46     	; 0x8a4 <__vector_21+0xb6>
     876:	21 30       	cpi	r18, 0x01	; 1
     878:	79 f5       	brne	.+94     	; 0x8d8 <__vector_21+0xea>
     87a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fixsfsi>
     87e:	70 93 77 04 	sts	0x0477, r23	; 0x800477 <ADCInput+0x1>
     882:	60 93 76 04 	sts	0x0476, r22	; 0x800476 <ADCInput>
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	1c c0       	rjmp	.+56     	; 0x8c2 <__vector_21+0xd4>
     88a:	23 30       	cpi	r18, 0x03	; 3
     88c:	e9 f0       	breq	.+58     	; 0x8c8 <__vector_21+0xda>
     88e:	26 30       	cpi	r18, 0x06	; 6
     890:	19 f5       	brne	.+70     	; 0x8d8 <__vector_21+0xea>
     892:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fixsfsi>
     896:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <ADCInput3+0x1>
     89a:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <ADCInput3>
     89e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     8a2:	1a c0       	rjmp	.+52     	; 0x8d8 <__vector_21+0xea>
     8a4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fixsfsi>
     8a8:	70 93 6f 04 	sts	0x046F, r23	; 0x80046f <ADCInput6+0x1>
     8ac:	60 93 6e 04 	sts	0x046E, r22	; 0x80046e <ADCInput6>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__vector_21+0xd4>
     8b4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fixsfsi>
     8b8:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <ADCInput1+0x1>
     8bc:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <ADCInput1>
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__vector_21+0xea>
     8c8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fixsfsi>
     8cc:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <ADCInput2+0x1>
     8d0:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <ADCInput2>
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	f5 cf       	rjmp	.-22     	; 0x8c2 <__vector_21+0xd4>
     8d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8dc:	80 64       	ori	r24, 0x40	; 64
     8de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <_ZN8SPIClass16beginTransactionE11SPISettings>:
     90c:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
     910:	22 23       	and	r18, r18
     912:	99 f0       	breq	.+38     	; 0x93a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     914:	4f b7       	in	r20, 0x3f	; 63
     916:	f8 94       	cli
     918:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
     91c:	21 30       	cpi	r18, 0x01	; 1
     91e:	59 f4       	brne	.+22     	; 0x936 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     920:	2d b3       	in	r18, 0x1d	; 29
     922:	20 93 22 05 	sts	0x0522, r18	; 0x800522 <_ZN8SPIClass13interruptSaveE>
     926:	3d b3       	in	r19, 0x1d	; 29
     928:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <_ZN8SPIClass13interruptMaskE>
     92c:	20 95       	com	r18
     92e:	23 23       	and	r18, r19
     930:	2d bb       	out	0x1d, r18	; 29
     932:	4f bf       	out	0x3f, r20	; 63
     934:	02 c0       	rjmp	.+4      	; 0x93a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     936:	40 93 22 05 	sts	0x0522, r20	; 0x800522 <_ZN8SPIClass13interruptSaveE>
     93a:	8c bd       	out	0x2c, r24	; 44
     93c:	9d bd       	out	0x2d, r25	; 45
     93e:	08 95       	ret

00000940 <_ZN8SPIClass8transferEh>:
     940:	8e bd       	out	0x2e, r24	; 46
     942:	00 00       	nop
     944:	0d b4       	in	r0, 0x2d	; 45
     946:	07 fe       	sbrs	r0, 7
     948:	fd cf       	rjmp	.-6      	; 0x944 <_ZN8SPIClass8transferEh+0x4>
     94a:	8e b5       	in	r24, 0x2e	; 46
     94c:	08 95       	ret

0000094e <_ZN8SPIClass10transfer16Ej>:
     94e:	0c b4       	in	r0, 0x2c	; 44
     950:	05 fc       	sbrc	r0, 5
     952:	0d c0       	rjmp	.+26     	; 0x96e <_ZN8SPIClass10transfer16Ej+0x20>
     954:	9e bd       	out	0x2e, r25	; 46
     956:	00 00       	nop
     958:	0d b4       	in	r0, 0x2d	; 45
     95a:	07 fe       	sbrs	r0, 7
     95c:	fd cf       	rjmp	.-6      	; 0x958 <_ZN8SPIClass10transfer16Ej+0xa>
     95e:	9e b5       	in	r25, 0x2e	; 46
     960:	8e bd       	out	0x2e, r24	; 46
     962:	00 00       	nop
     964:	0d b4       	in	r0, 0x2d	; 45
     966:	07 fe       	sbrs	r0, 7
     968:	fd cf       	rjmp	.-6      	; 0x964 <_ZN8SPIClass10transfer16Ej+0x16>
     96a:	8e b5       	in	r24, 0x2e	; 46
     96c:	08 95       	ret
     96e:	8e bd       	out	0x2e, r24	; 46
     970:	00 00       	nop
     972:	0d b4       	in	r0, 0x2d	; 45
     974:	07 fe       	sbrs	r0, 7
     976:	fd cf       	rjmp	.-6      	; 0x972 <_ZN8SPIClass10transfer16Ej+0x24>
     978:	8e b5       	in	r24, 0x2e	; 46
     97a:	9e bd       	out	0x2e, r25	; 46
     97c:	00 00       	nop
     97e:	0d b4       	in	r0, 0x2d	; 45
     980:	07 fe       	sbrs	r0, 7
     982:	fd cf       	rjmp	.-6      	; 0x97e <_ZN8SPIClass10transfer16Ej+0x30>
     984:	9e b5       	in	r25, 0x2e	; 46
     986:	08 95       	ret

00000988 <_Z17digipot_write_spiiih>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	d8 2f       	mov	r29, r24
     98e:	c6 2f       	mov	r28, r22
     990:	88 e5       	ldi	r24, 0x58	; 88
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN8SPIClass16beginTransactionE11SPISettings>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	89 e0       	ldi	r24, 0x09	; 9
     99c:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     9a0:	8d 2f       	mov	r24, r29
     9a2:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN8SPIClass8transferEh>
     9a6:	8c 2f       	mov	r24, r28
     9a8:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN8SPIClass8transferEh>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	89 e0       	ldi	r24, 0x09	; 9
     9b0:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     9b4:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
     9b8:	88 23       	and	r24, r24
     9ba:	21 f0       	breq	.+8      	; 0x9c4 <_Z17digipot_write_spiiih+0x3c>
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <_ZN8SPIClass14endTransactionEv.part.0>
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <_Z8doPD3Intv>:
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0e 94 42 12 	call	0x2484	; 0x2484 <millis>
     9d6:	6b 01       	movw	r12, r22
     9d8:	7c 01       	movw	r14, r24
     9da:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pd3_last_interrupt_time>
     9de:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pd3_last_interrupt_time+0x1>
     9e2:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <pd3_last_interrupt_time+0x2>
     9e6:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <pd3_last_interrupt_time+0x3>
     9ea:	a7 01       	movw	r20, r14
     9ec:	96 01       	movw	r18, r12
     9ee:	28 1b       	sub	r18, r24
     9f0:	39 0b       	sbc	r19, r25
     9f2:	4a 0b       	sbc	r20, r26
     9f4:	5b 0b       	sbc	r21, r27
     9f6:	da 01       	movw	r26, r20
     9f8:	c9 01       	movw	r24, r18
     9fa:	8d 32       	cpi	r24, 0x2D	; 45
     9fc:	91 40       	sbci	r25, 0x01	; 1
     9fe:	a1 05       	cpc	r26, r1
     a00:	b1 05       	cpc	r27, r1
     a02:	08 f4       	brcc	.+2      	; 0xa06 <_Z8doPD3Intv+0x3c>
     a04:	42 c0       	rjmp	.+132    	; 0xa8a <_Z8doPD3Intv+0xc0>
     a06:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <func>
     a0a:	81 11       	cpse	r24, r1
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <_Z8doPD3Intv+0x4c>
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <func>
     a14:	20 c0       	rjmp	.+64     	; 0xa56 <_Z8doPD3Intv+0x8c>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	d1 f4       	brne	.+52     	; 0xa4e <_Z8doPD3Intv+0x84>
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <func>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	a0 e8       	ldi	r26, 0x80	; 128
     a26:	bf e3       	ldi	r27, 0x3F	; 63
     a28:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gainCompensation>
     a2c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gainCompensation+0x1>
     a30:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <gainCompensation+0x2>
     a34:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <gainCompensation+0x3>
     a38:	49 e0       	ldi	r20, 0x09	; 9
     a3a:	6e e1       	ldi	r22, 0x1E	; 30
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	81 e1       	ldi	r24, 0x11	; 17
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
     a46:	49 e0       	ldi	r20, 0x09	; 9
     a48:	6a e0       	ldi	r22, 0x0A	; 10
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	1a c0       	rjmp	.+52     	; 0xa82 <_Z8doPD3Intv+0xb8>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	e1 f4       	brne	.+56     	; 0xa8a <_Z8doPD3Intv+0xc0>
     a52:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <func>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	a0 e8       	ldi	r26, 0x80	; 128
     a5c:	bf e3       	ldi	r27, 0x3F	; 63
     a5e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gainCompensation>
     a62:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gainCompensation+0x1>
     a66:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <gainCompensation+0x2>
     a6a:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <gainCompensation+0x3>
     a6e:	49 e0       	ldi	r20, 0x09	; 9
     a70:	6f ef       	ldi	r22, 0xFF	; 255
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	81 e1       	ldi	r24, 0x11	; 17
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
     a7c:	49 e0       	ldi	r20, 0x09	; 9
     a7e:	67 e5       	ldi	r22, 0x57	; 87
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	82 e1       	ldi	r24, 0x12	; 18
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
     a8a:	c0 92 16 04 	sts	0x0416, r12	; 0x800416 <pd3_last_interrupt_time>
     a8e:	d0 92 17 04 	sts	0x0417, r13	; 0x800417 <pd3_last_interrupt_time+0x1>
     a92:	e0 92 18 04 	sts	0x0418, r14	; 0x800418 <pd3_last_interrupt_time+0x2>
     a96:	f0 92 19 04 	sts	0x0419, r15	; 0x800419 <pd3_last_interrupt_time+0x3>
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <_Z13write_dds_spiv>:
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	8d e0       	ldi	r24, 0x0D	; 13
     aa8:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8b e0       	ldi	r24, 0x0B	; 11
     ab0:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	8a e0       	ldi	r24, 0x0A	; 10
     ab8:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	8a e0       	ldi	r24, 0x0A	; 10
     ac0:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     ac4:	88 e5       	ldi	r24, 0x58	; 88
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN8SPIClass16beginTransactionE11SPISettings>
     acc:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <dds_out_data>
     ad0:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <dds_out_data+0x1>
     ad4:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <dds_out_data+0x2>
     ad8:	b0 91 6d 04 	lds	r27, 0x046D	; 0x80046d <dds_out_data+0x3>
     adc:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN8SPIClass10transfer16Ej>
     ae0:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
     ae4:	81 11       	cpse	r24, r1
     ae6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN8SPIClass14endTransactionEv.part.0>
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	8a e0       	ldi	r24, 0x0A	; 10
     aee:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	8b e0       	ldi	r24, 0x0B	; 11
     af6:	0c 94 14 13 	jmp	0x2628	; 0x2628 <digitalWrite>

00000afa <_Z15setDDSFrequencyl>:
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__floatsisf>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e8       	ldi	r20, 0x80	; 128
     b0c:	5d e4       	ldi	r21, 0x4D	; 77
     b0e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__mulsf3>
     b12:	20 e2       	ldi	r18, 0x20	; 32
     b14:	3c eb       	ldi	r19, 0xBC	; 188
     b16:	4e eb       	ldi	r20, 0xBE	; 190
     b18:	5b e4       	ldi	r21, 0x4B	; 75
     b1a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divsf3>
     b1e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fixsfsi>
     b22:	eb 01       	movw	r28, r22
     b24:	cc 0f       	add	r28, r28
     b26:	dd 1f       	adc	r29, r29
     b28:	cc 0f       	add	r28, r28
     b2a:	dd 1f       	adc	r29, r29
     b2c:	d6 95       	lsr	r29
     b2e:	c7 95       	ror	r28
     b30:	d6 95       	lsr	r29
     b32:	c7 95       	ror	r28
     b34:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <FREQZEROREG>
     b38:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <FREQZEROREG+0x1>
     b3c:	c0 2b       	or	r28, r16
     b3e:	d1 2b       	or	r29, r17
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	4e e0       	ldi	r20, 0x0E	; 14
     b46:	b5 95       	asr	r27
     b48:	a7 95       	ror	r26
     b4a:	97 95       	ror	r25
     b4c:	87 95       	ror	r24
     b4e:	4a 95       	dec	r20
     b50:	d1 f7       	brne	.-12     	; 0xb46 <_Z15setDDSFrequencyl+0x4c>
     b52:	08 2b       	or	r16, r24
     b54:	19 2b       	or	r17, r25
     b56:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <current_phase>
     b5a:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <current_phase+0x1>
     b5e:	09 2e       	mov	r0, r25
     b60:	00 0c       	add	r0, r0
     b62:	aa 0b       	sbc	r26, r26
     b64:	bb 0b       	sbc	r27, r27
     b66:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <dds_out_data>
     b6a:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <dds_out_data+0x1>
     b6e:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <dds_out_data+0x2>
     b72:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <dds_out_data+0x3>
     b76:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z13write_dds_spiv>
     b7a:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <func>
     b7e:	81 11       	cpse	r24, r1
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <_Z15setDDSFrequencyl+0x92>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e2       	ldi	r25, 0x20	; 32
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	0d c0       	rjmp	.+26     	; 0xba6 <_Z15setDDSFrequencyl+0xac>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	29 f4       	brne	.+10     	; 0xb9a <_Z15setDDSFrequencyl+0xa0>
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	90 e2       	ldi	r25, 0x20	; 32
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	06 c0       	rjmp	.+12     	; 0xba6 <_Z15setDDSFrequencyl+0xac>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	61 f4       	brne	.+24     	; 0xbb6 <_Z15setDDSFrequencyl+0xbc>
     b9e:	88 e6       	ldi	r24, 0x68	; 104
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <dds_out_data>
     baa:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <dds_out_data+0x1>
     bae:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <dds_out_data+0x2>
     bb2:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <dds_out_data+0x3>
     bb6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z13write_dds_spiv>
     bba:	ce 01       	movw	r24, r28
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <dds_out_data>
     bc4:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <dds_out_data+0x1>
     bc8:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <dds_out_data+0x2>
     bcc:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <dds_out_data+0x3>
     bd0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z13write_dds_spiv>
     bd4:	c8 01       	movw	r24, r16
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <dds_out_data>
     bde:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <dds_out_data+0x1>
     be2:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <dds_out_data+0x2>
     be6:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <dds_out_data+0x3>
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <_Z13write_dds_spiv>

00000bf6 <_Z17dds_callback_funcv>:
     bf6:	4f 92       	push	r4
     bf8:	5f 92       	push	r5
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     c10:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     c14:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     c18:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     c1c:	40 90 76 04 	lds	r4, 0x0476	; 0x800476 <ADCInput>
     c20:	50 90 77 04 	lds	r5, 0x0477	; 0x800477 <ADCInput+0x1>
     c24:	b2 01       	movw	r22, r4
     c26:	55 0c       	add	r5, r5
     c28:	88 0b       	sbc	r24, r24
     c2a:	99 0b       	sbc	r25, r25
     c2c:	3f 93       	push	r19
     c2e:	2f 93       	push	r18
     c30:	1f 93       	push	r17
     c32:	0f 93       	push	r16
     c34:	a1 2c       	mov	r10, r1
     c36:	b1 2c       	mov	r11, r1
     c38:	65 01       	movw	r12, r10
     c3a:	a3 94       	inc	r10
     c3c:	e1 2c       	mov	r14, r1
     c3e:	f1 2c       	mov	r15, r1
     c40:	87 01       	movw	r16, r14
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	34 e0       	ldi	r19, 0x04	; 4
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	0e 94 43 13 	call	0x2686	; 0x2686 <_Z3maplllll>
     c4e:	60 93 5d 04 	sts	0x045D, r22	; 0x80045d <selectedUpperFreq>
     c52:	70 93 5e 04 	sts	0x045E, r23	; 0x80045e <selectedUpperFreq+0x1>
     c56:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <selectedUpperFreq+0x2>
     c5a:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <selectedUpperFreq+0x3>
     c5e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <maxFreq>
     c62:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <maxFreq+0x1>
     c66:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxFreq+0x2>
     c6a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxFreq+0x3>
     c6e:	40 90 74 04 	lds	r4, 0x0474	; 0x800474 <ADCInput1>
     c72:	50 90 75 04 	lds	r5, 0x0475	; 0x800475 <ADCInput1+0x1>
     c76:	b2 01       	movw	r22, r4
     c78:	55 0c       	add	r5, r5
     c7a:	88 0b       	sbc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	3f 93       	push	r19
     c80:	2f 93       	push	r18
     c82:	1f 93       	push	r17
     c84:	0f 93       	push	r16
     c86:	e1 2c       	mov	r14, r1
     c88:	f1 2c       	mov	r15, r1
     c8a:	87 01       	movw	r16, r14
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	34 e0       	ldi	r19, 0x04	; 4
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	0e 94 43 13 	call	0x2686	; 0x2686 <_Z3maplllll>
     c98:	60 93 59 04 	sts	0x0459, r22	; 0x800459 <selectedLowerFreq>
     c9c:	70 93 5a 04 	sts	0x045A, r23	; 0x80045a <selectedLowerFreq+0x1>
     ca0:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <selectedLowerFreq+0x2>
     ca4:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <selectedLowerFreq+0x3>
     ca8:	8d b7       	in	r24, 0x3d	; 61
     caa:	9e b7       	in	r25, 0x3e	; 62
     cac:	08 96       	adiw	r24, 0x08	; 8
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	9e bf       	out	0x3e, r25	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	8d bf       	out	0x3d, r24	; 61
     cb8:	c0 91 63 04 	lds	r28, 0x0463	; 0x800463 <mode>
     cbc:	c1 30       	cpi	r28, 0x01	; 1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <_Z17dds_callback_funcv+0xcc>
     cc0:	17 c1       	rjmp	.+558    	; 0xef0 <_Z17dds_callback_funcv+0x2fa>
     cc2:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <ADCInput6>
     cc6:	70 91 6f 04 	lds	r23, 0x046F	; 0x80046f <ADCInput6+0x1>
     cca:	07 2e       	mov	r0, r23
     ccc:	00 0c       	add	r0, r0
     cce:	88 0b       	sbc	r24, r24
     cd0:	99 0b       	sbc	r25, r25
     cd2:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <maxclkspeed+0x3>
     cd6:	2f 93       	push	r18
     cd8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <maxclkspeed+0x2>
     cdc:	2f 93       	push	r18
     cde:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <maxclkspeed+0x1>
     ce2:	2f 93       	push	r18
     ce4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <maxclkspeed>
     ce8:	2f 93       	push	r18
     cea:	e1 2c       	mov	r14, r1
     cec:	14 e0       	ldi	r17, 0x04	; 4
     cee:	f1 2e       	mov	r15, r17
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	10 e0       	ldi	r17, 0x00	; 0
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	a9 01       	movw	r20, r18
     cfa:	0e 94 43 13 	call	0x2686	; 0x2686 <_Z3maplllll>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	f3 e0       	ldi	r31, 0x03	; 3
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	aa 1f       	adc	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	fa 95       	dec	r31
     d0e:	d1 f7       	brne	.-12     	; 0xd04 <_Z17dds_callback_funcv+0x10e>
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	a2 07       	cpc	r26, r18
     d1e:	b1 05       	cpc	r27, r1
     d20:	18 f4       	brcc	.+6      	; 0xd28 <_Z17dds_callback_funcv+0x132>
     d22:	c0 93 28 05 	sts	0x0528, r28	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     d26:	42 c0       	rjmp	.+132    	; 0xdac <_Z17dds_callback_funcv+0x1b6>
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	28 e0       	ldi	r18, 0x08	; 8
     d2c:	a2 07       	cpc	r26, r18
     d2e:	b1 05       	cpc	r27, r1
     d30:	58 f4       	brcc	.+22     	; 0xd48 <_Z17dds_callback_funcv+0x152>
     d32:	22 e0       	ldi	r18, 0x02	; 2
     d34:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     d38:	53 e0       	ldi	r21, 0x03	; 3
     d3a:	b6 95       	lsr	r27
     d3c:	a7 95       	ror	r26
     d3e:	97 95       	ror	r25
     d40:	87 95       	ror	r24
     d42:	5a 95       	dec	r21
     d44:	d1 f7       	brne	.-12     	; 0xd3a <_Z17dds_callback_funcv+0x144>
     d46:	32 c0       	rjmp	.+100    	; 0xdac <_Z17dds_callback_funcv+0x1b6>
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	20 e4       	ldi	r18, 0x40	; 64
     d4c:	a2 07       	cpc	r26, r18
     d4e:	b1 05       	cpc	r27, r1
     d50:	58 f4       	brcc	.+22     	; 0xd68 <_Z17dds_callback_funcv+0x172>
     d52:	23 e0       	ldi	r18, 0x03	; 3
     d54:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     d58:	46 e0       	ldi	r20, 0x06	; 6
     d5a:	b6 95       	lsr	r27
     d5c:	a7 95       	ror	r26
     d5e:	97 95       	ror	r25
     d60:	87 95       	ror	r24
     d62:	4a 95       	dec	r20
     d64:	d1 f7       	brne	.-12     	; 0xd5a <_Z17dds_callback_funcv+0x164>
     d66:	22 c0       	rjmp	.+68     	; 0xdac <_Z17dds_callback_funcv+0x1b6>
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a1 05       	cpc	r26, r1
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	b2 07       	cpc	r27, r18
     d70:	40 f4       	brcc	.+16     	; 0xd82 <_Z17dds_callback_funcv+0x18c>
     d72:	24 e0       	ldi	r18, 0x04	; 4
     d74:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     d78:	89 2f       	mov	r24, r25
     d7a:	9a 2f       	mov	r25, r26
     d7c:	ab 2f       	mov	r26, r27
     d7e:	bb 27       	eor	r27, r27
     d80:	15 c0       	rjmp	.+42     	; 0xdac <_Z17dds_callback_funcv+0x1b6>
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	a1 05       	cpc	r26, r1
     d86:	24 e0       	ldi	r18, 0x04	; 4
     d88:	b2 07       	cpc	r27, r18
     d8a:	58 f4       	brcc	.+22     	; 0xda2 <_Z17dds_callback_funcv+0x1ac>
     d8c:	25 e0       	ldi	r18, 0x05	; 5
     d8e:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     d92:	2a e0       	ldi	r18, 0x0A	; 10
     d94:	b6 95       	lsr	r27
     d96:	a7 95       	ror	r26
     d98:	97 95       	ror	r25
     d9a:	87 95       	ror	r24
     d9c:	2a 95       	dec	r18
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <_Z17dds_callback_funcv+0x19e>
     da0:	05 c0       	rjmp	.+10     	; 0xdac <_Z17dds_callback_funcv+0x1b6>
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <_ZN8TimerOne9pwmPeriodE+0x1>
     db0:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZN8TimerOne9pwmPeriodE>
     db4:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZN8TimerOne9pwmPeriodE>
     db8:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <_ZN8TimerOne9pwmPeriodE+0x1>
     dbc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     dc0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     dc4:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
     dc8:	80 61       	ori	r24, 0x10	; 16
     dca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     dce:	40 91 59 04 	lds	r20, 0x0459	; 0x800459 <selectedLowerFreq>
     dd2:	50 91 5a 04 	lds	r21, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
     dd6:	60 91 5b 04 	lds	r22, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
     dda:	70 91 5c 04 	lds	r23, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
     dde:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <selectedUpperFreq>
     de2:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
     de6:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
     dea:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
     dee:	48 17       	cp	r20, r24
     df0:	59 07       	cpc	r21, r25
     df2:	6a 07       	cpc	r22, r26
     df4:	7b 07       	cpc	r23, r27
     df6:	24 f1       	brlt	.+72     	; 0xe40 <_Z17dds_callback_funcv+0x24a>
     df8:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <selectedLowerFreq>
     dfc:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
     e00:	a0 91 5b 04 	lds	r26, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
     e04:	b0 91 5c 04 	lds	r27, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
     e08:	02 97       	sbiw	r24, 0x02	; 2
     e0a:	a1 05       	cpc	r26, r1
     e0c:	b1 05       	cpc	r27, r1
     e0e:	64 f0       	brlt	.+24     	; 0xe28 <_Z17dds_callback_funcv+0x232>
     e10:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <selectedUpperFreq>
     e14:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
     e18:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
     e1c:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	a1 09       	sbc	r26, r1
     e24:	b1 09       	sbc	r27, r1
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <_Z17dds_callback_funcv+0x23a>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <selectedLowerFreq>
     e34:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <selectedLowerFreq+0x1>
     e38:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <selectedLowerFreq+0x2>
     e3c:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <selectedLowerFreq+0x3>
     e40:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <sweep_direction>
     e44:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <sweepcounter>
     e48:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <sweepcounter+0x1>
     e4c:	a0 91 66 04 	lds	r26, 0x0466	; 0x800466 <sweepcounter+0x2>
     e50:	b0 91 67 04 	lds	r27, 0x0467	; 0x800467 <sweepcounter+0x3>
     e54:	21 11       	cpse	r18, r1
     e56:	15 c0       	rjmp	.+42     	; 0xe82 <_Z17dds_callback_funcv+0x28c>
     e58:	40 91 5d 04 	lds	r20, 0x045D	; 0x80045d <selectedUpperFreq>
     e5c:	50 91 5e 04 	lds	r21, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
     e60:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
     e64:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
     e68:	84 17       	cp	r24, r20
     e6a:	95 07       	cpc	r25, r21
     e6c:	a6 07       	cpc	r26, r22
     e6e:	b7 07       	cpc	r27, r23
     e70:	24 f4       	brge	.+8      	; 0xe7a <_Z17dds_callback_funcv+0x284>
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	a1 1d       	adc	r26, r1
     e76:	b1 1d       	adc	r27, r1
     e78:	16 c0       	rjmp	.+44     	; 0xea6 <_Z17dds_callback_funcv+0x2b0>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <sweep_direction>
     e80:	1d c0       	rjmp	.+58     	; 0xebc <_Z17dds_callback_funcv+0x2c6>
     e82:	21 30       	cpi	r18, 0x01	; 1
     e84:	d9 f4       	brne	.+54     	; 0xebc <_Z17dds_callback_funcv+0x2c6>
     e86:	40 91 59 04 	lds	r20, 0x0459	; 0x800459 <selectedLowerFreq>
     e8a:	50 91 5a 04 	lds	r21, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
     e8e:	60 91 5b 04 	lds	r22, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
     e92:	70 91 5c 04 	lds	r23, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
     e96:	48 17       	cp	r20, r24
     e98:	59 07       	cpc	r21, r25
     e9a:	6a 07       	cpc	r22, r26
     e9c:	7b 07       	cpc	r23, r27
     e9e:	64 f4       	brge	.+24     	; 0xeb8 <_Z17dds_callback_funcv+0x2c2>
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	a1 09       	sbc	r26, r1
     ea4:	b1 09       	sbc	r27, r1
     ea6:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <sweepcounter>
     eaa:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <sweepcounter+0x1>
     eae:	a0 93 66 04 	sts	0x0466, r26	; 0x800466 <sweepcounter+0x2>
     eb2:	b0 93 67 04 	sts	0x0467, r27	; 0x800467 <sweepcounter+0x3>
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <_Z17dds_callback_funcv+0x2c6>
     eb8:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <sweep_direction>
     ebc:	60 91 64 04 	lds	r22, 0x0464	; 0x800464 <sweepcounter>
     ec0:	70 91 65 04 	lds	r23, 0x0465	; 0x800465 <sweepcounter+0x1>
     ec4:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <sweepcounter+0x2>
     ec8:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <sweepcounter+0x3>
     ecc:	0e 94 7d 05 	call	0xafa	; 0xafa <_Z15setDDSFrequencyl>
     ed0:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <sweepcounter>
     ed4:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <sweepcounter+0x1>
     ed8:	a0 91 66 04 	lds	r26, 0x0466	; 0x800466 <sweepcounter+0x2>
     edc:	b0 91 67 04 	lds	r27, 0x0467	; 0x800467 <sweepcounter+0x3>
     ee0:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <currentFreq>
     ee4:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <currentFreq+0x1>
     ee8:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <currentFreq+0x2>
     eec:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <currentFreq+0x3>
     ef0:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <mode>
     ef4:	81 11       	cpse	r24, r1
     ef6:	2d c0       	rjmp	.+90     	; 0xf52 <_Z17dds_callback_funcv+0x35c>
     ef8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <selectedUpperFreq>
     efc:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
     f00:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
     f04:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	a1 09       	sbc	r26, r1
     f0c:	b1 09       	sbc	r27, r1
     f0e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <selectedLowerFreq>
     f12:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <selectedLowerFreq+0x1>
     f16:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <selectedLowerFreq+0x2>
     f1a:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <selectedLowerFreq+0x3>
     f1e:	60 91 5d 04 	lds	r22, 0x045D	; 0x80045d <selectedUpperFreq>
     f22:	70 91 5e 04 	lds	r23, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
     f26:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
     f2a:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
     f2e:	0e 94 7d 05 	call	0xafa	; 0xafa <_Z15setDDSFrequencyl>
     f32:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <selectedUpperFreq>
     f36:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
     f3a:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
     f3e:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
     f42:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <currentFreq>
     f46:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <currentFreq+0x1>
     f4a:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <currentFreq+0x2>
     f4e:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <currentFreq+0x3>
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	08 95       	ret

00000f6a <_Z11doTimer1Intv>:
     f6a:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <_Z17dds_callback_funcv>

00000f6e <_Z15enableInterrupthPFvvEh>:
     f6e:	e8 2f       	mov	r30, r24
     f70:	ef 77       	andi	r30, 0x7F	; 127
     f72:	87 fd       	sbrc	r24, 7
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <_Z15enableInterrupthPFvvEh+0x12>
     f76:	8e ef       	ldi	r24, 0xFE	; 254
     f78:	8e 0f       	add	r24, r30
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <_Z15enableInterrupthPFvvEh+0x12>
     f7e:	9a c0       	rjmp	.+308    	; 0x10b4 <_Z15enableInterrupthPFvvEh+0x146>
     f80:	8e 2f       	mov	r24, r30
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	e0 57       	subi	r30, 0x70	; 112
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	24 91       	lpm	r18, Z
     f8c:	fc 01       	movw	r30, r24
     f8e:	ec 55       	subi	r30, 0x5C	; 92
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	34 91       	lpm	r19, Z
     f94:	54 2f       	mov	r21, r20
     f96:	5d 7f       	andi	r21, 0xFD	; 253
     f98:	51 30       	cpi	r21, 0x01	; 1
     f9a:	b9 f4       	brne	.+46     	; 0xfca <_Z15enableInterrupthPFvvEh+0x5c>
     f9c:	32 30       	cpi	r19, 0x02	; 2
     f9e:	31 f4       	brne	.+12     	; 0xfac <_Z15enableInterrupthPFvvEh+0x3e>
     fa0:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <risingPinsPORTB>
     fa4:	52 2b       	or	r21, r18
     fa6:	50 93 26 04 	sts	0x0426, r21	; 0x800426 <risingPinsPORTB>
     faa:	0f c0       	rjmp	.+30     	; 0xfca <_Z15enableInterrupthPFvvEh+0x5c>
     fac:	33 30       	cpi	r19, 0x03	; 3
     fae:	31 f4       	brne	.+12     	; 0xfbc <_Z15enableInterrupthPFvvEh+0x4e>
     fb0:	50 91 23 04 	lds	r21, 0x0423	; 0x800423 <risingPinsPORTC>
     fb4:	52 2b       	or	r21, r18
     fb6:	50 93 23 04 	sts	0x0423, r21	; 0x800423 <risingPinsPORTC>
     fba:	07 c0       	rjmp	.+14     	; 0xfca <_Z15enableInterrupthPFvvEh+0x5c>
     fbc:	34 30       	cpi	r19, 0x04	; 4
     fbe:	29 f4       	brne	.+10     	; 0xfca <_Z15enableInterrupthPFvvEh+0x5c>
     fc0:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <risingPinsPORTD>
     fc4:	52 2b       	or	r21, r18
     fc6:	50 93 20 04 	sts	0x0420, r21	; 0x800420 <risingPinsPORTD>
     fca:	41 50       	subi	r20, 0x01	; 1
     fcc:	42 30       	cpi	r20, 0x02	; 2
     fce:	b8 f4       	brcc	.+46     	; 0xffe <_Z15enableInterrupthPFvvEh+0x90>
     fd0:	32 30       	cpi	r19, 0x02	; 2
     fd2:	31 f4       	brne	.+12     	; 0xfe0 <_Z15enableInterrupthPFvvEh+0x72>
     fd4:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <fallingPinsPORTB>
     fd8:	42 2b       	or	r20, r18
     fda:	40 93 25 04 	sts	0x0425, r20	; 0x800425 <fallingPinsPORTB>
     fde:	0f c0       	rjmp	.+30     	; 0xffe <_Z15enableInterrupthPFvvEh+0x90>
     fe0:	33 30       	cpi	r19, 0x03	; 3
     fe2:	31 f4       	brne	.+12     	; 0xff0 <_Z15enableInterrupthPFvvEh+0x82>
     fe4:	40 91 22 04 	lds	r20, 0x0422	; 0x800422 <fallingPinsPORTC>
     fe8:	42 2b       	or	r20, r18
     fea:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <fallingPinsPORTC>
     fee:	07 c0       	rjmp	.+14     	; 0xffe <_Z15enableInterrupthPFvvEh+0x90>
     ff0:	34 30       	cpi	r19, 0x04	; 4
     ff2:	29 f4       	brne	.+10     	; 0xffe <_Z15enableInterrupthPFvvEh+0x90>
     ff4:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <fallingPinsPORTD>
     ff8:	42 2b       	or	r20, r18
     ffa:	40 93 1f 04 	sts	0x041F, r20	; 0x80041f <fallingPinsPORTD>
     ffe:	fc 01       	movw	r30, r24
    1000:	e8 59       	subi	r30, 0x98	; 152
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	a4 91       	lpm	r26, Z
    1006:	32 30       	cpi	r19, 0x02	; 2
    1008:	c1 f4       	brne	.+48     	; 0x103a <_Z15enableInterrupthPFvvEh+0xcc>
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	aa 0f       	add	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	ad 5b       	subi	r26, 0xBD	; 189
    1012:	bb 4f       	sbci	r27, 0xFB	; 251
    1014:	6d 93       	st	X+, r22
    1016:	7c 93       	st	X, r23
    1018:	ec eb       	ldi	r30, 0xBC	; 188
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	a5 91       	lpm	r26, Z+
    101e:	b4 91       	lpm	r27, Z
    1020:	8c 91       	ld	r24, X
    1022:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <_ZL13portSnapshotB>
    1026:	8b e6       	ldi	r24, 0x6B	; 107
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <pcmsk+0x1>
    102e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <pcmsk>
    1032:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	33 c0       	rjmp	.+102    	; 0x10a0 <_Z15enableInterrupthPFvvEh+0x132>
    103a:	33 30       	cpi	r19, 0x03	; 3
    103c:	c1 f4       	brne	.+48     	; 0x106e <_Z15enableInterrupthPFvvEh+0x100>
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	aa 0f       	add	r26, r26
    1042:	bb 1f       	adc	r27, r27
    1044:	a9 5c       	subi	r26, 0xC9	; 201
    1046:	bb 4f       	sbci	r27, 0xFB	; 251
    1048:	6d 93       	st	X+, r22
    104a:	7c 93       	st	X, r23
    104c:	ee eb       	ldi	r30, 0xBE	; 190
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	a5 91       	lpm	r26, Z+
    1052:	b4 91       	lpm	r27, Z
    1054:	8c 91       	ld	r24, X
    1056:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZL13portSnapshotC>
    105a:	8c e6       	ldi	r24, 0x6C	; 108
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <pcmsk+0x1>
    1062:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <pcmsk>
    1066:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    106a:	82 60       	ori	r24, 0x02	; 2
    106c:	19 c0       	rjmp	.+50     	; 0x10a0 <_Z15enableInterrupthPFvvEh+0x132>
    106e:	34 30       	cpi	r19, 0x04	; 4
    1070:	c9 f4       	brne	.+50     	; 0x10a4 <_Z15enableInterrupthPFvvEh+0x136>
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	aa 0f       	add	r26, r26
    1076:	bb 1f       	adc	r27, r27
    1078:	a9 5d       	subi	r26, 0xD9	; 217
    107a:	bb 4f       	sbci	r27, 0xFB	; 251
    107c:	6d 93       	st	X+, r22
    107e:	7c 93       	st	X, r23
    1080:	e0 ec       	ldi	r30, 0xC0	; 192
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	a5 91       	lpm	r26, Z+
    1086:	b4 91       	lpm	r27, Z
    1088:	8c 91       	ld	r24, X
    108a:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_ZL13portSnapshotD>
    108e:	8d e6       	ldi	r24, 0x6D	; 109
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <pcmsk+0x1>
    1096:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <pcmsk>
    109a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    10a4:	a0 91 53 04 	lds	r26, 0x0453	; 0x800453 <pcmsk>
    10a8:	b0 91 54 04 	lds	r27, 0x0454	; 0x800454 <pcmsk+0x1>
    10ac:	ec 91       	ld	r30, X
    10ae:	2e 2b       	or	r18, r30
    10b0:	2c 93       	st	X, r18
    10b2:	08 95       	ret
    10b4:	9f b7       	in	r25, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	e2 30       	cpi	r30, 0x02	; 2
    10ba:	99 f4       	brne	.+38     	; 0x10e2 <_Z15enableInterrupthPFvvEh+0x174>
    10bc:	70 93 50 04 	sts	0x0450, r23	; 0x800450 <functionPointerArrayEXTERNAL+0x1>
    10c0:	60 93 4f 04 	sts	0x044F, r22	; 0x80044f <functionPointerArrayEXTERNAL>
    10c4:	e8 98       	cbi	0x1d, 0	; 29
    10c6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10ca:	8c 7f       	andi	r24, 0xFC	; 252
    10cc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10d0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10d4:	48 2b       	or	r20, r24
    10d6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10da:	e0 9a       	sbi	0x1c, 0	; 28
    10dc:	e8 9a       	sbi	0x1d, 0	; 29
    10de:	9f bf       	out	0x3f, r25	; 63
    10e0:	08 95       	ret
    10e2:	70 93 52 04 	sts	0x0452, r23	; 0x800452 <functionPointerArrayEXTERNAL+0x3>
    10e6:	60 93 51 04 	sts	0x0451, r22	; 0x800451 <functionPointerArrayEXTERNAL+0x2>
    10ea:	e9 98       	cbi	0x1d, 1	; 29
    10ec:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10f0:	83 7f       	andi	r24, 0xF3	; 243
    10f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    10fa:	24 e0       	ldi	r18, 0x04	; 4
    10fc:	42 9f       	mul	r20, r18
    10fe:	a0 01       	movw	r20, r0
    1100:	11 24       	eor	r1, r1
    1102:	48 2b       	or	r20, r24
    1104:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1108:	e1 9a       	sbi	0x1c, 1	; 28
    110a:	e9 9a       	sbi	0x1d, 1	; 29
    110c:	e8 cf       	rjmp	.-48     	; 0x10de <_Z15enableInterrupthPFvvEh+0x170>

0000110e <__vector_1>:
// *************************************************************************************
// External Interrupts
// *************************************************************************************
#ifndef EI_NOTEXTERNAL
#ifndef EI_NOTINT0
ISR(INT0_vect) {/*{{{*/
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
#elif defined EI_ATTINY25
  arduinoInterruptedPin=ARDUINO_PIN_B0; arduinoPinState=PINB & _BV(0);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
#if ! defined EI_ATTINY25 && ! defined EI_ATTINY24
  (*functionPointerArrayEXTERNAL[0])();
    1130:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <functionPointerArrayEXTERNAL>
    1134:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <functionPointerArrayEXTERNAL+0x1>
    1138:	09 95       	icall
  INTERRUPT_FLAG_PIN2++;
#endif
#endif

#endif // NEEDFORSPEED
}/*}}}*/
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_2>:
#endif // EI_NOTINT0

#if ! defined(EI_ATTINY24) && ! defined(EI_ATTINY25)
#ifndef EI_NOTINT1
ISR(INT1_vect) {/*{{{*/
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
  arduinoInterruptedPin=ARDUINO_PIN_D1; arduinoPinState=PIND & _BV(1);
#elif defined ARDUINO_328
  arduinoInterruptedPin=ARDUINO_PIN_D3; arduinoPinState=PIND & _BV(3);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  (*functionPointerArrayEXTERNAL[1])();
    117e:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <functionPointerArrayEXTERNAL+0x2>
    1182:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <functionPointerArrayEXTERNAL+0x3>
    1186:	09 95       	icall
#ifdef INTERRUPT_FLAG_PIN3
  INTERRUPT_FLAG_PIN3++;
#endif
#endif
#endif // NEEDFORSPEED
}/*}}}*/
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	bf 91       	pop	r27
    118e:	af 91       	pop	r26
    1190:	9f 91       	pop	r25
    1192:	8f 91       	pop	r24
    1194:	7f 91       	pop	r23
    1196:	6f 91       	pop	r22
    1198:	5f 91       	pop	r21
    119a:	4f 91       	pop	r20
    119c:	3f 91       	pop	r19
    119e:	2f 91       	pop	r18
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <__vector_3>:
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
    11aa:	1f 92       	push	r1
    11ac:	0f 92       	push	r0
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	0f 92       	push	r0
    11b2:	11 24       	eor	r1, r1
    11b4:	2f 93       	push	r18
    11b6:	3f 93       	push	r19
    11b8:	4f 93       	push	r20
    11ba:	5f 93       	push	r21
    11bc:	6f 93       	push	r22
    11be:	7f 93       	push	r23
    11c0:	8f 93       	push	r24
    11c2:	9f 93       	push	r25
    11c4:	af 93       	push	r26
    11c6:	bf 93       	push	r27
    11c8:	cf 93       	push	r28
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
    11ce:	23 b1       	in	r18, 0x03	; 3
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
    11d0:	c0 91 24 04 	lds	r28, 0x0424	; 0x800424 <_ZL13portSnapshotB>
  tmp           = risingPinsPORTB & current;
    11d4:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <risingPinsPORTB>
  interruptMask = fallingPinsPORTB & ~current;
    11d8:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <fallingPinsPORTB>
    11dc:	32 2f       	mov	r19, r18
    11de:	30 95       	com	r19
    11e0:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
    11e2:	82 23       	and	r24, r18
    11e4:	89 2b       	or	r24, r25
  interruptMask = PCMSK1 & interruptMask;
#else
#ifdef EI_ATTINY25
  interruptMask = PCMSK & interruptMask;
#else
  interruptMask = PCMSK0 & interruptMask;
    11e6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    11ea:	c2 27       	eor	r28, r18
    11ec:	c9 23       	and	r28, r25
    11ee:	c8 23       	and	r28, r24
#endif
#endif

  portSnapshotB = current;
    11f0:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <_ZL13portSnapshotB>
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
    11f4:	cc 23       	and	r28, r28
    11f6:	51 f1       	breq	.+84     	; 0x124c <__vector_3+0xa2>
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
    11f8:	c0 ff       	sbrs	r28, 0
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <__vector_3+0x5c>
    11fc:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <portBFunctions>
    1200:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <portBFunctions+0x1>
    1204:	09 95       	icall
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
    1206:	c1 ff       	sbrs	r28, 1
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <__vector_3+0x6a>
    120a:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <portBFunctions+0x2>
    120e:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <portBFunctions+0x3>
    1212:	09 95       	icall
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
    1214:	c2 ff       	sbrs	r28, 2
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <__vector_3+0x78>
    1218:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <portBFunctions+0x4>
    121c:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <portBFunctions+0x5>
    1220:	09 95       	icall
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
    1222:	c3 ff       	sbrs	r28, 3
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <__vector_3+0x86>
    1226:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <portBFunctions+0x6>
    122a:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <portBFunctions+0x7>
    122e:	09 95       	icall
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
    1230:	c4 ff       	sbrs	r28, 4
    1232:	05 c0       	rjmp	.+10     	; 0x123e <__vector_3+0x94>
    1234:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <portBFunctions+0x8>
    1238:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <portBFunctions+0x9>
    123c:	09 95       	icall
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
    123e:	c5 ff       	sbrs	r28, 5
    1240:	05 c0       	rjmp	.+10     	; 0x124c <__vector_3+0xa2>
    1242:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <portBFunctions+0xa>
    1246:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <portBFunctions+0xb>
    124a:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	cf 91       	pop	r28
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_4>:
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	cf 93       	push	r28
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
    1294:	26 b1       	in	r18, 0x06	; 6
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
    1296:	c0 91 21 04 	lds	r28, 0x0421	; 0x800421 <_ZL13portSnapshotC>
  tmp           = risingPinsPORTC & current;
    129a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <risingPinsPORTC>
  interruptMask = fallingPinsPORTC & ~current;
    129e:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <fallingPinsPORTC>
    12a2:	32 2f       	mov	r19, r18
    12a4:	30 95       	com	r19
    12a6:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
    12a8:	82 23       	and	r24, r18
    12aa:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
#else
  interruptMask = PCMSK1 & interruptMask;
    12ac:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
    12b0:	c2 27       	eor	r28, r18
    12b2:	c9 23       	and	r28, r25
    12b4:	c8 23       	and	r28, r24
#endif

  portSnapshotC = current;
    12b6:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <_ZL13portSnapshotC>
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
    12ba:	cc 23       	and	r28, r28
    12bc:	51 f1       	breq	.+84     	; 0x1312 <__vector_4+0xa2>
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
    12be:	c0 ff       	sbrs	r28, 0
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <__vector_4+0x5c>
    12c2:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <portCFunctions>
    12c6:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <portCFunctions+0x1>
    12ca:	09 95       	icall
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
    12cc:	c1 ff       	sbrs	r28, 1
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <__vector_4+0x6a>
    12d0:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <portCFunctions+0x2>
    12d4:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <portCFunctions+0x3>
    12d8:	09 95       	icall
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
    12da:	c2 ff       	sbrs	r28, 2
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <__vector_4+0x78>
    12de:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <portCFunctions+0x4>
    12e2:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <portCFunctions+0x5>
    12e6:	09 95       	icall
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
    12e8:	c3 ff       	sbrs	r28, 3
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <__vector_4+0x86>
    12ec:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <portCFunctions+0x6>
    12f0:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <portCFunctions+0x7>
    12f4:	09 95       	icall
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
    12f6:	c4 ff       	sbrs	r28, 4
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <__vector_4+0x94>
    12fa:	e0 91 3f 04 	lds	r30, 0x043F	; 0x80043f <portCFunctions+0x8>
    12fe:	f0 91 40 04 	lds	r31, 0x0440	; 0x800440 <portCFunctions+0x9>
    1302:	09 95       	icall
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
    1304:	c5 ff       	sbrs	r28, 5
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <__vector_4+0xa2>
    1308:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <portCFunctions+0xa>
    130c:	f0 91 42 04 	lds	r31, 0x0442	; 0x800442 <portCFunctions+0xb>
    1310:	09 95       	icall
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	cf 91       	pop	r28
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_5>:
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	cf 93       	push	r28
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
    135a:	29 b1       	in	r18, 0x09	; 9
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
    135c:	c0 91 1e 04 	lds	r28, 0x041E	; 0x80041e <_ZL13portSnapshotD>
  tmp           = risingPinsPORTD & current;
    1360:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <risingPinsPORTD>
  interruptMask = fallingPinsPORTD & ~current;
    1364:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <fallingPinsPORTD>
    1368:	32 2f       	mov	r19, r18
    136a:	30 95       	com	r19
    136c:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
    136e:	82 23       	and	r24, r18
    1370:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
#else
  interruptMask = PCMSK2 & interruptMask;
    1372:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    1376:	c2 27       	eor	r28, r18
    1378:	c9 23       	and	r28, r25
    137a:	c8 23       	and	r28, r24
#endif

  portSnapshotD = current;
    137c:	20 93 1e 04 	sts	0x041E, r18	; 0x80041e <_ZL13portSnapshotD>
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
    1380:	cc 23       	and	r28, r28
    1382:	c1 f1       	breq	.+112    	; 0x13f4 <__vector_5+0xbe>
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
    1384:	c0 ff       	sbrs	r28, 0
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <__vector_5+0x5c>
    1388:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <portDFunctions>
    138c:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <portDFunctions+0x1>
    1390:	09 95       	icall
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
    1392:	c1 ff       	sbrs	r28, 1
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <__vector_5+0x6a>
    1396:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <portDFunctions+0x2>
    139a:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <portDFunctions+0x3>
    139e:	09 95       	icall
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
    13a0:	c2 ff       	sbrs	r28, 2
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <__vector_5+0x78>
    13a4:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <portDFunctions+0x4>
    13a8:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <portDFunctions+0x5>
    13ac:	09 95       	icall
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
    13ae:	c3 ff       	sbrs	r28, 3
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <__vector_5+0x86>
    13b2:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <portDFunctions+0x6>
    13b6:	f0 91 2e 04 	lds	r31, 0x042E	; 0x80042e <portDFunctions+0x7>
    13ba:	09 95       	icall
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
    13bc:	c4 ff       	sbrs	r28, 4
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <__vector_5+0x94>
    13c0:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <portDFunctions+0x8>
    13c4:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <portDFunctions+0x9>
    13c8:	09 95       	icall
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
    13ca:	c5 ff       	sbrs	r28, 5
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <__vector_5+0xa2>
    13ce:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <portDFunctions+0xa>
    13d2:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <portDFunctions+0xb>
    13d6:	09 95       	icall
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
    13d8:	c6 ff       	sbrs	r28, 6
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <__vector_5+0xb0>
    13dc:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <portDFunctions+0xc>
    13e0:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <portDFunctions+0xd>
    13e4:	09 95       	icall
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
    13e6:	c7 ff       	sbrs	r28, 7
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <__vector_5+0xbe>
    13ea:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <portDFunctions+0xe>
    13ee:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <portDFunctions+0xf>
    13f2:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	cf 91       	pop	r28
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <_Z11setup_pcintv>:
}

void setup_pcint()
{
  
  enableInterrupt(PD2, doPD2Int, CHANGE); 
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	68 e1       	ldi	r22, 0x18	; 24
    141c:	73 e0       	ldi	r23, 0x03	; 3
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_Z15enableInterrupthPFvvEh>
  enableInterrupt(PD3, doPD3Int, CHANGE); 
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	65 ee       	ldi	r22, 0xE5	; 229
    1428:	74 e0       	ldi	r23, 0x04	; 4
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_Z15enableInterrupthPFvvEh>
  enableInterrupt(PD5, doPD5Int, CHANGE); 
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	60 e6       	ldi	r22, 0x60	; 96
    1434:	73 e0       	ldi	r23, 0x03	; 3
    1436:	85 e0       	ldi	r24, 0x05	; 5
    1438:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_Z15enableInterrupthPFvvEh>
  enableInterrupt(PD6, doPD6Int, CHANGE);
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	69 ec       	ldi	r22, 0xC9	; 201
    1440:	73 e0       	ldi	r23, 0x03	; 3
    1442:	86 e0       	ldi	r24, 0x06	; 6
    1444:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <_Z15enableInterrupthPFvvEh>

00001448 <_Z10oled_setupv>:
int linespace = 9;  //pixels for a newline

void oled_setup() 
{

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	4c e3       	ldi	r20, 0x3C	; 60
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	80 ee       	ldi	r24, 0xE0	; 224
    1450:	93 e0       	ldi	r25, 0x03	; 3
    1452:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZN16Adafruit_SSD13065beginEhhb>
  display.display();
    1456:	80 ee       	ldi	r24, 0xE0	; 224
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
    145e:	80 ee       	ldi	r24, 0xE0	; 224
    1460:	93 e0       	ldi	r25, 0x03	; 3
    1462:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <_ZN16Adafruit_SSD130612clearDisplayEv>

00001466 <_Z13oled_set_textii>:
}

void oled_set_text(int pSize, int pColour) 
{
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	eb 01       	movw	r28, r22
  display.setTextSize(pSize);
    146c:	68 2f       	mov	r22, r24
    146e:	80 ee       	ldi	r24, 0xE0	; 224
    1470:	93 e0       	ldi	r25, 0x03	; 3
    1472:	0e 94 33 19 	call	0x3266	; 0x3266 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(pColour);
    1476:	be 01       	movw	r22, r28
    1478:	80 ee       	ldi	r24, 0xE0	; 224
    147a:	93 e0       	ldi	r25, 0x03	; 3
}
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
}

void oled_set_text(int pSize, int pColour) 
{
  display.setTextSize(pSize);
  display.setTextColor(pColour);
    1480:	0c 94 39 19 	jmp	0x3272	; 0x3272 <_ZN12Adafruit_GFX12setTextColorEj>

00001484 <_Z10oled_resetv>:
}

void oled_reset() 
{
  display.clearDisplay();
    1484:	80 ee       	ldi	r24, 0xE0	; 224
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	0e 94 cf 1c 	call	0x399e	; 0x399e <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	80 ee       	ldi	r24, 0xE0	; 224
    1496:	93 e0       	ldi	r25, 0x03	; 3
    1498:	0c 94 2d 19 	jmp	0x325a	; 0x325a <_ZN12Adafruit_GFX9setCursorEii>

0000149c <_Z16printCurrentFreqv>:
  
}

void printCurrentFreq()
{
  if(currentFreq>999)
    149c:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <currentFreq>
    14a0:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <currentFreq+0x1>
    14a4:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <currentFreq+0x2>
    14a8:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <currentFreq+0x3>
    14ac:	88 3e       	cpi	r24, 0xE8	; 232
    14ae:	93 40       	sbci	r25, 0x03	; 3
    14b0:	a1 05       	cpc	r26, r1
    14b2:	b1 05       	cpc	r27, r1
    14b4:	dc f0       	brlt	.+54     	; 0x14ec <_Z16printCurrentFreqv+0x50>
  {      
    display.print(currentFreq/1000.0); 
    14b6:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <currentFreq>
    14ba:	70 91 56 04 	lds	r23, 0x0456	; 0x800456 <currentFreq+0x1>
    14be:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <currentFreq+0x2>
    14c2:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <currentFreq+0x3>
    14c6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__floatsisf>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divsf3>
    14d6:	ab 01       	movw	r20, r22
    14d8:	bc 01       	movw	r22, r24
    14da:	22 e0       	ldi	r18, 0x02	; 2
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	80 ee       	ldi	r24, 0xE0	; 224
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN5Print5printEdi>
    
    display.print("KHz");        
    14e6:	6b e2       	ldi	r22, 0x2B	; 43
    14e8:	73 e0       	ldi	r23, 0x03	; 3
    14ea:	10 c0       	rjmp	.+32     	; 0x150c <_Z16printCurrentFreqv+0x70>
  }
  else
  {      
    display.print(currentFreq);
    14ec:	40 91 55 04 	lds	r20, 0x0455	; 0x800455 <currentFreq>
    14f0:	50 91 56 04 	lds	r21, 0x0456	; 0x800456 <currentFreq+0x1>
    14f4:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <currentFreq+0x2>
    14f8:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <currentFreq+0x3>
    14fc:	2a e0       	ldi	r18, 0x0A	; 10
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	80 ee       	ldi	r24, 0xE0	; 224
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5Print5printEli>
   
    display.print("Hz");      
    1508:	6c e2       	ldi	r22, 0x2C	; 44
    150a:	73 e0       	ldi	r23, 0x03	; 3
    150c:	80 ee       	ldi	r24, 0xE0	; 224
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN5Print5printEPKc>

00001514 <_Z14printLowerFreqv>:
  }
}

void printLowerFreq()
{
  if(selectedLowerFreq>999)
    1514:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <selectedLowerFreq>
    1518:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
    151c:	a0 91 5b 04 	lds	r26, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
    1520:	b0 91 5c 04 	lds	r27, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
    1524:	88 3e       	cpi	r24, 0xE8	; 232
    1526:	93 40       	sbci	r25, 0x03	; 3
    1528:	a1 05       	cpc	r26, r1
    152a:	b1 05       	cpc	r27, r1
    152c:	dc f0       	brlt	.+54     	; 0x1564 <_Z14printLowerFreqv+0x50>
  {      
    display.print(selectedLowerFreq/1000.0); 
    152e:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <selectedLowerFreq>
    1532:	70 91 5a 04 	lds	r23, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
    1536:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
    153a:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
    153e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__floatsisf>
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a e7       	ldi	r20, 0x7A	; 122
    1548:	54 e4       	ldi	r21, 0x44	; 68
    154a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divsf3>
    154e:	ab 01       	movw	r20, r22
    1550:	bc 01       	movw	r22, r24
    1552:	22 e0       	ldi	r18, 0x02	; 2
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	80 ee       	ldi	r24, 0xE0	; 224
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN5Print5printEdi>
    
    display.print("KHz");        
    155e:	6b e2       	ldi	r22, 0x2B	; 43
    1560:	73 e0       	ldi	r23, 0x03	; 3
    1562:	10 c0       	rjmp	.+32     	; 0x1584 <_Z14printLowerFreqv+0x70>
  }
  else
  {      
    display.print(selectedLowerFreq);
    1564:	40 91 59 04 	lds	r20, 0x0459	; 0x800459 <selectedLowerFreq>
    1568:	50 91 5a 04 	lds	r21, 0x045A	; 0x80045a <selectedLowerFreq+0x1>
    156c:	60 91 5b 04 	lds	r22, 0x045B	; 0x80045b <selectedLowerFreq+0x2>
    1570:	70 91 5c 04 	lds	r23, 0x045C	; 0x80045c <selectedLowerFreq+0x3>
    1574:	2a e0       	ldi	r18, 0x0A	; 10
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	80 ee       	ldi	r24, 0xE0	; 224
    157a:	93 e0       	ldi	r25, 0x03	; 3
    157c:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5Print5printEli>
   
    display.print("Hz");      
    1580:	6c e2       	ldi	r22, 0x2C	; 44
    1582:	73 e0       	ldi	r23, 0x03	; 3
    1584:	80 ee       	ldi	r24, 0xE0	; 224
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN5Print5printEPKc>

0000158c <_Z14printUpperFreqv>:
  }
}

void printUpperFreq()
{
  if(selectedUpperFreq>999)
    158c:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <selectedUpperFreq>
    1590:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
    1594:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
    1598:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
    159c:	88 3e       	cpi	r24, 0xE8	; 232
    159e:	93 40       	sbci	r25, 0x03	; 3
    15a0:	a1 05       	cpc	r26, r1
    15a2:	b1 05       	cpc	r27, r1
    15a4:	dc f0       	brlt	.+54     	; 0x15dc <_Z14printUpperFreqv+0x50>
  {      
    display.print(selectedUpperFreq/1000.0); 
    15a6:	60 91 5d 04 	lds	r22, 0x045D	; 0x80045d <selectedUpperFreq>
    15aa:	70 91 5e 04 	lds	r23, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
    15ae:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
    15b2:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
    15b6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__floatsisf>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	4a e7       	ldi	r20, 0x7A	; 122
    15c0:	54 e4       	ldi	r21, 0x44	; 68
    15c2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divsf3>
    15c6:	ab 01       	movw	r20, r22
    15c8:	bc 01       	movw	r22, r24
    15ca:	22 e0       	ldi	r18, 0x02	; 2
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	80 ee       	ldi	r24, 0xE0	; 224
    15d0:	93 e0       	ldi	r25, 0x03	; 3
    15d2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN5Print5printEdi>
   
    display.print("KHz");        
    15d6:	6b e2       	ldi	r22, 0x2B	; 43
    15d8:	73 e0       	ldi	r23, 0x03	; 3
    15da:	10 c0       	rjmp	.+32     	; 0x15fc <_Z14printUpperFreqv+0x70>
  }
  else
  {      
    display.print(selectedUpperFreq);
    15dc:	40 91 5d 04 	lds	r20, 0x045D	; 0x80045d <selectedUpperFreq>
    15e0:	50 91 5e 04 	lds	r21, 0x045E	; 0x80045e <selectedUpperFreq+0x1>
    15e4:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <selectedUpperFreq+0x2>
    15e8:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <selectedUpperFreq+0x3>
    15ec:	2a e0       	ldi	r18, 0x0A	; 10
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	80 ee       	ldi	r24, 0xE0	; 224
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5Print5printEli>
    
    display.print("Hz");      
    15f8:	6c e2       	ldi	r22, 0x2C	; 44
    15fa:	73 e0       	ldi	r23, 0x03	; 3
    15fc:	80 ee       	ldi	r24, 0xE0	; 224
    15fe:	93 e0       	ldi	r25, 0x03	; 3
    1600:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN5Print5printEPKc>

00001604 <_Z9oled_drawv>:

void oled_draw()
{


  oled_reset();
    1604:	0e 94 42 0a 	call	0x1484	; 0x1484 <_Z10oled_resetv>
  oled_set_text(1,1);
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z13oled_set_textii>
  
  // print function
  display.setCursor(0,0); 
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	80 ee       	ldi	r24, 0xE0	; 224
    161e:	93 e0       	ldi	r25, 0x03	; 3
    1620:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN12Adafruit_GFX9setCursorEii>
  if(func==SINE) 
    1624:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <func>
    1628:	81 11       	cpse	r24, r1
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <_Z9oled_drawv+0x2e>
  {
    display.print("SINE");
    162c:	6f e2       	ldi	r22, 0x2F	; 47
    162e:	73 e0       	ldi	r23, 0x03	; 3
    1630:	09 c0       	rjmp	.+18     	; 0x1644 <_Z9oled_drawv+0x40>
  }
  else if(func==SQUARE)
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	19 f4       	brne	.+6      	; 0x163c <_Z9oled_drawv+0x38>
  {
    display.print("SQ");
    1636:	64 e3       	ldi	r22, 0x34	; 52
    1638:	73 e0       	ldi	r23, 0x03	; 3
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <_Z9oled_drawv+0x40>
  }
  else if(func == TRIANGLE)
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	31 f4       	brne	.+12     	; 0x164c <_Z9oled_drawv+0x48>
  {
    display.print("TRI");
    1640:	67 e3       	ldi	r22, 0x37	; 55
    1642:	73 e0       	ldi	r23, 0x03	; 3
    1644:	80 ee       	ldi	r24, 0xE0	; 224
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN5Print5printEPKc>
  }

  
  if(mode == NORMAL)
    164c:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <mode>
    1650:	81 11       	cpse	r24, r1
    1652:	1f c0       	rjmp	.+62     	; 0x1692 <_Z9oled_drawv+0x8e>
  {
    display.print(" NORMAL");
    1654:	6b e3       	ldi	r22, 0x3B	; 59
    1656:	73 e0       	ldi	r23, 0x03	; 3
    1658:	80 ee       	ldi	r24, 0xE0	; 224
    165a:	93 e0       	ldi	r25, 0x03	; 3
    165c:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN5Print5printEPKc>
    display.setCursor(20,linespace);
    1660:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1664:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    1668:	64 e1       	ldi	r22, 0x14	; 20
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	80 ee       	ldi	r24, 0xE0	; 224
    166e:	93 e0       	ldi	r25, 0x03	; 3
    1670:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN12Adafruit_GFX9setCursorEii>
   
    // print upper freq only
    oled_set_text(2,1);
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z13oled_set_textii>
    printCurrentFreq();
    1680:	0e 94 4e 0a 	call	0x149c	; 0x149c <_Z16printCurrentFreqv>
    oled_set_text(1,1);
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z13oled_set_textii>
    1690:	40 c0       	rjmp	.+128    	; 0x1712 <_Z9oled_drawv+0x10e>
    
  }
  else 
  {
    display.print(" SWEEP");
    1692:	63 e4       	ldi	r22, 0x43	; 67
    1694:	73 e0       	ldi	r23, 0x03	; 3
    1696:	80 ee       	ldi	r24, 0xE0	; 224
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN5Print5printEPKc>
    display.print(" Vel=");
    169e:	6a e4       	ldi	r22, 0x4A	; 74
    16a0:	73 e0       	ldi	r23, 0x03	; 3
    16a2:	80 ee       	ldi	r24, 0xE0	; 224
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN5Print5printEPKc>
    display.print(ADCInput6);
    16aa:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <ADCInput6>
    16ae:	70 91 6f 04 	lds	r23, 0x046F	; 0x80046f <ADCInput6+0x1>
    16b2:	4a e0       	ldi	r20, 0x0A	; 10
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	80 ee       	ldi	r24, 0xE0	; 224
    16b8:	93 e0       	ldi	r25, 0x03	; 3
    16ba:	0e 94 14 11 	call	0x2228	; 0x2228 <_ZN5Print5printEii>
    
    display.setCursor(20,linespace);
    16be:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    16c2:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    16c6:	64 e1       	ldi	r22, 0x14	; 20
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	80 ee       	ldi	r24, 0xE0	; 224
    16cc:	93 e0       	ldi	r25, 0x03	; 3
    16ce:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN12Adafruit_GFX9setCursorEii>

    oled_set_text(2,1);
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z13oled_set_textii>
    printCurrentFreq();
    16de:	0e 94 4e 0a 	call	0x149c	; 0x149c <_Z16printCurrentFreqv>
    oled_set_text(1,1);
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z13oled_set_textii>

    display.setCursor(0,25);
    16ee:	49 e1       	ldi	r20, 0x19	; 25
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	80 ee       	ldi	r24, 0xE0	; 224
    16f8:	93 e0       	ldi	r25, 0x03	; 3
    16fa:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN12Adafruit_GFX9setCursorEii>
    printLowerFreq();
    16fe:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_Z14printLowerFreqv>
    display.print(" -> ");
    1702:	60 e5       	ldi	r22, 0x50	; 80
    1704:	73 e0       	ldi	r23, 0x03	; 3
    1706:	80 ee       	ldi	r24, 0xE0	; 224
    1708:	93 e0       	ldi	r25, 0x03	; 3
    170a:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN5Print5printEPKc>
    printUpperFreq();
    170e:	0e 94 c6 0a 	call	0x158c	; 0x158c <_Z14printUpperFreqv>

  }

  display.display();
    1712:	80 ee       	ldi	r24, 0xE0	; 224
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <_ZN16Adafruit_SSD13067displayEv>

0000171a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    171a:	26 e0       	ldi	r18, 0x06	; 6
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	55 e2       	ldi	r21, 0x25	; 37
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	8c e7       	ldi	r24, 0x7C	; 124
    1726:	94 e0       	ldi	r25, 0x04	; 4
    1728:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <_ZN14HardwareSerial5beginEmh>

void setup() 
{
  Serial.begin(9600);
  
  Timer1.initialize(clkspeed);
    172c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <clkspeed>
    1730:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <clkspeed+0x1>
    1734:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <clkspeed+0x2>
    1738:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <clkspeed+0x3>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    173c:	20 e1       	ldi	r18, 0x10	; 16
    173e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1A = 0;                 // clear control register A 
    1742:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
    1746:	63 e0       	ldi	r22, 0x03	; 3
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	aa 1f       	adc	r26, r26
    174e:	bb 1f       	adc	r27, r27
    1750:	6a 95       	dec	r22
    1752:	d1 f7       	brne	.-12     	; 0x1748 <setup+0x2e>
	if (cycles < TIMER1_RESOLUTION) {
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	a2 07       	cpc	r26, r18
    175a:	b1 05       	cpc	r27, r1
    175c:	20 f4       	brcc	.+8      	; 0x1766 <setup+0x4c>
		clockSelectBits = _BV(CS10);
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
    1764:	42 c0       	rjmp	.+132    	; 0x17ea <setup+0xd0>
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	28 e0       	ldi	r18, 0x08	; 8
    176a:	a2 07       	cpc	r26, r18
    176c:	b1 05       	cpc	r27, r1
    176e:	58 f4       	brcc	.+22     	; 0x1786 <setup+0x6c>
		clockSelectBits = _BV(CS11);
    1770:	22 e0       	ldi	r18, 0x02	; 2
    1772:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 8;
    1776:	53 e0       	ldi	r21, 0x03	; 3
    1778:	b6 95       	lsr	r27
    177a:	a7 95       	ror	r26
    177c:	97 95       	ror	r25
    177e:	87 95       	ror	r24
    1780:	5a 95       	dec	r21
    1782:	d1 f7       	brne	.-12     	; 0x1778 <setup+0x5e>
    1784:	32 c0       	rjmp	.+100    	; 0x17ea <setup+0xd0>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	20 e4       	ldi	r18, 0x40	; 64
    178a:	a2 07       	cpc	r26, r18
    178c:	b1 05       	cpc	r27, r1
    178e:	58 f4       	brcc	.+22     	; 0x17a6 <setup+0x8c>
		clockSelectBits = _BV(CS11) | _BV(CS10);
    1790:	23 e0       	ldi	r18, 0x03	; 3
    1792:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 64;
    1796:	46 e0       	ldi	r20, 0x06	; 6
    1798:	b6 95       	lsr	r27
    179a:	a7 95       	ror	r26
    179c:	97 95       	ror	r25
    179e:	87 95       	ror	r24
    17a0:	4a 95       	dec	r20
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <setup+0x7e>
    17a4:	22 c0       	rjmp	.+68     	; 0x17ea <setup+0xd0>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	a1 05       	cpc	r26, r1
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	b2 07       	cpc	r27, r18
    17ae:	40 f4       	brcc	.+16     	; 0x17c0 <setup+0xa6>
		clockSelectBits = _BV(CS12);
    17b0:	24 e0       	ldi	r18, 0x04	; 4
    17b2:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 256;
    17b6:	89 2f       	mov	r24, r25
    17b8:	9a 2f       	mov	r25, r26
    17ba:	ab 2f       	mov	r26, r27
    17bc:	bb 27       	eor	r27, r27
    17be:	15 c0       	rjmp	.+42     	; 0x17ea <setup+0xd0>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	a1 05       	cpc	r26, r1
    17c4:	24 e0       	ldi	r18, 0x04	; 4
    17c6:	b2 07       	cpc	r27, r18
    17c8:	58 f4       	brcc	.+22     	; 0x17e0 <setup+0xc6>
		clockSelectBits = _BV(CS12) | _BV(CS10);
    17ca:	25 e0       	ldi	r18, 0x05	; 5
    17cc:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 1024;
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	b6 95       	lsr	r27
    17d4:	a7 95       	ror	r26
    17d6:	97 95       	ror	r25
    17d8:	87 95       	ror	r24
    17da:	2a 95       	dec	r18
    17dc:	d1 f7       	brne	.-12     	; 0x17d2 <setup+0xb8>
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <setup+0xd0>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
    17e0:	85 e0       	ldi	r24, 0x05	; 5
    17e2:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = TIMER1_RESOLUTION - 1;
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
    17ea:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <_ZN8TimerOne9pwmPeriodE+0x1>
    17ee:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZN8TimerOne9pwmPeriodE>
	}
	ICR1 = pwmPeriod;
    17f2:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZN8TimerOne9pwmPeriodE>
    17f6:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <_ZN8TimerOne9pwmPeriodE+0x1>
    17fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    17fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1802:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <_ZN8TimerOne15clockSelectBitsE>
    1806:	80 61       	ori	r24, 0x10	; 16
    1808:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
    180c:	85 eb       	ldi	r24, 0xB5	; 181
    180e:	97 e0       	ldi	r25, 0x07	; 7
    1810:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <_ZN8TimerOne11isrCallbackE+0x1>
    1814:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <_ZN8TimerOne11isrCallbackE>
	TIMSK1 = _BV(TOIE1);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  Timer1.attachInterrupt(doTimer1Int);
  
  setup_pcint();
    181e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_Z11setup_pcintv>

  adc_setup();
    1822:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z9adc_setupv>
  oled_setup();
    1826:	0e 94 24 0a 	call	0x1448	; 0x1448 <_Z10oled_setupv>
  
  
  
  pinMode (digipot_ss_pin, OUTPUT);
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	89 e0       	ldi	r24, 0x09	; 9
    182e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
  digitalWrite(digipot_ss_pin, HIGH);
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	89 e0       	ldi	r24, 0x09	; 9
    1836:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
  pinMode (dds_ss_pin, OUTPUT);
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	8a e0       	ldi	r24, 0x0A	; 10
    183e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
  digitalWrite(dds_ss_pin, HIGH);
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	8a e0       	ldi	r24, 0x0A	; 10
    1846:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
  SPI.begin();
    184a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <_ZN8SPIClass5beginEv>
  
  digipot_write_spi(MCP_WRITEPB0, TriUnityLvl, digipot_ss_pin);
    184e:	49 e0       	ldi	r20, 0x09	; 9
    1850:	6f ef       	ldi	r22, 0xFF	; 255
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	81 e1       	ldi	r24, 0x11	; 17
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
  digipot_write_spi(MCP_WRITEPB0, SquareUnityLvl, digipot_ss_pin);
    185c:	49 e0       	ldi	r20, 0x09	; 9
    185e:	6e e1       	ldi	r22, 0x1E	; 30
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	81 e1       	ldi	r24, 0x11	; 17
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
  digipot_write_spi(MCP_WRITEPB0, SineUnityLvl, digipot_ss_pin);
    186a:	49 e0       	ldi	r20, 0x09	; 9
    186c:	6f ef       	ldi	r22, 0xFF	; 255
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	81 e1       	ldi	r24, 0x11	; 17
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>

  digipot_write_spi(MCP_WRITEPB1, TriOffsetLvl, digipot_ss_pin);
    1878:	49 e0       	ldi	r20, 0x09	; 9
    187a:	67 e5       	ldi	r22, 0x57	; 87
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	82 e1       	ldi	r24, 0x12	; 18
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
  digipot_write_spi(MCP_WRITEPB1, SquareOffsetLvl, digipot_ss_pin);
    1886:	49 e0       	ldi	r20, 0x09	; 9
    1888:	6a e0       	ldi	r22, 0x0A	; 10
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	82 e1       	ldi	r24, 0x12	; 18
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 c4 04 	call	0x988	; 0x988 <_Z17digipot_write_spiiih>
  digipot_write_spi(MCP_WRITEPB1, SineOffsetLvl, digipot_ss_pin);
    1894:	49 e0       	ldi	r20, 0x09	; 9
    1896:	67 e5       	ldi	r22, 0x57	; 87
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	82 e1       	ldi	r24, 0x12	; 18
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0c 94 c4 04 	jmp	0x988	; 0x988 <_Z17digipot_write_spiiih>

000018a2 <main>:
	
	#if defined(USBCON)
	USBDevice.attach();
	#endif
	*/
	setup();
    18a2:	0e 94 8d 0b 	call	0x171a	; 0x171a <setup>
	
	while(1) 
	{
		oled_draw();
    18a6:	0e 94 02 0b 	call	0x1604	; 0x1604 <_Z9oled_drawv>
    18aa:	fd cf       	rjmp	.-6      	; 0x18a6 <main+0x4>

000018ac <_GLOBAL__sub_I__Z17printBinaryNIBBLEh>:
// phase presets and current setting
int PHASE0 = 0xC000;
int PHASE90 = 0xC400;
int PHASE180 = 0xC800;
int PHASE270 = 0xCC00;
int current_phase = PHASE0;
    18ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PHASE0>
    18b0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <PHASE0+0x1>
    18b4:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <current_phase+0x1>
    18b8:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <current_phase>
#include <Adafruit_SSD1306.h>
#include "dds.h"
#include "pcint.h"

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
    18bc:	64 e0       	ldi	r22, 0x04	; 4
    18be:	80 ee       	ldi	r24, 0xE0	; 224
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <_ZN16Adafruit_SSD1306C1Ea>

000018c6 <__subsf3>:
    18c6:	50 58       	subi	r21, 0x80	; 128

000018c8 <__addsf3>:
    18c8:	bb 27       	eor	r27, r27
    18ca:	aa 27       	eor	r26, r26
    18cc:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__addsf3x>
    18d0:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_round>
    18d4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscA>
    18d8:	38 f0       	brcs	.+14     	; 0x18e8 <__addsf3+0x20>
    18da:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscB>
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <__addsf3+0x20>
    18e0:	39 f4       	brne	.+14     	; 0x18f0 <__addsf3+0x28>
    18e2:	9f 3f       	cpi	r25, 0xFF	; 255
    18e4:	19 f4       	brne	.+6      	; 0x18ec <__addsf3+0x24>
    18e6:	26 f4       	brtc	.+8      	; 0x18f0 <__addsf3+0x28>
    18e8:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__fp_nan>
    18ec:	0e f4       	brtc	.+2      	; 0x18f0 <__addsf3+0x28>
    18ee:	e0 95       	com	r30
    18f0:	e7 fb       	bst	r30, 7
    18f2:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>

000018f6 <__addsf3x>:
    18f6:	e9 2f       	mov	r30, r25
    18f8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fp_split3>
    18fc:	58 f3       	brcs	.-42     	; 0x18d4 <__addsf3+0xc>
    18fe:	ba 17       	cp	r27, r26
    1900:	62 07       	cpc	r22, r18
    1902:	73 07       	cpc	r23, r19
    1904:	84 07       	cpc	r24, r20
    1906:	95 07       	cpc	r25, r21
    1908:	20 f0       	brcs	.+8      	; 0x1912 <__addsf3x+0x1c>
    190a:	79 f4       	brne	.+30     	; 0x192a <__addsf3x+0x34>
    190c:	a6 f5       	brtc	.+104    	; 0x1976 <__addsf3x+0x80>
    190e:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_zero>
    1912:	0e f4       	brtc	.+2      	; 0x1916 <__addsf3x+0x20>
    1914:	e0 95       	com	r30
    1916:	0b 2e       	mov	r0, r27
    1918:	ba 2f       	mov	r27, r26
    191a:	a0 2d       	mov	r26, r0
    191c:	0b 01       	movw	r0, r22
    191e:	b9 01       	movw	r22, r18
    1920:	90 01       	movw	r18, r0
    1922:	0c 01       	movw	r0, r24
    1924:	ca 01       	movw	r24, r20
    1926:	a0 01       	movw	r20, r0
    1928:	11 24       	eor	r1, r1
    192a:	ff 27       	eor	r31, r31
    192c:	59 1b       	sub	r21, r25
    192e:	99 f0       	breq	.+38     	; 0x1956 <__addsf3x+0x60>
    1930:	59 3f       	cpi	r21, 0xF9	; 249
    1932:	50 f4       	brcc	.+20     	; 0x1948 <__addsf3x+0x52>
    1934:	50 3e       	cpi	r21, 0xE0	; 224
    1936:	68 f1       	brcs	.+90     	; 0x1992 <__addsf3x+0x9c>
    1938:	1a 16       	cp	r1, r26
    193a:	f0 40       	sbci	r31, 0x00	; 0
    193c:	a2 2f       	mov	r26, r18
    193e:	23 2f       	mov	r18, r19
    1940:	34 2f       	mov	r19, r20
    1942:	44 27       	eor	r20, r20
    1944:	58 5f       	subi	r21, 0xF8	; 248
    1946:	f3 cf       	rjmp	.-26     	; 0x192e <__addsf3x+0x38>
    1948:	46 95       	lsr	r20
    194a:	37 95       	ror	r19
    194c:	27 95       	ror	r18
    194e:	a7 95       	ror	r26
    1950:	f0 40       	sbci	r31, 0x00	; 0
    1952:	53 95       	inc	r21
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__addsf3x+0x52>
    1956:	7e f4       	brtc	.+30     	; 0x1976 <__addsf3x+0x80>
    1958:	1f 16       	cp	r1, r31
    195a:	ba 0b       	sbc	r27, r26
    195c:	62 0b       	sbc	r22, r18
    195e:	73 0b       	sbc	r23, r19
    1960:	84 0b       	sbc	r24, r20
    1962:	ba f0       	brmi	.+46     	; 0x1992 <__addsf3x+0x9c>
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	a1 f0       	breq	.+40     	; 0x1990 <__addsf3x+0x9a>
    1968:	ff 0f       	add	r31, r31
    196a:	bb 1f       	adc	r27, r27
    196c:	66 1f       	adc	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	c2 f7       	brpl	.-16     	; 0x1964 <__addsf3x+0x6e>
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <__addsf3x+0x9c>
    1976:	ba 0f       	add	r27, r26
    1978:	62 1f       	adc	r22, r18
    197a:	73 1f       	adc	r23, r19
    197c:	84 1f       	adc	r24, r20
    197e:	48 f4       	brcc	.+18     	; 0x1992 <__addsf3x+0x9c>
    1980:	87 95       	ror	r24
    1982:	77 95       	ror	r23
    1984:	67 95       	ror	r22
    1986:	b7 95       	ror	r27
    1988:	f7 95       	ror	r31
    198a:	9e 3f       	cpi	r25, 0xFE	; 254
    198c:	08 f0       	brcs	.+2      	; 0x1990 <__addsf3x+0x9a>
    198e:	b0 cf       	rjmp	.-160    	; 0x18f0 <__addsf3+0x28>
    1990:	93 95       	inc	r25
    1992:	88 0f       	add	r24, r24
    1994:	08 f0       	brcs	.+2      	; 0x1998 <__addsf3x+0xa2>
    1996:	99 27       	eor	r25, r25
    1998:	ee 0f       	add	r30, r30
    199a:	97 95       	ror	r25
    199c:	87 95       	ror	r24
    199e:	08 95       	ret

000019a0 <__divsf3>:
    19a0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divsf3x>
    19a4:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_round>
    19a8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscB>
    19ac:	58 f0       	brcs	.+22     	; 0x19c4 <__divsf3+0x24>
    19ae:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscA>
    19b2:	40 f0       	brcs	.+16     	; 0x19c4 <__divsf3+0x24>
    19b4:	29 f4       	brne	.+10     	; 0x19c0 <__divsf3+0x20>
    19b6:	5f 3f       	cpi	r21, 0xFF	; 255
    19b8:	29 f0       	breq	.+10     	; 0x19c4 <__divsf3+0x24>
    19ba:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>
    19be:	51 11       	cpse	r21, r1
    19c0:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_szero>
    19c4:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__fp_nan>

000019c8 <__divsf3x>:
    19c8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fp_split3>
    19cc:	68 f3       	brcs	.-38     	; 0x19a8 <__divsf3+0x8>

000019ce <__divsf3_pse>:
    19ce:	99 23       	and	r25, r25
    19d0:	b1 f3       	breq	.-20     	; 0x19be <__divsf3+0x1e>
    19d2:	55 23       	and	r21, r21
    19d4:	91 f3       	breq	.-28     	; 0x19ba <__divsf3+0x1a>
    19d6:	95 1b       	sub	r25, r21
    19d8:	55 0b       	sbc	r21, r21
    19da:	bb 27       	eor	r27, r27
    19dc:	aa 27       	eor	r26, r26
    19de:	62 17       	cp	r22, r18
    19e0:	73 07       	cpc	r23, r19
    19e2:	84 07       	cpc	r24, r20
    19e4:	38 f0       	brcs	.+14     	; 0x19f4 <__divsf3_pse+0x26>
    19e6:	9f 5f       	subi	r25, 0xFF	; 255
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	44 1f       	adc	r20, r20
    19f0:	aa 1f       	adc	r26, r26
    19f2:	a9 f3       	breq	.-22     	; 0x19de <__divsf3_pse+0x10>
    19f4:	35 d0       	rcall	.+106    	; 0x1a60 <__divsf3_pse+0x92>
    19f6:	0e 2e       	mov	r0, r30
    19f8:	3a f0       	brmi	.+14     	; 0x1a08 <__divsf3_pse+0x3a>
    19fa:	e0 e8       	ldi	r30, 0x80	; 128
    19fc:	32 d0       	rcall	.+100    	; 0x1a62 <__divsf3_pse+0x94>
    19fe:	91 50       	subi	r25, 0x01	; 1
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	e6 95       	lsr	r30
    1a04:	00 1c       	adc	r0, r0
    1a06:	ca f7       	brpl	.-14     	; 0x19fa <__divsf3_pse+0x2c>
    1a08:	2b d0       	rcall	.+86     	; 0x1a60 <__divsf3_pse+0x92>
    1a0a:	fe 2f       	mov	r31, r30
    1a0c:	29 d0       	rcall	.+82     	; 0x1a60 <__divsf3_pse+0x92>
    1a0e:	66 0f       	add	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	bb 1f       	adc	r27, r27
    1a16:	26 17       	cp	r18, r22
    1a18:	37 07       	cpc	r19, r23
    1a1a:	48 07       	cpc	r20, r24
    1a1c:	ab 07       	cpc	r26, r27
    1a1e:	b0 e8       	ldi	r27, 0x80	; 128
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <__divsf3_pse+0x56>
    1a22:	bb 0b       	sbc	r27, r27
    1a24:	80 2d       	mov	r24, r0
    1a26:	bf 01       	movw	r22, r30
    1a28:	ff 27       	eor	r31, r31
    1a2a:	93 58       	subi	r25, 0x83	; 131
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	3a f0       	brmi	.+14     	; 0x1a3e <__divsf3_pse+0x70>
    1a30:	9e 3f       	cpi	r25, 0xFE	; 254
    1a32:	51 05       	cpc	r21, r1
    1a34:	78 f0       	brcs	.+30     	; 0x1a54 <__divsf3_pse+0x86>
    1a36:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>
    1a3a:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_szero>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	e4 f3       	brlt	.-8      	; 0x1a3a <__divsf3_pse+0x6c>
    1a42:	98 3e       	cpi	r25, 0xE8	; 232
    1a44:	d4 f3       	brlt	.-12     	; 0x1a3a <__divsf3_pse+0x6c>
    1a46:	86 95       	lsr	r24
    1a48:	77 95       	ror	r23
    1a4a:	67 95       	ror	r22
    1a4c:	b7 95       	ror	r27
    1a4e:	f7 95       	ror	r31
    1a50:	9f 5f       	subi	r25, 0xFF	; 255
    1a52:	c9 f7       	brne	.-14     	; 0x1a46 <__divsf3_pse+0x78>
    1a54:	88 0f       	add	r24, r24
    1a56:	91 1d       	adc	r25, r1
    1a58:	96 95       	lsr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	97 f9       	bld	r25, 7
    1a5e:	08 95       	ret
    1a60:	e1 e0       	ldi	r30, 0x01	; 1
    1a62:	66 0f       	add	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	88 1f       	adc	r24, r24
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	62 17       	cp	r22, r18
    1a6c:	73 07       	cpc	r23, r19
    1a6e:	84 07       	cpc	r24, r20
    1a70:	ba 07       	cpc	r27, r26
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <__divsf3_pse+0xae>
    1a74:	62 1b       	sub	r22, r18
    1a76:	73 0b       	sbc	r23, r19
    1a78:	84 0b       	sbc	r24, r20
    1a7a:	ba 0b       	sbc	r27, r26
    1a7c:	ee 1f       	adc	r30, r30
    1a7e:	88 f7       	brcc	.-30     	; 0x1a62 <__divsf3_pse+0x94>
    1a80:	e0 95       	com	r30
    1a82:	08 95       	ret

00001a84 <__fixsfsi>:
    1a84:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fixunssfsi>
    1a88:	68 94       	set
    1a8a:	b1 11       	cpse	r27, r1
    1a8c:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_szero>
    1a90:	08 95       	ret

00001a92 <__fixunssfsi>:
    1a92:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__fp_splitA>
    1a96:	88 f0       	brcs	.+34     	; 0x1aba <__fixunssfsi+0x28>
    1a98:	9f 57       	subi	r25, 0x7F	; 127
    1a9a:	98 f0       	brcs	.+38     	; 0x1ac2 <__fixunssfsi+0x30>
    1a9c:	b9 2f       	mov	r27, r25
    1a9e:	99 27       	eor	r25, r25
    1aa0:	b7 51       	subi	r27, 0x17	; 23
    1aa2:	b0 f0       	brcs	.+44     	; 0x1ad0 <__fixunssfsi+0x3e>
    1aa4:	e1 f0       	breq	.+56     	; 0x1ade <__fixunssfsi+0x4c>
    1aa6:	66 0f       	add	r22, r22
    1aa8:	77 1f       	adc	r23, r23
    1aaa:	88 1f       	adc	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	1a f0       	brmi	.+6      	; 0x1ab6 <__fixunssfsi+0x24>
    1ab0:	ba 95       	dec	r27
    1ab2:	c9 f7       	brne	.-14     	; 0x1aa6 <__fixunssfsi+0x14>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <__fixunssfsi+0x4c>
    1ab6:	b1 30       	cpi	r27, 0x01	; 1
    1ab8:	91 f0       	breq	.+36     	; 0x1ade <__fixunssfsi+0x4c>
    1aba:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_zero>
    1abe:	b1 e0       	ldi	r27, 0x01	; 1
    1ac0:	08 95       	ret
    1ac2:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_zero>
    1ac6:	67 2f       	mov	r22, r23
    1ac8:	78 2f       	mov	r23, r24
    1aca:	88 27       	eor	r24, r24
    1acc:	b8 5f       	subi	r27, 0xF8	; 248
    1ace:	39 f0       	breq	.+14     	; 0x1ade <__fixunssfsi+0x4c>
    1ad0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ad2:	cc f3       	brlt	.-14     	; 0x1ac6 <__fixunssfsi+0x34>
    1ad4:	86 95       	lsr	r24
    1ad6:	77 95       	ror	r23
    1ad8:	67 95       	ror	r22
    1ada:	b3 95       	inc	r27
    1adc:	d9 f7       	brne	.-10     	; 0x1ad4 <__fixunssfsi+0x42>
    1ade:	3e f4       	brtc	.+14     	; 0x1aee <__fixunssfsi+0x5c>
    1ae0:	90 95       	com	r25
    1ae2:	80 95       	com	r24
    1ae4:	70 95       	com	r23
    1ae6:	61 95       	neg	r22
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	8f 4f       	sbci	r24, 0xFF	; 255
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	08 95       	ret

00001af0 <__floatunsisf>:
    1af0:	e8 94       	clt
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <__floatsisf+0x12>

00001af4 <__floatsisf>:
    1af4:	97 fb       	bst	r25, 7
    1af6:	3e f4       	brtc	.+14     	; 0x1b06 <__floatsisf+0x12>
    1af8:	90 95       	com	r25
    1afa:	80 95       	com	r24
    1afc:	70 95       	com	r23
    1afe:	61 95       	neg	r22
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	8f 4f       	sbci	r24, 0xFF	; 255
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	99 23       	and	r25, r25
    1b08:	a9 f0       	breq	.+42     	; 0x1b34 <__floatsisf+0x40>
    1b0a:	f9 2f       	mov	r31, r25
    1b0c:	96 e9       	ldi	r25, 0x96	; 150
    1b0e:	bb 27       	eor	r27, r27
    1b10:	93 95       	inc	r25
    1b12:	f6 95       	lsr	r31
    1b14:	87 95       	ror	r24
    1b16:	77 95       	ror	r23
    1b18:	67 95       	ror	r22
    1b1a:	b7 95       	ror	r27
    1b1c:	f1 11       	cpse	r31, r1
    1b1e:	f8 cf       	rjmp	.-16     	; 0x1b10 <__floatsisf+0x1c>
    1b20:	fa f4       	brpl	.+62     	; 0x1b60 <__floatsisf+0x6c>
    1b22:	bb 0f       	add	r27, r27
    1b24:	11 f4       	brne	.+4      	; 0x1b2a <__floatsisf+0x36>
    1b26:	60 ff       	sbrs	r22, 0
    1b28:	1b c0       	rjmp	.+54     	; 0x1b60 <__floatsisf+0x6c>
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <__floatsisf+0x6c>
    1b34:	88 23       	and	r24, r24
    1b36:	11 f0       	breq	.+4      	; 0x1b3c <__floatsisf+0x48>
    1b38:	96 e9       	ldi	r25, 0x96	; 150
    1b3a:	11 c0       	rjmp	.+34     	; 0x1b5e <__floatsisf+0x6a>
    1b3c:	77 23       	and	r23, r23
    1b3e:	21 f0       	breq	.+8      	; 0x1b48 <__floatsisf+0x54>
    1b40:	9e e8       	ldi	r25, 0x8E	; 142
    1b42:	87 2f       	mov	r24, r23
    1b44:	76 2f       	mov	r23, r22
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <__floatsisf+0x5e>
    1b48:	66 23       	and	r22, r22
    1b4a:	71 f0       	breq	.+28     	; 0x1b68 <__floatsisf+0x74>
    1b4c:	96 e8       	ldi	r25, 0x86	; 134
    1b4e:	86 2f       	mov	r24, r22
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	2a f0       	brmi	.+10     	; 0x1b60 <__floatsisf+0x6c>
    1b56:	9a 95       	dec	r25
    1b58:	66 0f       	add	r22, r22
    1b5a:	77 1f       	adc	r23, r23
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	da f7       	brpl	.-10     	; 0x1b56 <__floatsisf+0x62>
    1b60:	88 0f       	add	r24, r24
    1b62:	96 95       	lsr	r25
    1b64:	87 95       	ror	r24
    1b66:	97 f9       	bld	r25, 7
    1b68:	08 95       	ret

00001b6a <__fp_inf>:
    1b6a:	97 f9       	bld	r25, 7
    1b6c:	9f 67       	ori	r25, 0x7F	; 127
    1b6e:	80 e8       	ldi	r24, 0x80	; 128
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	08 95       	ret

00001b76 <__fp_nan>:
    1b76:	9f ef       	ldi	r25, 0xFF	; 255
    1b78:	80 ec       	ldi	r24, 0xC0	; 192
    1b7a:	08 95       	ret

00001b7c <__fp_pscA>:
    1b7c:	00 24       	eor	r0, r0
    1b7e:	0a 94       	dec	r0
    1b80:	16 16       	cp	r1, r22
    1b82:	17 06       	cpc	r1, r23
    1b84:	18 06       	cpc	r1, r24
    1b86:	09 06       	cpc	r0, r25
    1b88:	08 95       	ret

00001b8a <__fp_pscB>:
    1b8a:	00 24       	eor	r0, r0
    1b8c:	0a 94       	dec	r0
    1b8e:	12 16       	cp	r1, r18
    1b90:	13 06       	cpc	r1, r19
    1b92:	14 06       	cpc	r1, r20
    1b94:	05 06       	cpc	r0, r21
    1b96:	08 95       	ret

00001b98 <__fp_round>:
    1b98:	09 2e       	mov	r0, r25
    1b9a:	03 94       	inc	r0
    1b9c:	00 0c       	add	r0, r0
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__fp_round+0xc>
    1ba0:	88 23       	and	r24, r24
    1ba2:	52 f0       	brmi	.+20     	; 0x1bb8 <__fp_round+0x20>
    1ba4:	bb 0f       	add	r27, r27
    1ba6:	40 f4       	brcc	.+16     	; 0x1bb8 <__fp_round+0x20>
    1ba8:	bf 2b       	or	r27, r31
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <__fp_round+0x18>
    1bac:	60 ff       	sbrs	r22, 0
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <__fp_round+0x20>
    1bb0:	6f 5f       	subi	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	08 95       	ret

00001bba <__fp_split3>:
    1bba:	57 fd       	sbrc	r21, 7
    1bbc:	90 58       	subi	r25, 0x80	; 128
    1bbe:	44 0f       	add	r20, r20
    1bc0:	55 1f       	adc	r21, r21
    1bc2:	59 f0       	breq	.+22     	; 0x1bda <__fp_splitA+0x10>
    1bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <__fp_splitA+0x1a>
    1bc8:	47 95       	ror	r20

00001bca <__fp_splitA>:
    1bca:	88 0f       	add	r24, r24
    1bcc:	97 fb       	bst	r25, 7
    1bce:	99 1f       	adc	r25, r25
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <__fp_splitA+0x20>
    1bd2:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd4:	79 f0       	breq	.+30     	; 0x1bf4 <__fp_splitA+0x2a>
    1bd6:	87 95       	ror	r24
    1bd8:	08 95       	ret
    1bda:	12 16       	cp	r1, r18
    1bdc:	13 06       	cpc	r1, r19
    1bde:	14 06       	cpc	r1, r20
    1be0:	55 1f       	adc	r21, r21
    1be2:	f2 cf       	rjmp	.-28     	; 0x1bc8 <__fp_split3+0xe>
    1be4:	46 95       	lsr	r20
    1be6:	f1 df       	rcall	.-30     	; 0x1bca <__fp_splitA>
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <__fp_splitA+0x30>
    1bea:	16 16       	cp	r1, r22
    1bec:	17 06       	cpc	r1, r23
    1bee:	18 06       	cpc	r1, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	f1 cf       	rjmp	.-30     	; 0x1bd6 <__fp_splitA+0xc>
    1bf4:	86 95       	lsr	r24
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	61 05       	cpc	r22, r1
    1bfa:	08 94       	sec
    1bfc:	08 95       	ret

00001bfe <__fp_zero>:
    1bfe:	e8 94       	clt

00001c00 <__fp_szero>:
    1c00:	bb 27       	eor	r27, r27
    1c02:	66 27       	eor	r22, r22
    1c04:	77 27       	eor	r23, r23
    1c06:	cb 01       	movw	r24, r22
    1c08:	97 f9       	bld	r25, 7
    1c0a:	08 95       	ret

00001c0c <__mulsf3>:
    1c0c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__mulsf3x>
    1c10:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_round>
    1c14:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscA>
    1c18:	38 f0       	brcs	.+14     	; 0x1c28 <__mulsf3+0x1c>
    1c1a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscB>
    1c1e:	20 f0       	brcs	.+8      	; 0x1c28 <__mulsf3+0x1c>
    1c20:	95 23       	and	r25, r21
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <__mulsf3+0x1c>
    1c24:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>
    1c28:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__fp_nan>
    1c2c:	11 24       	eor	r1, r1
    1c2e:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_szero>

00001c32 <__mulsf3x>:
    1c32:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fp_split3>
    1c36:	70 f3       	brcs	.-36     	; 0x1c14 <__mulsf3+0x8>

00001c38 <__mulsf3_pse>:
    1c38:	95 9f       	mul	r25, r21
    1c3a:	c1 f3       	breq	.-16     	; 0x1c2c <__mulsf3+0x20>
    1c3c:	95 0f       	add	r25, r21
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	55 1f       	adc	r21, r21
    1c42:	62 9f       	mul	r22, r18
    1c44:	f0 01       	movw	r30, r0
    1c46:	72 9f       	mul	r23, r18
    1c48:	bb 27       	eor	r27, r27
    1c4a:	f0 0d       	add	r31, r0
    1c4c:	b1 1d       	adc	r27, r1
    1c4e:	63 9f       	mul	r22, r19
    1c50:	aa 27       	eor	r26, r26
    1c52:	f0 0d       	add	r31, r0
    1c54:	b1 1d       	adc	r27, r1
    1c56:	aa 1f       	adc	r26, r26
    1c58:	64 9f       	mul	r22, r20
    1c5a:	66 27       	eor	r22, r22
    1c5c:	b0 0d       	add	r27, r0
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	66 1f       	adc	r22, r22
    1c62:	82 9f       	mul	r24, r18
    1c64:	22 27       	eor	r18, r18
    1c66:	b0 0d       	add	r27, r0
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	62 1f       	adc	r22, r18
    1c6c:	73 9f       	mul	r23, r19
    1c6e:	b0 0d       	add	r27, r0
    1c70:	a1 1d       	adc	r26, r1
    1c72:	62 1f       	adc	r22, r18
    1c74:	83 9f       	mul	r24, r19
    1c76:	a0 0d       	add	r26, r0
    1c78:	61 1d       	adc	r22, r1
    1c7a:	22 1f       	adc	r18, r18
    1c7c:	74 9f       	mul	r23, r20
    1c7e:	33 27       	eor	r19, r19
    1c80:	a0 0d       	add	r26, r0
    1c82:	61 1d       	adc	r22, r1
    1c84:	23 1f       	adc	r18, r19
    1c86:	84 9f       	mul	r24, r20
    1c88:	60 0d       	add	r22, r0
    1c8a:	21 1d       	adc	r18, r1
    1c8c:	82 2f       	mov	r24, r18
    1c8e:	76 2f       	mov	r23, r22
    1c90:	6a 2f       	mov	r22, r26
    1c92:	11 24       	eor	r1, r1
    1c94:	9f 57       	subi	r25, 0x7F	; 127
    1c96:	50 40       	sbci	r21, 0x00	; 0
    1c98:	9a f0       	brmi	.+38     	; 0x1cc0 <__mulsf3_pse+0x88>
    1c9a:	f1 f0       	breq	.+60     	; 0x1cd8 <__mulsf3_pse+0xa0>
    1c9c:	88 23       	and	r24, r24
    1c9e:	4a f0       	brmi	.+18     	; 0x1cb2 <__mulsf3_pse+0x7a>
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	66 1f       	adc	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	91 50       	subi	r25, 0x01	; 1
    1cae:	50 40       	sbci	r21, 0x00	; 0
    1cb0:	a9 f7       	brne	.-22     	; 0x1c9c <__mulsf3_pse+0x64>
    1cb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	80 f0       	brcs	.+32     	; 0x1cd8 <__mulsf3_pse+0xa0>
    1cb8:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_inf>
    1cbc:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__fp_szero>
    1cc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc2:	e4 f3       	brlt	.-8      	; 0x1cbc <__mulsf3_pse+0x84>
    1cc4:	98 3e       	cpi	r25, 0xE8	; 232
    1cc6:	d4 f3       	brlt	.-12     	; 0x1cbc <__mulsf3_pse+0x84>
    1cc8:	86 95       	lsr	r24
    1cca:	77 95       	ror	r23
    1ccc:	67 95       	ror	r22
    1cce:	b7 95       	ror	r27
    1cd0:	f7 95       	ror	r31
    1cd2:	e7 95       	ror	r30
    1cd4:	9f 5f       	subi	r25, 0xFF	; 255
    1cd6:	c1 f7       	brne	.-16     	; 0x1cc8 <__mulsf3_pse+0x90>
    1cd8:	fe 2b       	or	r31, r30
    1cda:	88 0f       	add	r24, r24
    1cdc:	91 1d       	adc	r25, r1
    1cde:	96 95       	lsr	r25
    1ce0:	87 95       	ror	r24
    1ce2:	97 f9       	bld	r25, 7
    1ce4:	08 95       	ret

00001ce6 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	91 8d       	ldd	r25, Z+25	; 0x19
    1cea:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cec:	89 2f       	mov	r24, r25
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	80 5c       	subi	r24, 0xC0	; 192
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	82 1b       	sub	r24, r18
    1cf6:	91 09       	sbc	r25, r1
    1cf8:	8f 73       	andi	r24, 0x3F	; 63
    1cfa:	99 27       	eor	r25, r25
    1cfc:	08 95       	ret

00001cfe <_ZN14HardwareSerial4peekEv>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	91 8d       	ldd	r25, Z+25	; 0x19
    1d02:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d04:	98 17       	cp	r25, r24
    1d06:	31 f0       	breq	.+12     	; 0x1d14 <_ZN14HardwareSerial4peekEv+0x16>
    1d08:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d0a:	e8 0f       	add	r30, r24
    1d0c:	f1 1d       	adc	r31, r1
    1d0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	08 95       	ret
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	08 95       	ret

00001d1a <_ZN14HardwareSerial4readEv>:
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	91 8d       	ldd	r25, Z+25	; 0x19
    1d1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d20:	98 17       	cp	r25, r24
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <_ZN14HardwareSerial4readEv+0x22>
    1d24:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d26:	df 01       	movw	r26, r30
    1d28:	a8 0f       	add	r26, r24
    1d2a:	b1 1d       	adc	r27, r1
    1d2c:	5d 96       	adiw	r26, 0x1d	; 29
    1d2e:	8c 91       	ld	r24, X
    1d30:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d32:	9f 5f       	subi	r25, 0xFF	; 255
    1d34:	9f 73       	andi	r25, 0x3F	; 63
    1d36:	92 8f       	std	Z+26, r25	; 0x1a
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	08 95       	ret
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	08 95       	ret

00001d42 <_ZN14HardwareSerial17availableForWriteEv>:
    1d42:	fc 01       	movw	r30, r24
    1d44:	53 8d       	ldd	r21, Z+27	; 0x1b
    1d46:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d48:	25 2f       	mov	r18, r21
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	84 2f       	mov	r24, r20
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	82 1b       	sub	r24, r18
    1d52:	93 0b       	sbc	r25, r19
    1d54:	54 17       	cp	r21, r20
    1d56:	10 f0       	brcs	.+4      	; 0x1d5c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1d58:	cf 96       	adiw	r24, 0x3f	; 63
    1d5a:	08 95       	ret
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	08 95       	ret

00001d60 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1d60:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1d62:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d64:	df 01       	movw	r26, r30
    1d66:	a8 0f       	add	r26, r24
    1d68:	b1 1d       	adc	r27, r1
    1d6a:	a3 5a       	subi	r26, 0xA3	; 163
    1d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1d70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	8f 73       	andi	r24, 0x3F	; 63
    1d78:	99 27       	eor	r25, r25
    1d7a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1d7c:	a6 89       	ldd	r26, Z+22	; 0x16
    1d7e:	b7 89       	ldd	r27, Z+23	; 0x17
    1d80:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1d82:	a0 89       	ldd	r26, Z+16	; 0x10
    1d84:	b1 89       	ldd	r27, Z+17	; 0x11
    1d86:	8c 91       	ld	r24, X
    1d88:	80 64       	ori	r24, 0x40	; 64
    1d8a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1d8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d8e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d90:	98 13       	cpse	r25, r24
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1d94:	02 88       	ldd	r0, Z+18	; 0x12
    1d96:	f3 89       	ldd	r31, Z+19	; 0x13
    1d98:	e0 2d       	mov	r30, r0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8f 7d       	andi	r24, 0xDF	; 223
    1d9e:	80 83       	st	Z, r24
    1da0:	08 95       	ret

00001da2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	ec 01       	movw	r28, r24
  _written = true;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1db4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1db6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1db8:	98 13       	cpse	r25, r24
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <_ZN14HardwareSerial5writeEh+0x24>
    1dbc:	e8 89       	ldd	r30, Y+16	; 0x10
    1dbe:	f9 89       	ldd	r31, Y+17	; 0x11
    1dc0:	80 81       	ld	r24, Z
    1dc2:	85 fd       	sbrc	r24, 5
    1dc4:	24 c0       	rjmp	.+72     	; 0x1e0e <_ZN14HardwareSerial5writeEh+0x6c>
    1dc6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1dc8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    1dcc:	0f 5f       	subi	r16, 0xFF	; 255
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	0f 73       	andi	r16, 0x3F	; 63
    1dd2:	11 27       	eor	r17, r17
    1dd4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1dd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dd8:	e8 12       	cpse	r14, r24
    1dda:	0c c0       	rjmp	.+24     	; 0x1df4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	07 fc       	sbrc	r0, 7
    1de0:	fa cf       	rjmp	.-12     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1de2:	e8 89       	ldd	r30, Y+16	; 0x10
    1de4:	f9 89       	ldd	r31, Y+17	; 0x11
    1de6:	80 81       	ld	r24, Z
    1de8:	85 ff       	sbrs	r24, 5
    1dea:	f5 cf       	rjmp	.-22     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1dec:	ce 01       	movw	r24, r28
    1dee:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1df2:	f1 cf       	rjmp	.-30     	; 0x1dd6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df6:	fe 01       	movw	r30, r28
    1df8:	e8 0f       	add	r30, r24
    1dfa:	f1 1d       	adc	r31, r1
    1dfc:	e3 5a       	subi	r30, 0xA3	; 163
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1e02:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1e04:	ea 89       	ldd	r30, Y+18	; 0x12
    1e06:	fb 89       	ldd	r31, Y+19	; 0x13
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 62       	ori	r24, 0x20	; 32
    1e0c:	07 c0       	rjmp	.+14     	; 0x1e1c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1e0e:	ee 89       	ldd	r30, Y+22	; 0x16
    1e10:	ff 89       	ldd	r31, Y+23	; 0x17
    1e12:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1e14:	e8 89       	ldd	r30, Y+16	; 0x10
    1e16:	f9 89       	ldd	r31, Y+17	; 0x11
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 64       	ori	r24, 0x40	; 64
    1e1c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	08 95       	ret

00001e30 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1e36:	88 8d       	ldd	r24, Y+24	; 0x18
    1e38:	88 23       	and	r24, r24
    1e3a:	c9 f0       	breq	.+50     	; 0x1e6e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1e3c:	ea 89       	ldd	r30, Y+18	; 0x12
    1e3e:	fb 89       	ldd	r31, Y+19	; 0x13
    1e40:	80 81       	ld	r24, Z
    1e42:	85 fd       	sbrc	r24, 5
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <_ZN14HardwareSerial5flushEv+0x20>
    1e46:	a8 89       	ldd	r26, Y+16	; 0x10
    1e48:	b9 89       	ldd	r27, Y+17	; 0x11
    1e4a:	8c 91       	ld	r24, X
    1e4c:	86 fd       	sbrc	r24, 6
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	07 fc       	sbrc	r0, 7
    1e54:	f5 cf       	rjmp	.-22     	; 0x1e40 <_ZN14HardwareSerial5flushEv+0x10>
    1e56:	80 81       	ld	r24, Z
    1e58:	85 ff       	sbrs	r24, 5
    1e5a:	f2 cf       	rjmp	.-28     	; 0x1e40 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1e5c:	a8 89       	ldd	r26, Y+16	; 0x10
    1e5e:	b9 89       	ldd	r27, Y+17	; 0x11
    1e60:	8c 91       	ld	r24, X
    1e62:	85 ff       	sbrs	r24, 5
    1e64:	ed cf       	rjmp	.-38     	; 0x1e40 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1e66:	ce 01       	movw	r24, r28
    1e68:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e6c:	e7 cf       	rjmp	.-50     	; 0x1e3c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	08 95       	ret

00001e74 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	ec 01       	movw	r28, r24
    1e84:	6a 01       	movw	r12, r20
    1e86:	7b 01       	movw	r14, r22
    1e88:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1e8a:	e8 89       	ldd	r30, Y+16	; 0x10
    1e8c:	f9 89       	ldd	r31, Y+17	; 0x11
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1e92:	41 15       	cp	r20, r1
    1e94:	51 4e       	sbci	r21, 0xE1	; 225
    1e96:	61 05       	cpc	r22, r1
    1e98:	71 05       	cpc	r23, r1
    1e9a:	b1 f0       	breq	.+44     	; 0x1ec8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	79 e0       	ldi	r23, 0x09	; 9
    1ea0:	8d e3       	ldi	r24, 0x3D	; 61
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a7 01       	movw	r20, r14
    1ea6:	96 01       	movw	r18, r12
    1ea8:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    1eac:	da 01       	movw	r26, r20
    1eae:	c9 01       	movw	r24, r18
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	a1 09       	sbc	r26, r1
    1eb4:	b1 09       	sbc	r27, r1
    1eb6:	b6 95       	lsr	r27
    1eb8:	a7 95       	ror	r26
    1eba:	97 95       	ror	r25
    1ebc:	87 95       	ror	r24
    1ebe:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ec0:	21 15       	cp	r18, r1
    1ec2:	80 e1       	ldi	r24, 0x10	; 16
    1ec4:	38 07       	cpc	r19, r24
    1ec6:	a8 f0       	brcs	.+42     	; 0x1ef2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1ec8:	e8 89       	ldd	r30, Y+16	; 0x10
    1eca:	f9 89       	ldd	r31, Y+17	; 0x11
    1ecc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ece:	60 e8       	ldi	r22, 0x80	; 128
    1ed0:	74 e8       	ldi	r23, 0x84	; 132
    1ed2:	8e e1       	ldi	r24, 0x1E	; 30
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a7 01       	movw	r20, r14
    1ed8:	96 01       	movw	r18, r12
    1eda:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    1ede:	da 01       	movw	r26, r20
    1ee0:	c9 01       	movw	r24, r18
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	a1 09       	sbc	r26, r1
    1ee6:	b1 09       	sbc	r27, r1
    1ee8:	b6 95       	lsr	r27
    1eea:	a7 95       	ror	r26
    1eec:	97 95       	ror	r25
    1eee:	87 95       	ror	r24
    1ef0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ef2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ef4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ef6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1ef8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1efa:	ff 85       	ldd	r31, Y+15	; 0x0f
    1efc:	20 83       	st	Z, r18

  _written = false;
    1efe:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1f00:	ec 89       	ldd	r30, Y+20	; 0x14
    1f02:	fd 89       	ldd	r31, Y+21	; 0x15
    1f04:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1f06:	ea 89       	ldd	r30, Y+18	; 0x12
    1f08:	fb 89       	ldd	r31, Y+19	; 0x13
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 61       	ori	r24, 0x10	; 16
    1f0e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1f10:	ea 89       	ldd	r30, Y+18	; 0x12
    1f12:	fb 89       	ldd	r31, Y+19	; 0x13
    1f14:	80 81       	ld	r24, Z
    1f16:	88 60       	ori	r24, 0x08	; 8
    1f18:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1f1a:	ea 89       	ldd	r30, Y+18	; 0x12
    1f1c:	fb 89       	ldd	r31, Y+19	; 0x13
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 68       	ori	r24, 0x80	; 128
    1f22:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1f24:	ea 89       	ldd	r30, Y+18	; 0x12
    1f26:	fb 89       	ldd	r31, Y+19	; 0x13
    1f28:	80 81       	ld	r24, Z
    1f2a:	8f 7d       	andi	r24, 0xDF	; 223
    1f2c:	80 83       	st	Z, r24
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	df 90       	pop	r13
    1f3a:	cf 90       	pop	r12
    1f3c:	08 95       	ret

00001f3e <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	08 95       	ret

00001f44 <_ZN5Print5flushEv>:
    1f44:	08 95       	ret

00001f46 <__vector_18>:
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	ef 93       	push	r30
    1f58:	ff 93       	push	r31
    1f5a:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <Serial+0x10>
    1f5e:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <Serial+0x11>
    1f62:	80 81       	ld	r24, Z
    1f64:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <Serial+0x16>
    1f68:	f0 91 93 04 	lds	r31, 0x0493	; 0x800493 <Serial+0x17>
    1f6c:	82 fd       	sbrc	r24, 2
    1f6e:	12 c0       	rjmp	.+36     	; 0x1f94 <__vector_18+0x4e>
    1f70:	90 81       	ld	r25, Z
    1f72:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <Serial+0x19>
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	8f 73       	andi	r24, 0x3F	; 63
    1f7a:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <Serial+0x1a>
    1f7e:	82 17       	cp	r24, r18
    1f80:	51 f0       	breq	.+20     	; 0x1f96 <__vector_18+0x50>
    1f82:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <Serial+0x19>
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	e4 58       	subi	r30, 0x84	; 132
    1f8a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f8c:	95 8f       	std	Z+29, r25	; 0x1d
    1f8e:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <Serial+0x19>
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <__vector_18+0x50>
    1f94:	80 81       	ld	r24, Z
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	2f 91       	pop	r18
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	0f 90       	pop	r0
    1fa6:	1f 90       	pop	r1
    1fa8:	18 95       	reti

00001faa <__vector_19>:
    1faa:	1f 92       	push	r1
    1fac:	0f 92       	push	r0
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	0f 92       	push	r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	2f 93       	push	r18
    1fb6:	3f 93       	push	r19
    1fb8:	4f 93       	push	r20
    1fba:	5f 93       	push	r21
    1fbc:	6f 93       	push	r22
    1fbe:	7f 93       	push	r23
    1fc0:	8f 93       	push	r24
    1fc2:	9f 93       	push	r25
    1fc4:	af 93       	push	r26
    1fc6:	bf 93       	push	r27
    1fc8:	ef 93       	push	r30
    1fca:	ff 93       	push	r31
    1fcc:	8c e7       	ldi	r24, 0x7C	; 124
    1fce:	94 e0       	ldi	r25, 0x04	; 4
    1fd0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1fd4:	ff 91       	pop	r31
    1fd6:	ef 91       	pop	r30
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ff6:	ec e7       	ldi	r30, 0x7C	; 124
    1ff8:	f4 e0       	ldi	r31, 0x04	; 4
    1ffa:	13 82       	std	Z+3, r1	; 0x03
    1ffc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1ffe:	88 ee       	ldi	r24, 0xE8	; 232
    2000:	93 e0       	ldi	r25, 0x03	; 3
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	84 83       	std	Z+4, r24	; 0x04
    2008:	95 83       	std	Z+5, r25	; 0x05
    200a:	a6 83       	std	Z+6, r26	; 0x06
    200c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    200e:	89 e5       	ldi	r24, 0x59	; 89
    2010:	93 e0       	ldi	r25, 0x03	; 3
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	85 ec       	ldi	r24, 0xC5	; 197
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	95 87       	std	Z+13, r25	; 0x0d
    201c:	84 87       	std	Z+12, r24	; 0x0c
    201e:	84 ec       	ldi	r24, 0xC4	; 196
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	97 87       	std	Z+15, r25	; 0x0f
    2024:	86 87       	std	Z+14, r24	; 0x0e
    2026:	80 ec       	ldi	r24, 0xC0	; 192
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	91 8b       	std	Z+17, r25	; 0x11
    202c:	80 8b       	std	Z+16, r24	; 0x10
    202e:	81 ec       	ldi	r24, 0xC1	; 193
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	93 8b       	std	Z+19, r25	; 0x13
    2034:	82 8b       	std	Z+18, r24	; 0x12
    2036:	82 ec       	ldi	r24, 0xC2	; 194
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	95 8b       	std	Z+21, r25	; 0x15
    203c:	84 8b       	std	Z+20, r24	; 0x14
    203e:	86 ec       	ldi	r24, 0xC6	; 198
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	97 8b       	std	Z+23, r25	; 0x17
    2044:	86 8b       	std	Z+22, r24	; 0x16
    2046:	11 8e       	std	Z+25, r1	; 0x19
    2048:	12 8e       	std	Z+26, r1	; 0x1a
    204a:	13 8e       	std	Z+27, r1	; 0x1b
    204c:	14 8e       	std	Z+28, r1	; 0x1c
    204e:	08 95       	ret

00002050 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	6c 01       	movw	r12, r24
    2062:	7a 01       	movw	r14, r20
    2064:	8b 01       	movw	r16, r22
    2066:	c0 e0       	ldi	r28, 0x00	; 0
    2068:	d0 e0       	ldi	r29, 0x00	; 0
    206a:	ce 15       	cp	r28, r14
    206c:	df 05       	cpc	r29, r15
    206e:	81 f0       	breq	.+32     	; 0x2090 <_ZN5Print5writeEPKhj+0x40>
    2070:	d8 01       	movw	r26, r16
    2072:	6d 91       	ld	r22, X+
    2074:	8d 01       	movw	r16, r26
    2076:	d6 01       	movw	r26, r12
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	01 90       	ld	r0, Z+
    207e:	f0 81       	ld	r31, Z
    2080:	e0 2d       	mov	r30, r0
    2082:	c6 01       	movw	r24, r12
    2084:	09 95       	icall
    2086:	89 2b       	or	r24, r25
    2088:	11 f0       	breq	.+4      	; 0x208e <_ZN5Print5writeEPKhj+0x3e>
    208a:	21 96       	adiw	r28, 0x01	; 1
    208c:	ee cf       	rjmp	.-36     	; 0x206a <_ZN5Print5writeEPKhj+0x1a>
    208e:	7e 01       	movw	r14, r28
    2090:	c7 01       	movw	r24, r14
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	08 95       	ret

000020a4 <_ZN5Print5writeEPKc>:
    20a4:	61 15       	cp	r22, r1
    20a6:	71 05       	cpc	r23, r1
    20a8:	79 f0       	breq	.+30     	; 0x20c8 <_ZN5Print5writeEPKc+0x24>
    20aa:	fb 01       	movw	r30, r22
    20ac:	01 90       	ld	r0, Z+
    20ae:	00 20       	and	r0, r0
    20b0:	e9 f7       	brne	.-6      	; 0x20ac <_ZN5Print5writeEPKc+0x8>
    20b2:	31 97       	sbiw	r30, 0x01	; 1
    20b4:	af 01       	movw	r20, r30
    20b6:	46 1b       	sub	r20, r22
    20b8:	57 0b       	sbc	r21, r23
    20ba:	dc 01       	movw	r26, r24
    20bc:	ed 91       	ld	r30, X+
    20be:	fc 91       	ld	r31, X
    20c0:	02 80       	ldd	r0, Z+2	; 0x02
    20c2:	f3 81       	ldd	r31, Z+3	; 0x03
    20c4:	e0 2d       	mov	r30, r0
    20c6:	09 94       	ijmp
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	08 95       	ret

000020ce <_ZN5Print5printEPKc>:
    20ce:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <_ZN5Print5writeEPKc>

000020d2 <_ZN5Print5printEc>:
    20d2:	dc 01       	movw	r26, r24
    20d4:	ed 91       	ld	r30, X+
    20d6:	fc 91       	ld	r31, X
    20d8:	01 90       	ld	r0, Z+
    20da:	f0 81       	ld	r31, Z
    20dc:	e0 2d       	mov	r30, r0
    20de:	09 94       	ijmp

000020e0 <_ZN5Print11printNumberEmh>:
    20e0:	8f 92       	push	r8
    20e2:	9f 92       	push	r9
    20e4:	af 92       	push	r10
    20e6:	bf 92       	push	r11
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	a1 97       	sbiw	r28, 0x21	; 33
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	7c 01       	movw	r14, r24
    2106:	fa 01       	movw	r30, r20
    2108:	cb 01       	movw	r24, r22
    210a:	19 a2       	std	Y+33, r1	; 0x21
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	08 f4       	brcc	.+2      	; 0x2112 <_ZN5Print11printNumberEmh+0x32>
    2110:	2a e0       	ldi	r18, 0x0A	; 10
    2112:	8e 01       	movw	r16, r28
    2114:	0f 5d       	subi	r16, 0xDF	; 223
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	82 2e       	mov	r8, r18
    211a:	91 2c       	mov	r9, r1
    211c:	a1 2c       	mov	r10, r1
    211e:	b1 2c       	mov	r11, r1
    2120:	bf 01       	movw	r22, r30
    2122:	a5 01       	movw	r20, r10
    2124:	94 01       	movw	r18, r8
    2126:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    212a:	f9 01       	movw	r30, r18
    212c:	ca 01       	movw	r24, r20
    212e:	01 50       	subi	r16, 0x01	; 1
    2130:	11 09       	sbc	r17, r1
    2132:	6a 30       	cpi	r22, 0x0A	; 10
    2134:	10 f4       	brcc	.+4      	; 0x213a <_ZN5Print11printNumberEmh+0x5a>
    2136:	60 5d       	subi	r22, 0xD0	; 208
    2138:	01 c0       	rjmp	.+2      	; 0x213c <_ZN5Print11printNumberEmh+0x5c>
    213a:	69 5c       	subi	r22, 0xC9	; 201
    213c:	d8 01       	movw	r26, r16
    213e:	6c 93       	st	X, r22
    2140:	23 2b       	or	r18, r19
    2142:	24 2b       	or	r18, r20
    2144:	25 2b       	or	r18, r21
    2146:	61 f7       	brne	.-40     	; 0x2120 <_ZN5Print11printNumberEmh+0x40>
    2148:	b8 01       	movw	r22, r16
    214a:	c7 01       	movw	r24, r14
    214c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN5Print5writeEPKc>
    2150:	a1 96       	adiw	r28, 0x21	; 33
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	bf 90       	pop	r11
    216a:	af 90       	pop	r10
    216c:	9f 90       	pop	r9
    216e:	8f 90       	pop	r8
    2170:	08 95       	ret

00002172 <_ZN5Print5printEmi>:
    2172:	21 15       	cp	r18, r1
    2174:	31 05       	cpc	r19, r1
    2176:	41 f4       	brne	.+16     	; 0x2188 <_ZN5Print5printEmi+0x16>
    2178:	dc 01       	movw	r26, r24
    217a:	ed 91       	ld	r30, X+
    217c:	fc 91       	ld	r31, X
    217e:	01 90       	ld	r0, Z+
    2180:	f0 81       	ld	r31, Z
    2182:	e0 2d       	mov	r30, r0
    2184:	64 2f       	mov	r22, r20
    2186:	09 94       	ijmp
    2188:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <_ZN5Print11printNumberEmh>

0000218c <_ZN5Print5printEji>:
    218c:	9a 01       	movw	r18, r20
    218e:	ab 01       	movw	r20, r22
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <_ZN5Print5printEmi>

00002198 <_ZN5Print5printEli>:
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	21 15       	cp	r18, r1
    21aa:	31 05       	cpc	r19, r1
    21ac:	81 f4       	brne	.+32     	; 0x21ce <_ZN5Print5printEli+0x36>
    21ae:	dc 01       	movw	r26, r24
    21b0:	ed 91       	ld	r30, X+
    21b2:	fc 91       	ld	r31, X
    21b4:	01 90       	ld	r0, Z+
    21b6:	f0 81       	ld	r31, Z
    21b8:	e0 2d       	mov	r30, r0
    21ba:	64 2f       	mov	r22, r20
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	09 94       	ijmp
    21ce:	2a 30       	cpi	r18, 0x0A	; 10
    21d0:	31 05       	cpc	r19, r1
    21d2:	01 f5       	brne	.+64     	; 0x2214 <_ZN5Print5printEli+0x7c>
    21d4:	77 ff       	sbrs	r23, 7
    21d6:	1d c0       	rjmp	.+58     	; 0x2212 <_ZN5Print5printEli+0x7a>
    21d8:	6a 01       	movw	r12, r20
    21da:	7b 01       	movw	r14, r22
    21dc:	ec 01       	movw	r28, r24
    21de:	6d e2       	ldi	r22, 0x2D	; 45
    21e0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN5Print5printEc>
    21e4:	8c 01       	movw	r16, r24
    21e6:	44 27       	eor	r20, r20
    21e8:	55 27       	eor	r21, r21
    21ea:	ba 01       	movw	r22, r20
    21ec:	4c 19       	sub	r20, r12
    21ee:	5d 09       	sbc	r21, r13
    21f0:	6e 09       	sbc	r22, r14
    21f2:	7f 09       	sbc	r23, r15
    21f4:	2a e0       	ldi	r18, 0x0A	; 10
    21f6:	ce 01       	movw	r24, r28
    21f8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN5Print11printNumberEmh>
    21fc:	80 0f       	add	r24, r16
    21fe:	91 1f       	adc	r25, r17
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	df 90       	pop	r13
    220e:	cf 90       	pop	r12
    2210:	08 95       	ret
    2212:	2a e0       	ldi	r18, 0x0A	; 10
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <_ZN5Print11printNumberEmh>

00002228 <_ZN5Print5printEii>:
    2228:	9a 01       	movw	r18, r20
    222a:	ab 01       	movw	r20, r22
    222c:	77 0f       	add	r23, r23
    222e:	66 0b       	sbc	r22, r22
    2230:	77 0b       	sbc	r23, r23
    2232:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <_ZN5Print5printEli>

00002236 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2236:	7f 92       	push	r7
    2238:	8f 92       	push	r8
    223a:	9f 92       	push	r9
    223c:	af 92       	push	r10
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	8c 01       	movw	r16, r24
    2252:	6a 01       	movw	r12, r20
    2254:	7b 01       	movw	r14, r22
    2256:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2258:	9a 01       	movw	r18, r20
    225a:	ab 01       	movw	r20, r22
    225c:	c7 01       	movw	r24, r14
    225e:	b6 01       	movw	r22, r12
    2260:	0e 94 32 22 	call	0x4464	; 0x4464 <__unordsf2>
    2264:	88 23       	and	r24, r24
    2266:	19 f0       	breq	.+6      	; 0x226e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2268:	6a e6       	ldi	r22, 0x6A	; 106
    226a:	73 e0       	ldi	r23, 0x03	; 3
    226c:	27 c0       	rjmp	.+78     	; 0x22bc <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    226e:	46 01       	movw	r8, r12
    2270:	57 01       	movw	r10, r14
    2272:	e8 94       	clt
    2274:	b7 f8       	bld	r11, 7
    2276:	2f ef       	ldi	r18, 0xFF	; 255
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	5f e7       	ldi	r21, 0x7F	; 127
    227e:	c5 01       	movw	r24, r10
    2280:	b4 01       	movw	r22, r8
    2282:	0e 94 32 22 	call	0x4464	; 0x4464 <__unordsf2>
    2286:	81 11       	cpse	r24, r1
    2288:	0d c0       	rjmp	.+26     	; 0x22a4 <_ZN5Print10printFloatEdh+0x6e>
    228a:	2f ef       	ldi	r18, 0xFF	; 255
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	5f e7       	ldi	r21, 0x7F	; 127
    2292:	c5 01       	movw	r24, r10
    2294:	b4 01       	movw	r22, r8
    2296:	0e 94 04 22 	call	0x4408	; 0x4408 <__cmpsf2>
    229a:	18 16       	cp	r1, r24
    229c:	1c f4       	brge	.+6      	; 0x22a4 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    229e:	6e e6       	ldi	r22, 0x6E	; 110
    22a0:	73 e0       	ldi	r23, 0x03	; 3
    22a2:	0c c0       	rjmp	.+24     	; 0x22bc <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	5f e4       	ldi	r21, 0x4F	; 79
    22ac:	c7 01       	movw	r24, r14
    22ae:	b6 01       	movw	r22, r12
    22b0:	0e 94 2d 22 	call	0x445a	; 0x445a <__gesf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	94 f4       	brge	.+36     	; 0x22dc <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    22b8:	62 e7       	ldi	r22, 0x72	; 114
    22ba:	73 e0       	ldi	r23, 0x03	; 3
    22bc:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	df 90       	pop	r13
    22cc:	cf 90       	pop	r12
    22ce:	bf 90       	pop	r11
    22d0:	af 90       	pop	r10
    22d2:	9f 90       	pop	r9
    22d4:	8f 90       	pop	r8
    22d6:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    22d8:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    22dc:	2f ef       	ldi	r18, 0xFF	; 255
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	5f ec       	ldi	r21, 0xCF	; 207
    22e4:	c7 01       	movw	r24, r14
    22e6:	b6 01       	movw	r22, r12
    22e8:	0e 94 04 22 	call	0x4408	; 0x4408 <__cmpsf2>
    22ec:	87 fd       	sbrc	r24, 7
    22ee:	e4 cf       	rjmp	.-56     	; 0x22b8 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	a9 01       	movw	r20, r18
    22f6:	c7 01       	movw	r24, r14
    22f8:	b6 01       	movw	r22, r12
    22fa:	0e 94 04 22 	call	0x4408	; 0x4408 <__cmpsf2>
    22fe:	87 ff       	sbrs	r24, 7
    2300:	0a c0       	rjmp	.+20     	; 0x2316 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2302:	6d e2       	ldi	r22, 0x2D	; 45
    2304:	c8 01       	movw	r24, r16
    2306:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN5Print5printEc>
    230a:	ec 01       	movw	r28, r24
     number = -number;
    230c:	f7 fa       	bst	r15, 7
    230e:	f0 94       	com	r15
    2310:	f7 f8       	bld	r15, 7
    2312:	f0 94       	com	r15
    2314:	02 c0       	rjmp	.+4      	; 0x231a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2316:	c0 e0       	ldi	r28, 0x00	; 0
    2318:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    231a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2324:	7b 14       	cp	r7, r11
    2326:	41 f0       	breq	.+16     	; 0x2338 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2334:	b3 94       	inc	r11
    2336:	f6 cf       	rjmp	.-20     	; 0x2324 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2338:	a7 01       	movw	r20, r14
    233a:	96 01       	movw	r18, r12
    233c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__addsf3>
    2340:	6b 01       	movw	r12, r22
    2342:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2344:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fixunssfsi>
    2348:	4b 01       	movw	r8, r22
    234a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    234c:	2a e0       	ldi	r18, 0x0A	; 10
    234e:	ab 01       	movw	r20, r22
    2350:	bc 01       	movw	r22, r24
    2352:	c8 01       	movw	r24, r16
    2354:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2358:	c8 0f       	add	r28, r24
    235a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    235c:	77 20       	and	r7, r7
    235e:	b9 f1       	breq	.+110    	; 0x23ce <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2360:	c5 01       	movw	r24, r10
    2362:	b4 01       	movw	r22, r8
    2364:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__floatunsisf>
    2368:	9b 01       	movw	r18, r22
    236a:	ac 01       	movw	r20, r24
    236c:	c7 01       	movw	r24, r14
    236e:	b6 01       	movw	r22, r12
    2370:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__subsf3>
    2374:	6b 01       	movw	r12, r22
    2376:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2378:	6e e2       	ldi	r22, 0x2E	; 46
    237a:	c8 01       	movw	r24, r16
    237c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN5Print5printEc>
    2380:	c8 0f       	add	r28, r24
    2382:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	c7 01       	movw	r24, r14
    238e:	b6 01       	movw	r22, r12
    2390:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__mulsf3>
    2394:	4b 01       	movw	r8, r22
    2396:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2398:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fixunssfsi>
    239c:	6b 01       	movw	r12, r22
    239e:	7c 01       	movw	r14, r24
    n += print(toPrint);
    23a0:	4a e0       	ldi	r20, 0x0A	; 10
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	c8 01       	movw	r24, r16
    23a6:	0e 94 c6 10 	call	0x218c	; 0x218c <_ZN5Print5printEji>
    23aa:	c8 0f       	add	r28, r24
    23ac:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    23ae:	b6 01       	movw	r22, r12
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__floatunsisf>
    23b8:	9b 01       	movw	r18, r22
    23ba:	ac 01       	movw	r20, r24
    23bc:	c5 01       	movw	r24, r10
    23be:	b4 01       	movw	r22, r8
    23c0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__subsf3>
    23c4:	6b 01       	movw	r12, r22
    23c6:	7c 01       	movw	r14, r24
    23c8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    23ca:	71 10       	cpse	r7, r1
    23cc:	db cf       	rjmp	.-74     	; 0x2384 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    23ce:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	bf 90       	pop	r11
    23e2:	af 90       	pop	r10
    23e4:	9f 90       	pop	r9
    23e6:	8f 90       	pop	r8
    23e8:	7f 90       	pop	r7
    23ea:	08 95       	ret

000023ec <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    23ec:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <_ZN5Print10printFloatEdh>

000023f0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    23f0:	1f 92       	push	r1
    23f2:	0f 92       	push	r0
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	0f 92       	push	r0
    23f8:	11 24       	eor	r1, r1
    23fa:	2f 93       	push	r18
    23fc:	3f 93       	push	r19
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2406:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <timer0_millis>
    240a:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <timer0_millis+0x1>
    240e:	a0 91 1c 05 	lds	r26, 0x051C	; 0x80051c <timer0_millis+0x2>
    2412:	b0 91 1d 05 	lds	r27, 0x051D	; 0x80051d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2416:	30 91 19 05 	lds	r19, 0x0519	; 0x800519 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    241a:	23 e0       	ldi	r18, 0x03	; 3
    241c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    241e:	2d 37       	cpi	r18, 0x7D	; 125
    2420:	20 f4       	brcc	.+8      	; 0x242a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2422:	01 96       	adiw	r24, 0x01	; 1
    2424:	a1 1d       	adc	r26, r1
    2426:	b1 1d       	adc	r27, r1
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    242a:	26 e8       	ldi	r18, 0x86	; 134
    242c:	23 0f       	add	r18, r19
		m += 1;
    242e:	02 96       	adiw	r24, 0x02	; 2
    2430:	a1 1d       	adc	r26, r1
    2432:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2434:	20 93 19 05 	sts	0x0519, r18	; 0x800519 <timer0_fract>
	timer0_millis = m;
    2438:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <timer0_millis>
    243c:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <timer0_millis+0x1>
    2440:	a0 93 1c 05 	sts	0x051C, r26	; 0x80051c <timer0_millis+0x2>
    2444:	b0 93 1d 05 	sts	0x051D, r27	; 0x80051d <timer0_millis+0x3>
	timer0_overflow_count++;
    2448:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <timer0_overflow_count>
    244c:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <timer0_overflow_count+0x1>
    2450:	a0 91 20 05 	lds	r26, 0x0520	; 0x800520 <timer0_overflow_count+0x2>
    2454:	b0 91 21 05 	lds	r27, 0x0521	; 0x800521 <timer0_overflow_count+0x3>
    2458:	01 96       	adiw	r24, 0x01	; 1
    245a:	a1 1d       	adc	r26, r1
    245c:	b1 1d       	adc	r27, r1
    245e:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <timer0_overflow_count>
    2462:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <timer0_overflow_count+0x1>
    2466:	a0 93 20 05 	sts	0x0520, r26	; 0x800520 <timer0_overflow_count+0x2>
    246a:	b0 93 21 05 	sts	0x0521, r27	; 0x800521 <timer0_overflow_count+0x3>
}
    246e:	bf 91       	pop	r27
    2470:	af 91       	pop	r26
    2472:	9f 91       	pop	r25
    2474:	8f 91       	pop	r24
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2484:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2486:	f8 94       	cli
	m = timer0_millis;
    2488:	60 91 1a 05 	lds	r22, 0x051A	; 0x80051a <timer0_millis>
    248c:	70 91 1b 05 	lds	r23, 0x051B	; 0x80051b <timer0_millis+0x1>
    2490:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <timer0_millis+0x2>
    2494:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <timer0_millis+0x3>
	SREG = oldSREG;
    2498:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    249a:	08 95       	ret

0000249c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    249c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    249e:	f8 94       	cli
	m = timer0_overflow_count;
    24a0:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <timer0_overflow_count>
    24a4:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <timer0_overflow_count+0x1>
    24a8:	a0 91 20 05 	lds	r26, 0x0520	; 0x800520 <timer0_overflow_count+0x2>
    24ac:	b0 91 21 05 	lds	r27, 0x0521	; 0x800521 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    24b0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    24b2:	a8 9b       	sbis	0x15, 0	; 21
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <micros+0x24>
    24b6:	2f 3f       	cpi	r18, 0xFF	; 255
    24b8:	19 f0       	breq	.+6      	; 0x24c0 <micros+0x24>
		m++;
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	a1 1d       	adc	r26, r1
    24be:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    24c0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    24c2:	ba 2f       	mov	r27, r26
    24c4:	a9 2f       	mov	r26, r25
    24c6:	98 2f       	mov	r25, r24
    24c8:	88 27       	eor	r24, r24
    24ca:	82 0f       	add	r24, r18
    24cc:	91 1d       	adc	r25, r1
    24ce:	a1 1d       	adc	r26, r1
    24d0:	b1 1d       	adc	r27, r1
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	42 e0       	ldi	r20, 0x02	; 2
    24d8:	66 0f       	add	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	4a 95       	dec	r20
    24e2:	d1 f7       	brne	.-12     	; 0x24d8 <micros+0x3c>
}
    24e4:	08 95       	ret

000024e6 <delay>:

void delay(unsigned long ms)
{
    24e6:	8f 92       	push	r8
    24e8:	9f 92       	push	r9
    24ea:	af 92       	push	r10
    24ec:	bf 92       	push	r11
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	6b 01       	movw	r12, r22
    24f8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    24fa:	0e 94 4e 12 	call	0x249c	; 0x249c <micros>
    24fe:	4b 01       	movw	r8, r22
    2500:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2502:	c1 14       	cp	r12, r1
    2504:	d1 04       	cpc	r13, r1
    2506:	e1 04       	cpc	r14, r1
    2508:	f1 04       	cpc	r15, r1
    250a:	01 f1       	breq	.+64     	; 0x254c <delay+0x66>
		yield();
    250c:	0e 94 2a 20 	call	0x4054	; 0x4054 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2510:	0e 94 4e 12 	call	0x249c	; 0x249c <micros>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	88 19       	sub	r24, r8
    251a:	99 09       	sbc	r25, r9
    251c:	aa 09       	sbc	r26, r10
    251e:	bb 09       	sbc	r27, r11
    2520:	88 3e       	cpi	r24, 0xE8	; 232
    2522:	93 40       	sbci	r25, 0x03	; 3
    2524:	a1 05       	cpc	r26, r1
    2526:	b1 05       	cpc	r27, r1
    2528:	60 f3       	brcs	.-40     	; 0x2502 <delay+0x1c>
			ms--;
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	c2 1a       	sub	r12, r18
    252e:	d1 08       	sbc	r13, r1
    2530:	e1 08       	sbc	r14, r1
    2532:	f1 08       	sbc	r15, r1
			start += 1000;
    2534:	88 ee       	ldi	r24, 0xE8	; 232
    2536:	88 0e       	add	r8, r24
    2538:	83 e0       	ldi	r24, 0x03	; 3
    253a:	98 1e       	adc	r9, r24
    253c:	a1 1c       	adc	r10, r1
    253e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2540:	c1 14       	cp	r12, r1
    2542:	d1 04       	cpc	r13, r1
    2544:	e1 04       	cpc	r14, r1
    2546:	f1 04       	cpc	r15, r1
    2548:	19 f7       	brne	.-58     	; 0x2510 <delay+0x2a>
    254a:	db cf       	rjmp	.-74     	; 0x2502 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	df 90       	pop	r13
    2552:	cf 90       	pop	r12
    2554:	bf 90       	pop	r11
    2556:	af 90       	pop	r10
    2558:	9f 90       	pop	r9
    255a:	8f 90       	pop	r8
    255c:	08 95       	ret

0000255e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	81 f0       	breq	.+32     	; 0x2582 <turnOffPWM+0x24>
    2562:	28 f4       	brcc	.+10     	; 0x256e <turnOffPWM+0x10>
    2564:	81 30       	cpi	r24, 0x01	; 1
    2566:	99 f0       	breq	.+38     	; 0x258e <turnOffPWM+0x30>
    2568:	82 30       	cpi	r24, 0x02	; 2
    256a:	a1 f0       	breq	.+40     	; 0x2594 <turnOffPWM+0x36>
    256c:	08 95       	ret
    256e:	87 30       	cpi	r24, 0x07	; 7
    2570:	a9 f0       	breq	.+42     	; 0x259c <turnOffPWM+0x3e>
    2572:	88 30       	cpi	r24, 0x08	; 8
    2574:	b9 f0       	breq	.+46     	; 0x25a4 <turnOffPWM+0x46>
    2576:	84 30       	cpi	r24, 0x04	; 4
    2578:	d1 f4       	brne	.+52     	; 0x25ae <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    257a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    257e:	8f 7d       	andi	r24, 0xDF	; 223
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2582:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2586:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2588:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    258c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    258e:	84 b5       	in	r24, 0x24	; 36
    2590:	8f 77       	andi	r24, 0x7F	; 127
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2594:	84 b5       	in	r24, 0x24	; 36
    2596:	8f 7d       	andi	r24, 0xDF	; 223
    2598:	84 bd       	out	0x24, r24	; 36
    259a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    259c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25a0:	8f 77       	andi	r24, 0x7F	; 127
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    25a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25a8:	8f 7d       	andi	r24, 0xDF	; 223
    25aa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25ae:	08 95       	ret

000025b0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	fc 01       	movw	r30, r24
    25b8:	e0 57       	subi	r30, 0x70	; 112
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    25be:	fc 01       	movw	r30, r24
    25c0:	ec 55       	subi	r30, 0x5C	; 92
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    25c6:	88 23       	and	r24, r24
    25c8:	61 f1       	breq	.+88     	; 0x2622 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	fc 01       	movw	r30, r24
    25d2:	e4 53       	subi	r30, 0x34	; 52
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	c5 91       	lpm	r28, Z+
    25d8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    25da:	fc 01       	movw	r30, r24
    25dc:	ee 53       	subi	r30, 0x3E	; 62
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	a5 91       	lpm	r26, Z+
    25e2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    25e4:	61 11       	cpse	r22, r1
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    25e8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    25ea:	f8 94       	cli
		*reg &= ~bit;
    25ec:	88 81       	ld	r24, Y
    25ee:	20 95       	com	r18
    25f0:	82 23       	and	r24, r18
    25f2:	88 83       	st	Y, r24
		*out &= ~bit;
    25f4:	ec 91       	ld	r30, X
    25f6:	2e 23       	and	r18, r30
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    25fa:	62 30       	cpi	r22, 0x02	; 2
    25fc:	61 f4       	brne	.+24     	; 0x2616 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    25fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2600:	f8 94       	cli
		*reg &= ~bit;
    2602:	88 81       	ld	r24, Y
    2604:	32 2f       	mov	r19, r18
    2606:	30 95       	com	r19
    2608:	83 23       	and	r24, r19
    260a:	88 83       	st	Y, r24
		*out |= bit;
    260c:	ec 91       	ld	r30, X
    260e:	2e 2b       	or	r18, r30
    2610:	2c 93       	st	X, r18
		SREG = oldSREG;
    2612:	9f bf       	out	0x3f, r25	; 63
    2614:	06 c0       	rjmp	.+12     	; 0x2622 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2616:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2618:	f8 94       	cli
		*reg |= bit;
    261a:	e8 81       	ld	r30, Y
    261c:	2e 2b       	or	r18, r30
    261e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2620:	8f bf       	out	0x3f, r24	; 63
	}
}
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	08 95       	ret

00002628 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	f9 01       	movw	r30, r18
    2634:	e4 58       	subi	r30, 0x84	; 132
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    263a:	f9 01       	movw	r30, r18
    263c:	e0 57       	subi	r30, 0x70	; 112
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2642:	f9 01       	movw	r30, r18
    2644:	ec 55       	subi	r30, 0x5C	; 92
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    264a:	cc 23       	and	r28, r28
    264c:	c1 f0       	breq	.+48     	; 0x267e <digitalWrite+0x56>
    264e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2650:	81 11       	cpse	r24, r1
    2652:	0e 94 af 12 	call	0x255e	; 0x255e <turnOffPWM>

	out = portOutputRegister(port);
    2656:	ec 2f       	mov	r30, r28
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	ee 53       	subi	r30, 0x3E	; 62
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	a5 91       	lpm	r26, Z+
    2664:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2666:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2668:	f8 94       	cli

	if (val == LOW) {
    266a:	11 11       	cpse	r17, r1
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <digitalWrite+0x4e>
		*out &= ~bit;
    266e:	8c 91       	ld	r24, X
    2670:	d0 95       	com	r29
    2672:	d8 23       	and	r29, r24
    2674:	02 c0       	rjmp	.+4      	; 0x267a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2676:	ec 91       	ld	r30, X
    2678:	de 2b       	or	r29, r30
    267a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    267c:	9f bf       	out	0x3f, r25	; 63
}
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	08 95       	ret

00002686 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    2686:	4f 92       	push	r4
    2688:	5f 92       	push	r5
    268a:	6f 92       	push	r6
    268c:	7f 92       	push	r7
    268e:	af 92       	push	r10
    2690:	bf 92       	push	r11
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	29 01       	movw	r4, r18
    26a8:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    26aa:	9b 01       	movw	r18, r22
    26ac:	ac 01       	movw	r20, r24
    26ae:	24 19       	sub	r18, r4
    26b0:	35 09       	sbc	r19, r5
    26b2:	46 09       	sbc	r20, r6
    26b4:	57 09       	sbc	r21, r7
    26b6:	89 89       	ldd	r24, Y+17	; 0x11
    26b8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ba:	ab 89       	ldd	r26, Y+19	; 0x13
    26bc:	bc 89       	ldd	r27, Y+20	; 0x14
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	6a 19       	sub	r22, r10
    26c4:	7b 09       	sbc	r23, r11
    26c6:	8c 09       	sbc	r24, r12
    26c8:	9d 09       	sbc	r25, r13
    26ca:	0e 94 37 22 	call	0x446e	; 0x446e <__mulsi3>
    26ce:	a8 01       	movw	r20, r16
    26d0:	97 01       	movw	r18, r14
    26d2:	24 19       	sub	r18, r4
    26d4:	35 09       	sbc	r19, r5
    26d6:	46 09       	sbc	r20, r6
    26d8:	57 09       	sbc	r21, r7
    26da:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodsi4>
    26de:	ca 01       	movw	r24, r20
    26e0:	b9 01       	movw	r22, r18
    26e2:	6a 0d       	add	r22, r10
    26e4:	7b 1d       	adc	r23, r11
    26e6:	8c 1d       	adc	r24, r12
    26e8:	9d 1d       	adc	r25, r13
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	ff 90       	pop	r15
    26f4:	ef 90       	pop	r14
    26f6:	df 90       	pop	r13
    26f8:	cf 90       	pop	r12
    26fa:	bf 90       	pop	r11
    26fc:	af 90       	pop	r10
    26fe:	7f 90       	pop	r7
    2700:	6f 90       	pop	r6
    2702:	5f 90       	pop	r5
    2704:	4f 90       	pop	r4
    2706:	08 95       	ret

00002708 <_ZN12Adafruit_GFX9writeLineEiiiij>:
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h  = maxy - miny + 1;
    }
}
    2708:	2f 92       	push	r2
    270a:	3f 92       	push	r3
    270c:	4f 92       	push	r4
    270e:	5f 92       	push	r5
    2710:	6f 92       	push	r6
    2712:	7f 92       	push	r7
    2714:	8f 92       	push	r8
    2716:	9f 92       	push	r9
    2718:	af 92       	push	r10
    271a:	bf 92       	push	r11
    271c:	cf 92       	push	r12
    271e:	df 92       	push	r13
    2720:	ef 92       	push	r14
    2722:	ff 92       	push	r15
    2724:	0f 93       	push	r16
    2726:	1f 93       	push	r17
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	00 d0       	rcall	.+0      	; 0x272e <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    272e:	00 d0       	rcall	.+0      	; 0x2730 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    2730:	00 d0       	rcall	.+0      	; 0x2732 <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	2c 01       	movw	r4, r24
    2738:	7e 83       	std	Y+6, r23	; 0x06
    273a:	6d 83       	std	Y+5, r22	; 0x05
    273c:	6a 01       	movw	r12, r20
    273e:	59 01       	movw	r10, r18
    2740:	c8 01       	movw	r24, r16
    2742:	fc 82       	std	Y+4, r15	; 0x04
    2744:	eb 82       	std	Y+3, r14	; 0x03
    2746:	48 01       	movw	r8, r16
    2748:	84 1a       	sub	r8, r20
    274a:	95 0a       	sbc	r9, r21
    274c:	97 fe       	sbrs	r9, 7
    274e:	03 c0       	rjmp	.+6      	; 0x2756 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2750:	91 94       	neg	r9
    2752:	81 94       	neg	r8
    2754:	91 08       	sbc	r9, r1
    2756:	35 01       	movw	r6, r10
    2758:	2d 81       	ldd	r18, Y+5	; 0x05
    275a:	3e 81       	ldd	r19, Y+6	; 0x06
    275c:	62 1a       	sub	r6, r18
    275e:	73 0a       	sbc	r7, r19
    2760:	77 fe       	sbrs	r7, 7
    2762:	03 c0       	rjmp	.+6      	; 0x276a <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    2764:	71 94       	neg	r7
    2766:	61 94       	neg	r6
    2768:	71 08       	sbc	r7, r1
    276a:	68 14       	cp	r6, r8
    276c:	79 04       	cpc	r7, r9
    276e:	5c f4       	brge	.+22     	; 0x2786 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    2770:	3a 2d       	mov	r19, r10
    2772:	2b 2d       	mov	r18, r11
    2774:	5c 01       	movw	r10, r24
    2776:	83 2f       	mov	r24, r19
    2778:	92 2f       	mov	r25, r18
    277a:	3d 81       	ldd	r19, Y+5	; 0x05
    277c:	2e 81       	ldd	r18, Y+6	; 0x06
    277e:	de 82       	std	Y+6, r13	; 0x06
    2780:	cd 82       	std	Y+5, r12	; 0x05
    2782:	c3 2e       	mov	r12, r19
    2784:	d2 2e       	mov	r13, r18
    2786:	ad 81       	ldd	r26, Y+5	; 0x05
    2788:	be 81       	ldd	r27, Y+6	; 0x06
    278a:	aa 16       	cp	r10, r26
    278c:	bb 06       	cpc	r11, r27
    278e:	5c f4       	brge	.+22     	; 0x27a6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    2790:	3c 2d       	mov	r19, r12
    2792:	2d 2d       	mov	r18, r13
    2794:	6c 01       	movw	r12, r24
    2796:	83 2f       	mov	r24, r19
    2798:	92 2f       	mov	r25, r18
    279a:	3d 81       	ldd	r19, Y+5	; 0x05
    279c:	2e 81       	ldd	r18, Y+6	; 0x06
    279e:	be 82       	std	Y+6, r11	; 0x06
    27a0:	ad 82       	std	Y+5, r10	; 0x05
    27a2:	a3 2e       	mov	r10, r19
    27a4:	b2 2e       	mov	r11, r18
    27a6:	85 01       	movw	r16, r10
    27a8:	2d 81       	ldd	r18, Y+5	; 0x05
    27aa:	3e 81       	ldd	r19, Y+6	; 0x06
    27ac:	02 1b       	sub	r16, r18
    27ae:	13 0b       	sbc	r17, r19
    27b0:	1c 01       	movw	r2, r24
    27b2:	2c 18       	sub	r2, r12
    27b4:	3d 08       	sbc	r3, r13
    27b6:	37 fe       	sbrs	r3, 7
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    27ba:	31 94       	neg	r3
    27bc:	21 94       	neg	r2
    27be:	31 08       	sbc	r3, r1
    27c0:	78 01       	movw	r14, r16
    27c2:	17 ff       	sbrs	r17, 7
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	e3 1a       	sub	r14, r19
    27ca:	f3 0a       	sbc	r15, r19
    27cc:	f5 94       	asr	r15
    27ce:	e7 94       	ror	r14
    27d0:	c8 16       	cp	r12, r24
    27d2:	d9 06       	cpc	r13, r25
    27d4:	2c f0       	brlt	.+10     	; 0x27e0 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	9f ef       	ldi	r25, 0xFF	; 255
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    27e0:	a1 e0       	ldi	r26, 0x01	; 1
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	ba 83       	std	Y+2, r27	; 0x02
    27e6:	a9 83       	std	Y+1, r26	; 0x01
    27e8:	2d 81       	ldd	r18, Y+5	; 0x05
    27ea:	3e 81       	ldd	r19, Y+6	; 0x06
    27ec:	a2 16       	cp	r10, r18
    27ee:	b3 06       	cpc	r11, r19
    27f0:	24 f1       	brlt	.+72     	; 0x283a <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    27f2:	d2 01       	movw	r26, r4
    27f4:	ed 91       	ld	r30, X+
    27f6:	fc 91       	ld	r31, X
    27f8:	04 84       	ldd	r0, Z+12	; 0x0c
    27fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    27fc:	e0 2d       	mov	r30, r0
    27fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2800:	3c 81       	ldd	r19, Y+4	; 0x04
    2802:	68 14       	cp	r6, r8
    2804:	79 04       	cpc	r7, r9
    2806:	24 f4       	brge	.+8      	; 0x2810 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    2808:	4d 81       	ldd	r20, Y+5	; 0x05
    280a:	5e 81       	ldd	r21, Y+6	; 0x06
    280c:	b6 01       	movw	r22, r12
    280e:	03 c0       	rjmp	.+6      	; 0x2816 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    2810:	a6 01       	movw	r20, r12
    2812:	6d 81       	ldd	r22, Y+5	; 0x05
    2814:	7e 81       	ldd	r23, Y+6	; 0x06
    2816:	c2 01       	movw	r24, r4
    2818:	09 95       	icall
    281a:	e2 18       	sub	r14, r2
    281c:	f3 08       	sbc	r15, r3
    281e:	f7 fe       	sbrs	r15, 7
    2820:	06 c0       	rjmp	.+12     	; 0x282e <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    2822:	29 81       	ldd	r18, Y+1	; 0x01
    2824:	3a 81       	ldd	r19, Y+2	; 0x02
    2826:	c2 0e       	add	r12, r18
    2828:	d3 1e       	adc	r13, r19
    282a:	e0 0e       	add	r14, r16
    282c:	f1 1e       	adc	r15, r17
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	d7 cf       	rjmp	.-82     	; 0x27e8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    283a:	26 96       	adiw	r28, 0x06	; 6
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	7f 90       	pop	r7
    2860:	6f 90       	pop	r6
    2862:	5f 90       	pop	r5
    2864:	4f 90       	pop	r4
    2866:	3f 90       	pop	r3
    2868:	2f 90       	pop	r2
    286a:	08 95       	ret

0000286c <_ZN12Adafruit_GFX10writePixelEiij>:
    286c:	dc 01       	movw	r26, r24
    286e:	ed 91       	ld	r30, X+
    2870:	fc 91       	ld	r31, X
    2872:	00 84       	ldd	r0, Z+8	; 0x08
    2874:	f1 85       	ldd	r31, Z+9	; 0x09
    2876:	e0 2d       	mov	r30, r0
    2878:	09 94       	ijmp

0000287a <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	dc 01       	movw	r26, r24
    2880:	ed 91       	ld	r30, X+
    2882:	fc 91       	ld	r31, X
    2884:	04 8c       	ldd	r0, Z+28	; 0x1c
    2886:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2888:	e0 2d       	mov	r30, r0
    288a:	09 95       	icall
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	dc 01       	movw	r26, r24
    2898:	ed 91       	ld	r30, X+
    289a:	fc 91       	ld	r31, X
    289c:	06 8c       	ldd	r0, Z+30	; 0x1e
    289e:	f7 8d       	ldd	r31, Z+31	; 0x1f
    28a0:	e0 2d       	mov	r30, r0
    28a2:	09 95       	icall
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	08 95       	ret

000028aa <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	dc 01       	movw	r26, r24
    28b4:	ed 91       	ld	r30, X+
    28b6:	fc 91       	ld	r31, X
    28b8:	00 a0       	ldd	r0, Z+32	; 0x20
    28ba:	f1 a1       	ldd	r31, Z+33	; 0x21
    28bc:	e0 2d       	mov	r30, r0
    28be:	09 95       	icall
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	08 95       	ret

000028ca <_ZN12Adafruit_GFX10startWriteEv>:
    28ca:	08 95       	ret

000028cc <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    28cc:	8f 92       	push	r8
    28ce:	9f 92       	push	r9
    28d0:	af 92       	push	r10
    28d2:	bf 92       	push	r11
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	ec 01       	movw	r28, r24
    28e6:	5b 01       	movw	r10, r22
    28e8:	4a 01       	movw	r8, r20
    28ea:	69 01       	movw	r12, r18
    28ec:	78 01       	movw	r14, r16
    28ee:	e8 81       	ld	r30, Y
    28f0:	f9 81       	ldd	r31, Y+1	; 0x01
    28f2:	02 84       	ldd	r0, Z+10	; 0x0a
    28f4:	f3 85       	ldd	r31, Z+11	; 0x0b
    28f6:	e0 2d       	mov	r30, r0
    28f8:	09 95       	icall
    28fa:	c8 0c       	add	r12, r8
    28fc:	d9 1c       	adc	r13, r9
    28fe:	86 01       	movw	r16, r12
    2900:	01 50       	subi	r16, 0x01	; 1
    2902:	11 09       	sbc	r17, r1
    2904:	e8 81       	ld	r30, Y
    2906:	f9 81       	ldd	r31, Y+1	; 0x01
    2908:	04 88       	ldd	r0, Z+20	; 0x14
    290a:	f5 89       	ldd	r31, Z+21	; 0x15
    290c:	e0 2d       	mov	r30, r0
    290e:	95 01       	movw	r18, r10
    2910:	a4 01       	movw	r20, r8
    2912:	b5 01       	movw	r22, r10
    2914:	ce 01       	movw	r24, r28
    2916:	09 95       	icall
    2918:	e8 81       	ld	r30, Y
    291a:	f9 81       	ldd	r31, Y+1	; 0x01
    291c:	06 88       	ldd	r0, Z+22	; 0x16
    291e:	f7 89       	ldd	r31, Z+23	; 0x17
    2920:	e0 2d       	mov	r30, r0
    2922:	ce 01       	movw	r24, r28
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	bf 90       	pop	r11
    2936:	af 90       	pop	r10
    2938:	9f 90       	pop	r9
    293a:	8f 90       	pop	r8
    293c:	09 94       	ijmp

0000293e <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	ec 01       	movw	r28, r24
    2958:	5b 01       	movw	r10, r22
    295a:	4a 01       	movw	r8, r20
    295c:	69 01       	movw	r12, r18
    295e:	e8 81       	ld	r30, Y
    2960:	f9 81       	ldd	r31, Y+1	; 0x01
    2962:	02 84       	ldd	r0, Z+10	; 0x0a
    2964:	f3 85       	ldd	r31, Z+11	; 0x0b
    2966:	e0 2d       	mov	r30, r0
    2968:	09 95       	icall
    296a:	95 01       	movw	r18, r10
    296c:	2c 0d       	add	r18, r12
    296e:	3d 1d       	adc	r19, r13
    2970:	21 50       	subi	r18, 0x01	; 1
    2972:	31 09       	sbc	r19, r1
    2974:	e8 81       	ld	r30, Y
    2976:	f9 81       	ldd	r31, Y+1	; 0x01
    2978:	04 88       	ldd	r0, Z+20	; 0x14
    297a:	f5 89       	ldd	r31, Z+21	; 0x15
    297c:	e0 2d       	mov	r30, r0
    297e:	78 01       	movw	r14, r16
    2980:	84 01       	movw	r16, r8
    2982:	a4 01       	movw	r20, r8
    2984:	b5 01       	movw	r22, r10
    2986:	ce 01       	movw	r24, r28
    2988:	09 95       	icall
    298a:	e8 81       	ld	r30, Y
    298c:	f9 81       	ldd	r31, Y+1	; 0x01
    298e:	06 88       	ldd	r0, Z+22	; 0x16
    2990:	f7 89       	ldd	r31, Z+23	; 0x17
    2992:	e0 2d       	mov	r30, r0
    2994:	ce 01       	movw	r24, r28
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	bf 90       	pop	r11
    29a8:	af 90       	pop	r10
    29aa:	9f 90       	pop	r9
    29ac:	8f 90       	pop	r8
    29ae:	09 94       	ijmp

000029b0 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    29b0:	4f 92       	push	r4
    29b2:	5f 92       	push	r5
    29b4:	6f 92       	push	r6
    29b6:	7f 92       	push	r7
    29b8:	8f 92       	push	r8
    29ba:	9f 92       	push	r9
    29bc:	af 92       	push	r10
    29be:	bf 92       	push	r11
    29c0:	cf 92       	push	r12
    29c2:	df 92       	push	r13
    29c4:	ef 92       	push	r14
    29c6:	ff 92       	push	r15
    29c8:	0f 93       	push	r16
    29ca:	1f 93       	push	r17
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	6c 01       	movw	r12, r24
    29d2:	2b 01       	movw	r4, r22
    29d4:	5a 01       	movw	r10, r20
    29d6:	39 01       	movw	r6, r18
    29d8:	48 01       	movw	r8, r16
    29da:	dc 01       	movw	r26, r24
    29dc:	ed 91       	ld	r30, X+
    29de:	fc 91       	ld	r31, X
    29e0:	02 84       	ldd	r0, Z+10	; 0x0a
    29e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    29e4:	e0 2d       	mov	r30, r0
    29e6:	09 95       	icall
    29e8:	e2 01       	movw	r28, r4
    29ea:	64 0c       	add	r6, r4
    29ec:	75 1c       	adc	r7, r5
    29ee:	d6 01       	movw	r26, r12
    29f0:	ed 91       	ld	r30, X+
    29f2:	fc 91       	ld	r31, X
    29f4:	c6 15       	cp	r28, r6
    29f6:	d7 05       	cpc	r29, r7
    29f8:	5c f4       	brge	.+22     	; 0x2a10 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    29fa:	00 88       	ldd	r0, Z+16	; 0x10
    29fc:	f1 89       	ldd	r31, Z+17	; 0x11
    29fe:	e0 2d       	mov	r30, r0
    2a00:	87 01       	movw	r16, r14
    2a02:	94 01       	movw	r18, r8
    2a04:	a5 01       	movw	r20, r10
    2a06:	be 01       	movw	r22, r28
    2a08:	c6 01       	movw	r24, r12
    2a0a:	09 95       	icall
    2a0c:	21 96       	adiw	r28, 0x01	; 1
    2a0e:	ef cf       	rjmp	.-34     	; 0x29ee <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    2a10:	06 88       	ldd	r0, Z+22	; 0x16
    2a12:	f7 89       	ldd	r31, Z+23	; 0x17
    2a14:	e0 2d       	mov	r30, r0
    2a16:	c6 01       	movw	r24, r12
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	9f 90       	pop	r9
    2a2e:	8f 90       	pop	r8
    2a30:	7f 90       	pop	r7
    2a32:	6f 90       	pop	r6
    2a34:	5f 90       	pop	r5
    2a36:	4f 90       	pop	r4
    2a38:	09 94       	ijmp

00002a3a <_ZN12Adafruit_GFX10fillScreenEj>:
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	dc 01       	movw	r26, r24
    2a44:	1a 96       	adiw	r26, 0x0a	; 10
    2a46:	0d 91       	ld	r16, X+
    2a48:	1c 91       	ld	r17, X
    2a4a:	1b 97       	sbiw	r26, 0x0b	; 11
    2a4c:	18 96       	adiw	r26, 0x08	; 8
    2a4e:	2d 91       	ld	r18, X+
    2a50:	3c 91       	ld	r19, X
    2a52:	19 97       	sbiw	r26, 0x09	; 9
    2a54:	ed 91       	ld	r30, X+
    2a56:	fc 91       	ld	r31, X
    2a58:	00 a0       	ldd	r0, Z+32	; 0x20
    2a5a:	f1 a1       	ldd	r31, Z+33	; 0x21
    2a5c:	e0 2d       	mov	r30, r0
    2a5e:	7b 01       	movw	r14, r22
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	09 95       	icall
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	08 95       	ret

00002a74 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2a74:	8f 92       	push	r8
    2a76:	9f 92       	push	r9
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	4c 01       	movw	r8, r24
    2a8e:	6b 01       	movw	r12, r22
    2a90:	5a 01       	movw	r10, r20
    2a92:	e9 01       	movw	r28, r18
    2a94:	dc 01       	movw	r26, r24
    2a96:	ed 91       	ld	r30, X+
    2a98:	fc 91       	ld	r31, X
    2a9a:	62 17       	cp	r22, r18
    2a9c:	73 07       	cpc	r23, r19
    2a9e:	81 f4       	brne	.+32     	; 0x2ac0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    2aa0:	04 17       	cp	r16, r20
    2aa2:	15 07       	cpc	r17, r21
    2aa4:	24 f4       	brge	.+8      	; 0x2aae <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    2aa6:	8b 2d       	mov	r24, r11
    2aa8:	58 01       	movw	r10, r16
    2aaa:	04 2f       	mov	r16, r20
    2aac:	18 2f       	mov	r17, r24
    2aae:	0a 19       	sub	r16, r10
    2ab0:	1b 09       	sbc	r17, r11
    2ab2:	98 01       	movw	r18, r16
    2ab4:	2f 5f       	subi	r18, 0xFF	; 255
    2ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab8:	04 8c       	ldd	r0, Z+28	; 0x1c
    2aba:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2abc:	e0 2d       	mov	r30, r0
    2abe:	12 c0       	rjmp	.+36     	; 0x2ae4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    2ac0:	40 17       	cp	r20, r16
    2ac2:	51 07       	cpc	r21, r17
    2ac4:	09 f5       	brne	.+66     	; 0x2b08 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    2ac6:	26 17       	cp	r18, r22
    2ac8:	37 07       	cpc	r19, r23
    2aca:	24 f4       	brge	.+8      	; 0x2ad4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    2acc:	8d 2d       	mov	r24, r13
    2ace:	69 01       	movw	r12, r18
    2ad0:	c6 2f       	mov	r28, r22
    2ad2:	d8 2f       	mov	r29, r24
    2ad4:	9e 01       	movw	r18, r28
    2ad6:	2c 19       	sub	r18, r12
    2ad8:	3d 09       	sbc	r19, r13
    2ada:	2f 5f       	subi	r18, 0xFF	; 255
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	06 8c       	ldd	r0, Z+30	; 0x1e
    2ae0:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2ae2:	e0 2d       	mov	r30, r0
    2ae4:	87 01       	movw	r16, r14
    2ae6:	a5 01       	movw	r20, r10
    2ae8:	b6 01       	movw	r22, r12
    2aea:	c4 01       	movw	r24, r8
    2aec:	09 95       	icall
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	bf 90       	pop	r11
    2b00:	af 90       	pop	r10
    2b02:	9f 90       	pop	r9
    2b04:	8f 90       	pop	r8
    2b06:	08 95       	ret
    2b08:	02 84       	ldd	r0, Z+10	; 0x0a
    2b0a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	09 95       	icall
    2b10:	d4 01       	movw	r26, r8
    2b12:	ed 91       	ld	r30, X+
    2b14:	fc 91       	ld	r31, X
    2b16:	04 88       	ldd	r0, Z+20	; 0x14
    2b18:	f5 89       	ldd	r31, Z+21	; 0x15
    2b1a:	e0 2d       	mov	r30, r0
    2b1c:	9e 01       	movw	r18, r28
    2b1e:	a5 01       	movw	r20, r10
    2b20:	b6 01       	movw	r22, r12
    2b22:	c4 01       	movw	r24, r8
    2b24:	09 95       	icall
    2b26:	d4 01       	movw	r26, r8
    2b28:	ed 91       	ld	r30, X+
    2b2a:	fc 91       	ld	r31, X
    2b2c:	06 88       	ldd	r0, Z+22	; 0x16
    2b2e:	f7 89       	ldd	r31, Z+23	; 0x17
    2b30:	e0 2d       	mov	r30, r0
    2b32:	c4 01       	movw	r24, r8
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
    2b44:	bf 90       	pop	r11
    2b46:	af 90       	pop	r10
    2b48:	9f 90       	pop	r9
    2b4a:	8f 90       	pop	r8
    2b4c:	09 94       	ijmp

00002b4e <_ZN12Adafruit_GFX8drawRectEiiiij>:
    2b4e:	6f 92       	push	r6
    2b50:	7f 92       	push	r7
    2b52:	8f 92       	push	r8
    2b54:	9f 92       	push	r9
    2b56:	af 92       	push	r10
    2b58:	bf 92       	push	r11
    2b5a:	cf 92       	push	r12
    2b5c:	df 92       	push	r13
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	ec 01       	movw	r28, r24
    2b6c:	4b 01       	movw	r8, r22
    2b6e:	5a 01       	movw	r10, r20
    2b70:	69 01       	movw	r12, r18
    2b72:	38 01       	movw	r6, r16
    2b74:	e8 81       	ld	r30, Y
    2b76:	f9 81       	ldd	r31, Y+1	; 0x01
    2b78:	02 84       	ldd	r0, Z+10	; 0x0a
    2b7a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2b7c:	e0 2d       	mov	r30, r0
    2b7e:	09 95       	icall
    2b80:	e8 81       	ld	r30, Y
    2b82:	f9 81       	ldd	r31, Y+1	; 0x01
    2b84:	02 88       	ldd	r0, Z+18	; 0x12
    2b86:	f3 89       	ldd	r31, Z+19	; 0x13
    2b88:	e0 2d       	mov	r30, r0
    2b8a:	87 01       	movw	r16, r14
    2b8c:	96 01       	movw	r18, r12
    2b8e:	a5 01       	movw	r20, r10
    2b90:	b4 01       	movw	r22, r8
    2b92:	ce 01       	movw	r24, r28
    2b94:	09 95       	icall
    2b96:	a5 01       	movw	r20, r10
    2b98:	46 0d       	add	r20, r6
    2b9a:	57 1d       	adc	r21, r7
    2b9c:	41 50       	subi	r20, 0x01	; 1
    2b9e:	51 09       	sbc	r21, r1
    2ba0:	e8 81       	ld	r30, Y
    2ba2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba4:	02 88       	ldd	r0, Z+18	; 0x12
    2ba6:	f3 89       	ldd	r31, Z+19	; 0x13
    2ba8:	e0 2d       	mov	r30, r0
    2baa:	96 01       	movw	r18, r12
    2bac:	b4 01       	movw	r22, r8
    2bae:	ce 01       	movw	r24, r28
    2bb0:	09 95       	icall
    2bb2:	e8 81       	ld	r30, Y
    2bb4:	f9 81       	ldd	r31, Y+1	; 0x01
    2bb6:	00 88       	ldd	r0, Z+16	; 0x10
    2bb8:	f1 89       	ldd	r31, Z+17	; 0x11
    2bba:	e0 2d       	mov	r30, r0
    2bbc:	93 01       	movw	r18, r6
    2bbe:	a5 01       	movw	r20, r10
    2bc0:	b4 01       	movw	r22, r8
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	09 95       	icall
    2bc6:	c8 0c       	add	r12, r8
    2bc8:	d9 1c       	adc	r13, r9
    2bca:	b6 01       	movw	r22, r12
    2bcc:	61 50       	subi	r22, 0x01	; 1
    2bce:	71 09       	sbc	r23, r1
    2bd0:	e8 81       	ld	r30, Y
    2bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2bd4:	00 88       	ldd	r0, Z+16	; 0x10
    2bd6:	f1 89       	ldd	r31, Z+17	; 0x11
    2bd8:	e0 2d       	mov	r30, r0
    2bda:	93 01       	movw	r18, r6
    2bdc:	a5 01       	movw	r20, r10
    2bde:	ce 01       	movw	r24, r28
    2be0:	09 95       	icall
    2be2:	e8 81       	ld	r30, Y
    2be4:	f9 81       	ldd	r31, Y+1	; 0x01
    2be6:	06 88       	ldd	r0, Z+22	; 0x16
    2be8:	f7 89       	ldd	r31, Z+23	; 0x17
    2bea:	e0 2d       	mov	r30, r0
    2bec:	ce 01       	movw	r24, r28
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	bf 90       	pop	r11
    2c00:	af 90       	pop	r10
    2c02:	9f 90       	pop	r9
    2c04:	8f 90       	pop	r8
    2c06:	7f 90       	pop	r7
    2c08:	6f 90       	pop	r6
    2c0a:	09 94       	ijmp

00002c0c <_ZN12Adafruit_GFX13invertDisplayEb>:
    2c0c:	08 95       	ret

00002c0e <_ZN12Adafruit_GFX11setRotationEh>:
    2c0e:	fc 01       	movw	r30, r24
    2c10:	63 70       	andi	r22, 0x03	; 3
    2c12:	65 8b       	std	Z+21, r22	; 0x15
    2c14:	84 81       	ldd	r24, Z+4	; 0x04
    2c16:	95 81       	ldd	r25, Z+5	; 0x05
    2c18:	26 81       	ldd	r18, Z+6	; 0x06
    2c1a:	37 81       	ldd	r19, Z+7	; 0x07
    2c1c:	61 30       	cpi	r22, 0x01	; 1
    2c1e:	39 f0       	breq	.+14     	; 0x2c2e <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2c20:	63 30       	cpi	r22, 0x03	; 3
    2c22:	29 f0       	breq	.+10     	; 0x2c2e <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2c24:	91 87       	std	Z+9, r25	; 0x09
    2c26:	80 87       	std	Z+8, r24	; 0x08
    2c28:	33 87       	std	Z+11, r19	; 0x0b
    2c2a:	22 87       	std	Z+10, r18	; 0x0a
    2c2c:	08 95       	ret
    2c2e:	31 87       	std	Z+9, r19	; 0x09
    2c30:	20 87       	std	Z+8, r18	; 0x08
    2c32:	93 87       	std	Z+11, r25	; 0x0b
    2c34:	82 87       	std	Z+10, r24	; 0x0a
    2c36:	08 95       	ret

00002c38 <_ZN12Adafruit_GFXC1Eii>:
    2c38:	fc 01       	movw	r30, r24
    2c3a:	13 82       	std	Z+3, r1	; 0x03
    2c3c:	12 82       	std	Z+2, r1	; 0x02
    2c3e:	8a e7       	ldi	r24, 0x7A	; 122
    2c40:	93 e0       	ldi	r25, 0x03	; 3
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
    2c46:	75 83       	std	Z+5, r23	; 0x05
    2c48:	64 83       	std	Z+4, r22	; 0x04
    2c4a:	57 83       	std	Z+7, r21	; 0x07
    2c4c:	46 83       	std	Z+6, r20	; 0x06
    2c4e:	71 87       	std	Z+9, r23	; 0x09
    2c50:	60 87       	std	Z+8, r22	; 0x08
    2c52:	53 87       	std	Z+11, r21	; 0x0b
    2c54:	42 87       	std	Z+10, r20	; 0x0a
    2c56:	15 8a       	std	Z+21, r1	; 0x15
    2c58:	15 86       	std	Z+13, r1	; 0x0d
    2c5a:	14 86       	std	Z+12, r1	; 0x0c
    2c5c:	17 86       	std	Z+15, r1	; 0x0f
    2c5e:	16 86       	std	Z+14, r1	; 0x0e
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	84 8b       	std	Z+20, r24	; 0x14
    2c64:	2f ef       	ldi	r18, 0xFF	; 255
    2c66:	3f ef       	ldi	r19, 0xFF	; 255
    2c68:	33 8b       	std	Z+19, r19	; 0x13
    2c6a:	22 8b       	std	Z+18, r18	; 0x12
    2c6c:	31 8b       	std	Z+17, r19	; 0x11
    2c6e:	20 8b       	std	Z+16, r18	; 0x10
    2c70:	86 8b       	std	Z+22, r24	; 0x16
    2c72:	17 8a       	std	Z+23, r1	; 0x17
    2c74:	11 8e       	std	Z+25, r1	; 0x19
    2c76:	10 8e       	std	Z+24, r1	; 0x18
    2c78:	08 95       	ret

00002c7a <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    2c7a:	2f 92       	push	r2
    2c7c:	3f 92       	push	r3
    2c7e:	4f 92       	push	r4
    2c80:	5f 92       	push	r5
    2c82:	6f 92       	push	r6
    2c84:	7f 92       	push	r7
    2c86:	8f 92       	push	r8
    2c88:	9f 92       	push	r9
    2c8a:	af 92       	push	r10
    2c8c:	bf 92       	push	r11
    2c8e:	cf 92       	push	r12
    2c90:	df 92       	push	r13
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	6b 97       	sbiw	r28, 0x1b	; 27
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	9b 8f       	std	Y+27, r25	; 0x1b
    2cb0:	8a 8f       	std	Y+26, r24	; 0x1a
    2cb2:	5b 01       	movw	r10, r22
    2cb4:	1a 01       	movw	r2, r20
    2cb6:	d2 2e       	mov	r13, r18
    2cb8:	1f 83       	std	Y+7, r17	; 0x07
    2cba:	0e 83       	std	Y+6, r16	; 0x06
    2cbc:	37 01       	movw	r6, r14
    2cbe:	c9 82       	std	Y+1, r12	; 0x01
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	58 96       	adiw	r26, 0x18	; 24
    2cc4:	2d 91       	ld	r18, X+
    2cc6:	3c 91       	ld	r19, X
    2cc8:	59 97       	sbiw	r26, 0x19	; 25
    2cca:	21 15       	cp	r18, r1
    2ccc:	31 05       	cpc	r19, r1
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x58>
    2cd0:	e6 c0       	rjmp	.+460    	; 0x2e9e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x224>
    2cd2:	18 96       	adiw	r26, 0x08	; 8
    2cd4:	8d 91       	ld	r24, X+
    2cd6:	9c 91       	ld	r25, X
    2cd8:	19 97       	sbiw	r26, 0x09	; 9
    2cda:	68 17       	cp	r22, r24
    2cdc:	79 07       	cpc	r23, r25
    2cde:	0c f0       	brlt	.+2      	; 0x2ce2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x68>
    2ce0:	cd c1       	rjmp	.+922    	; 0x307c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2ce2:	1a 96       	adiw	r26, 0x0a	; 10
    2ce4:	8d 91       	ld	r24, X+
    2ce6:	9c 91       	ld	r25, X
    2ce8:	1b 97       	sbiw	r26, 0x0b	; 11
    2cea:	48 17       	cp	r20, r24
    2cec:	59 07       	cpc	r21, r25
    2cee:	0c f0       	brlt	.+2      	; 0x2cf2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    2cf0:	c5 c1       	rjmp	.+906    	; 0x307c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2cf2:	8c 2c       	mov	r8, r12
    2cf4:	91 2c       	mov	r9, r1
    2cf6:	fb 01       	movw	r30, r22
    2cf8:	26 e0       	ldi	r18, 0x06	; 6
    2cfa:	c2 9e       	mul	r12, r18
    2cfc:	e0 0d       	add	r30, r0
    2cfe:	f1 1d       	adc	r31, r1
    2d00:	11 24       	eor	r1, r1
    2d02:	fb 87       	std	Y+11, r31	; 0x0b
    2d04:	ea 87       	std	Y+10, r30	; 0x0a
    2d06:	1e 16       	cp	r1, r30
    2d08:	1f 06       	cpc	r1, r31
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x94>
    2d0c:	b7 c1       	rjmp	.+878    	; 0x307c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2d0e:	a4 01       	movw	r20, r8
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	44 0f       	add	r20, r20
    2d14:	55 1f       	adc	r21, r21
    2d16:	8a 95       	dec	r24
    2d18:	e1 f7       	brne	.-8      	; 0x2d12 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
    2d1a:	5d 87       	std	Y+13, r21	; 0x0d
    2d1c:	4c 87       	std	Y+12, r20	; 0x0c
    2d1e:	ca 01       	movw	r24, r20
    2d20:	82 0d       	add	r24, r2
    2d22:	93 1d       	adc	r25, r3
    2d24:	18 16       	cp	r1, r24
    2d26:	19 06       	cpc	r1, r25
    2d28:	0c f0       	brlt	.+2      	; 0x2d2c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb2>
    2d2a:	a8 c1       	rjmp	.+848    	; 0x307c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2d2c:	57 96       	adiw	r26, 0x17	; 23
    2d2e:	8c 91       	ld	r24, X
    2d30:	81 11       	cpse	r24, r1
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2d34:	5f ea       	ldi	r21, 0xAF	; 175
    2d36:	5d 15       	cp	r21, r13
    2d38:	08 f4       	brcc	.+2      	; 0x2d3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2d3a:	d3 94       	inc	r13
    2d3c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d3e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	11 97       	sbiw	r26, 0x01	; 1
    2d46:	02 84       	ldd	r0, Z+10	; 0x0a
    2d48:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d4a:	e0 2d       	mov	r30, r0
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	09 95       	icall
    2d50:	b5 e0       	ldi	r27, 0x05	; 5
    2d52:	db 9e       	mul	r13, r27
    2d54:	c0 01       	movw	r24, r0
    2d56:	11 24       	eor	r1, r1
    2d58:	f5 01       	movw	r30, r10
    2d5a:	35 96       	adiw	r30, 0x05	; 5
    2d5c:	ff 87       	std	Y+15, r31	; 0x0f
    2d5e:	ee 87       	std	Y+14, r30	; 0x0e
    2d60:	25 01       	movw	r4, r10
    2d62:	bb 82       	std	Y+3, r11	; 0x03
    2d64:	aa 82       	std	Y+2, r10	; 0x02
    2d66:	9c 01       	movw	r18, r24
    2d68:	2a 19       	sub	r18, r10
    2d6a:	3b 09       	sbc	r19, r11
    2d6c:	39 8b       	std	Y+17, r19	; 0x11
    2d6e:	28 8b       	std	Y+16, r18	; 0x10
    2d70:	a1 01       	movw	r20, r2
    2d72:	48 5f       	subi	r20, 0xF8	; 248
    2d74:	5f 4f       	sbci	r21, 0xFF	; 255
    2d76:	5b 8b       	std	Y+19, r21	; 0x13
    2d78:	4a 8b       	std	Y+18, r20	; 0x12
    2d7a:	e8 89       	ldd	r30, Y+16	; 0x10
    2d7c:	f9 89       	ldd	r31, Y+17	; 0x11
    2d7e:	e4 0d       	add	r30, r4
    2d80:	f5 1d       	adc	r31, r5
    2d82:	ea 52       	subi	r30, 0x2A	; 42
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	54 91       	lpm	r21, Z
    2d88:	58 87       	std	Y+8, r21	; 0x08
    2d8a:	3d 82       	std	Y+5, r3	; 0x05
    2d8c:	2c 82       	std	Y+4, r2	; 0x04
    2d8e:	61 01       	movw	r12, r2
    2d90:	88 85       	ldd	r24, Y+8	; 0x08
    2d92:	80 ff       	sbrs	r24, 0
    2d94:	13 c0       	rjmp	.+38     	; 0x2dbc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x142>
    2d96:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d98:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d9a:	ed 91       	ld	r30, X+
    2d9c:	fc 91       	ld	r31, X
    2d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2da0:	b1 30       	cpi	r27, 0x01	; 1
    2da2:	31 f4       	brne	.+12     	; 0x2db0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x136>
    2da4:	04 84       	ldd	r0, Z+12	; 0x0c
    2da6:	f5 85       	ldd	r31, Z+13	; 0x0d
    2da8:	e0 2d       	mov	r30, r0
    2daa:	2e 81       	ldd	r18, Y+6	; 0x06
    2dac:	3f 81       	ldd	r19, Y+7	; 0x07
    2dae:	16 c0       	rjmp	.+44     	; 0x2ddc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
    2db0:	06 84       	ldd	r0, Z+14	; 0x0e
    2db2:	f7 85       	ldd	r31, Z+15	; 0x0f
    2db4:	e0 2d       	mov	r30, r0
    2db6:	ee 80       	ldd	r14, Y+6	; 0x06
    2db8:	ff 80       	ldd	r15, Y+7	; 0x07
    2dba:	1a c0       	rjmp	.+52     	; 0x2df0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
    2dbc:	ee 81       	ldd	r30, Y+6	; 0x06
    2dbe:	ff 81       	ldd	r31, Y+7	; 0x07
    2dc0:	e6 15       	cp	r30, r6
    2dc2:	f7 05       	cpc	r31, r7
    2dc4:	f1 f0       	breq	.+60     	; 0x2e02 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2dc6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2dc8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2dca:	ed 91       	ld	r30, X+
    2dcc:	fc 91       	ld	r31, X
    2dce:	b9 81       	ldd	r27, Y+1	; 0x01
    2dd0:	b1 30       	cpi	r27, 0x01	; 1
    2dd2:	51 f4       	brne	.+20     	; 0x2de8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16e>
    2dd4:	04 84       	ldd	r0, Z+12	; 0x0c
    2dd6:	f5 85       	ldd	r31, Z+13	; 0x0d
    2dd8:	e0 2d       	mov	r30, r0
    2dda:	93 01       	movw	r18, r6
    2ddc:	a6 01       	movw	r20, r12
    2dde:	b2 01       	movw	r22, r4
    2de0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2de2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2de4:	09 95       	icall
    2de6:	0d c0       	rjmp	.+26     	; 0x2e02 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2de8:	06 84       	ldd	r0, Z+14	; 0x0e
    2dea:	f7 85       	ldd	r31, Z+15	; 0x0f
    2dec:	e0 2d       	mov	r30, r0
    2dee:	73 01       	movw	r14, r6
    2df0:	84 01       	movw	r16, r8
    2df2:	94 01       	movw	r18, r8
    2df4:	4c 81       	ldd	r20, Y+4	; 0x04
    2df6:	5d 81       	ldd	r21, Y+5	; 0x05
    2df8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dfa:	7b 81       	ldd	r23, Y+3	; 0x03
    2dfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e00:	09 95       	icall
    2e02:	e8 85       	ldd	r30, Y+8	; 0x08
    2e04:	e6 95       	lsr	r30
    2e06:	e8 87       	std	Y+8, r30	; 0x08
    2e08:	2c 81       	ldd	r18, Y+4	; 0x04
    2e0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2e0c:	28 0d       	add	r18, r8
    2e0e:	39 1d       	adc	r19, r9
    2e10:	3d 83       	std	Y+5, r19	; 0x05
    2e12:	2c 83       	std	Y+4, r18	; 0x04
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	c3 1a       	sub	r12, r19
    2e18:	d3 0a       	sbc	r13, r19
    2e1a:	4a 89       	ldd	r20, Y+18	; 0x12
    2e1c:	5b 89       	ldd	r21, Y+19	; 0x13
    2e1e:	c4 16       	cp	r12, r20
    2e20:	d5 06       	cpc	r13, r21
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ac>
    2e24:	b5 cf       	rjmp	.-150    	; 0x2d90 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x116>
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	88 0d       	add	r24, r8
    2e2c:	99 1d       	adc	r25, r9
    2e2e:	9b 83       	std	Y+3, r25	; 0x03
    2e30:	8a 83       	std	Y+2, r24	; 0x02
    2e32:	9f ef       	ldi	r25, 0xFF	; 255
    2e34:	49 1a       	sub	r4, r25
    2e36:	59 0a       	sbc	r5, r25
    2e38:	ae 85       	ldd	r26, Y+14	; 0x0e
    2e3a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2e3c:	4a 16       	cp	r4, r26
    2e3e:	5b 06       	cpc	r5, r27
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ca>
    2e42:	9b cf       	rjmp	.-202    	; 0x2d7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x100>
    2e44:	ee 81       	ldd	r30, Y+6	; 0x06
    2e46:	ff 81       	ldd	r31, Y+7	; 0x07
    2e48:	e6 15       	cp	r30, r6
    2e4a:	f7 05       	cpc	r31, r7
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
    2e4e:	f4 c0       	rjmp	.+488    	; 0x3038 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2e50:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e52:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2e54:	a0 81       	ld	r26, Z
    2e56:	b1 81       	ldd	r27, Z+1	; 0x01
    2e58:	f9 81       	ldd	r31, Y+1	; 0x01
    2e5a:	f1 30       	cpi	r31, 0x01	; 1
    2e5c:	79 f4       	brne	.+30     	; 0x2e7c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
    2e5e:	b5 01       	movw	r22, r10
    2e60:	6b 5f       	subi	r22, 0xFB	; 251
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	50 96       	adiw	r26, 0x10	; 16
    2e66:	ed 91       	ld	r30, X+
    2e68:	fc 91       	ld	r31, X
    2e6a:	51 97       	sbiw	r26, 0x11	; 17
    2e6c:	83 01       	movw	r16, r6
    2e6e:	28 e0       	ldi	r18, 0x08	; 8
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	a1 01       	movw	r20, r2
    2e74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e76:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e78:	09 95       	icall
    2e7a:	de c0       	rjmp	.+444    	; 0x3038 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2e7c:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e7e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e80:	68 19       	sub	r22, r8
    2e82:	79 09       	sbc	r23, r9
    2e84:	1e 96       	adiw	r26, 0x0e	; 14
    2e86:	ed 91       	ld	r30, X+
    2e88:	fc 91       	ld	r31, X
    2e8a:	1f 97       	sbiw	r26, 0x0f	; 15
    2e8c:	73 01       	movw	r14, r6
    2e8e:	0c 85       	ldd	r16, Y+12	; 0x0c
    2e90:	1d 85       	ldd	r17, Y+13	; 0x0d
    2e92:	94 01       	movw	r18, r8
    2e94:	a1 01       	movw	r20, r2
    2e96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e9a:	09 95       	icall
    2e9c:	cd c0       	rjmp	.+410    	; 0x3038 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2e9e:	f9 01       	movw	r30, r18
    2ea0:	34 96       	adiw	r30, 0x04	; 4
    2ea2:	e4 91       	lpm	r30, Z
    2ea4:	de 1a       	sub	r13, r30
    2ea6:	f9 01       	movw	r30, r18
    2ea8:	32 96       	adiw	r30, 0x02	; 2
    2eaa:	85 91       	lpm	r24, Z+
    2eac:	94 91       	lpm	r25, Z
    2eae:	b7 e0       	ldi	r27, 0x07	; 7
    2eb0:	db 9e       	mul	r13, r27
    2eb2:	80 0d       	add	r24, r0
    2eb4:	91 1d       	adc	r25, r1
    2eb6:	11 24       	eor	r1, r1
    2eb8:	f9 01       	movw	r30, r18
    2eba:	25 91       	lpm	r18, Z+
    2ebc:	34 91       	lpm	r19, Z
    2ebe:	3b 8b       	std	Y+19, r19	; 0x13
    2ec0:	2a 8b       	std	Y+18, r18	; 0x12
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	25 91       	lpm	r18, Z+
    2ec6:	34 91       	lpm	r19, Z
    2ec8:	29 01       	movw	r4, r18
    2eca:	fc 01       	movw	r30, r24
    2ecc:	32 96       	adiw	r30, 0x02	; 2
    2ece:	c4 90       	lpm	r12, Z
    2ed0:	31 96       	adiw	r30, 0x01	; 1
    2ed2:	34 91       	lpm	r19, Z
    2ed4:	3c 87       	std	Y+12, r19	; 0x0c
    2ed6:	32 96       	adiw	r30, 0x02	; 2
    2ed8:	14 91       	lpm	r17, Z
    2eda:	31 96       	adiw	r30, 0x01	; 1
    2edc:	d4 90       	lpm	r13, Z
    2ede:	49 81       	ldd	r20, Y+1	; 0x01
    2ee0:	42 30       	cpi	r20, 0x02	; 2
    2ee2:	58 f0       	brcs	.+22     	; 0x2efa <_ZN12Adafruit_GFX8drawCharEiihjjh+0x280>
    2ee4:	61 2e       	mov	r6, r17
    2ee6:	01 2e       	mov	r0, r17
    2ee8:	00 0c       	add	r0, r0
    2eea:	77 08       	sbc	r7, r7
    2eec:	8d 2d       	mov	r24, r13
    2eee:	0d 2c       	mov	r0, r13
    2ef0:	00 0c       	add	r0, r0
    2ef2:	99 0b       	sbc	r25, r25
    2ef4:	99 87       	std	Y+9, r25	; 0x09
    2ef6:	88 87       	std	Y+8, r24	; 0x08
    2ef8:	04 c0       	rjmp	.+8      	; 0x2f02 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x288>
    2efa:	19 86       	std	Y+9, r1	; 0x09
    2efc:	18 86       	std	Y+8, r1	; 0x08
    2efe:	61 2c       	mov	r6, r1
    2f00:	71 2c       	mov	r7, r1
    2f02:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2f04:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2f06:	ed 91       	ld	r30, X+
    2f08:	fc 91       	ld	r31, X
    2f0a:	11 97       	sbiw	r26, 0x01	; 1
    2f0c:	02 84       	ldd	r0, Z+10	; 0x0a
    2f0e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f10:	e0 2d       	mov	r30, r0
    2f12:	cd 01       	movw	r24, r26
    2f14:	09 95       	icall
    2f16:	b9 81       	ldd	r27, Y+1	; 0x01
    2f18:	8b 2e       	mov	r8, r27
    2f1a:	91 2c       	mov	r9, r1
    2f1c:	68 9c       	mul	r6, r8
    2f1e:	c0 01       	movw	r24, r0
    2f20:	69 9c       	mul	r6, r9
    2f22:	90 0d       	add	r25, r0
    2f24:	78 9c       	mul	r7, r8
    2f26:	90 0d       	add	r25, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	ea 0d       	add	r30, r10
    2f2e:	fb 1d       	adc	r31, r11
    2f30:	f9 8b       	std	Y+17, r31	; 0x11
    2f32:	e8 8b       	std	Y+16, r30	; 0x10
    2f34:	1a 82       	std	Y+2, r1	; 0x02
    2f36:	71 2c       	mov	r7, r1
    2f38:	61 2c       	mov	r6, r1
    2f3a:	e1 2f       	mov	r30, r17
    2f3c:	11 0f       	add	r17, r17
    2f3e:	ff 0b       	sbc	r31, r31
    2f40:	95 01       	movw	r18, r10
    2f42:	2e 0f       	add	r18, r30
    2f44:	3f 1f       	adc	r19, r31
    2f46:	3b 87       	std	Y+11, r19	; 0x0b
    2f48:	2a 87       	std	Y+10, r18	; 0x0a
    2f4a:	ac 0c       	add	r10, r12
    2f4c:	b1 1c       	adc	r11, r1
    2f4e:	a5 01       	movw	r20, r10
    2f50:	4e 0f       	add	r20, r30
    2f52:	5f 1f       	adc	r21, r31
    2f54:	5f 8b       	std	Y+23, r21	; 0x17
    2f56:	4e 8b       	std	Y+22, r20	; 0x16
    2f58:	c1 01       	movw	r24, r2
    2f5a:	8d 0d       	add	r24, r13
    2f5c:	91 1d       	adc	r25, r1
    2f5e:	d7 fc       	sbrc	r13, 7
    2f60:	9a 95       	dec	r25
    2f62:	99 8f       	std	Y+25, r25	; 0x19
    2f64:	88 8f       	std	Y+24, r24	; 0x18
    2f66:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f68:	69 16       	cp	r6, r25
    2f6a:	08 f0       	brcs	.+2      	; 0x2f6e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2f4>
    2f6c:	65 c0       	rjmp	.+202    	; 0x3038 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2f6e:	86 2d       	mov	r24, r6
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	48 85       	ldd	r20, Y+8	; 0x08
    2f74:	59 85       	ldd	r21, Y+9	; 0x09
    2f76:	48 0f       	add	r20, r24
    2f78:	59 1f       	adc	r21, r25
    2f7a:	48 9d       	mul	r20, r8
    2f7c:	90 01       	movw	r18, r0
    2f7e:	49 9d       	mul	r20, r9
    2f80:	30 0d       	add	r19, r0
    2f82:	58 9d       	mul	r21, r8
    2f84:	30 0d       	add	r19, r0
    2f86:	11 24       	eor	r1, r1
    2f88:	d1 01       	movw	r26, r2
    2f8a:	a2 0f       	add	r26, r18
    2f8c:	b3 1f       	adc	r27, r19
    2f8e:	bf 87       	std	Y+15, r27	; 0x0f
    2f90:	ae 87       	std	Y+14, r26	; 0x0e
    2f92:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f94:	bb 84       	ldd	r11, Y+11	; 0x0b
    2f96:	e8 89       	ldd	r30, Y+16	; 0x10
    2f98:	f9 89       	ldd	r31, Y+17	; 0x11
    2f9a:	fd 83       	std	Y+5, r31	; 0x05
    2f9c:	ec 83       	std	Y+4, r30	; 0x04
    2f9e:	da 80       	ldd	r13, Y+2	; 0x02
    2fa0:	fa 85       	ldd	r31, Y+10	; 0x0a
    2fa2:	df 1a       	sub	r13, r31
    2fa4:	28 8d       	ldd	r18, Y+24	; 0x18
    2fa6:	39 8d       	ldd	r19, Y+25	; 0x19
    2fa8:	28 0f       	add	r18, r24
    2faa:	39 1f       	adc	r19, r25
    2fac:	3d 8b       	std	Y+21, r19	; 0x15
    2fae:	2c 8b       	std	Y+20, r18	; 0x14
    2fb0:	8d 2d       	mov	r24, r13
    2fb2:	8a 0d       	add	r24, r10
    2fb4:	4e 89       	ldd	r20, Y+22	; 0x16
    2fb6:	5f 89       	ldd	r21, Y+23	; 0x17
    2fb8:	a4 16       	cp	r10, r20
    2fba:	b5 06       	cpc	r11, r21
    2fbc:	c1 f1       	breq	.+112    	; 0x302e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b4>
    2fbe:	87 70       	andi	r24, 0x07	; 7
    2fc0:	41 f4       	brne	.+16     	; 0x2fd2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x358>
    2fc2:	c2 01       	movw	r24, r4
    2fc4:	01 96       	adiw	r24, 0x01	; 1
    2fc6:	ea 89       	ldd	r30, Y+18	; 0x12
    2fc8:	fb 89       	ldd	r31, Y+19	; 0x13
    2fca:	e4 0d       	add	r30, r4
    2fcc:	f5 1d       	adc	r31, r5
    2fce:	74 90       	lpm	r7, Z
    2fd0:	2c 01       	movw	r4, r24
    2fd2:	77 fe       	sbrs	r7, 7
    2fd4:	21 c0       	rjmp	.+66     	; 0x3018 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2fd6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2fd8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2fda:	ed 91       	ld	r30, X+
    2fdc:	fc 91       	ld	r31, X
    2fde:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe0:	b1 30       	cpi	r27, 0x01	; 1
    2fe2:	61 f4       	brne	.+24     	; 0x2ffc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x382>
    2fe4:	04 84       	ldd	r0, Z+12	; 0x0c
    2fe6:	f5 85       	ldd	r31, Z+13	; 0x0d
    2fe8:	e0 2d       	mov	r30, r0
    2fea:	2e 81       	ldd	r18, Y+6	; 0x06
    2fec:	3f 81       	ldd	r19, Y+7	; 0x07
    2fee:	4c 89       	ldd	r20, Y+20	; 0x14
    2ff0:	5d 89       	ldd	r21, Y+21	; 0x15
    2ff2:	b5 01       	movw	r22, r10
    2ff4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ff6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ff8:	09 95       	icall
    2ffa:	0e c0       	rjmp	.+28     	; 0x3018 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2ffc:	06 84       	ldd	r0, Z+14	; 0x0e
    2ffe:	f7 85       	ldd	r31, Z+15	; 0x0f
    3000:	e0 2d       	mov	r30, r0
    3002:	ee 80       	ldd	r14, Y+6	; 0x06
    3004:	ff 80       	ldd	r15, Y+7	; 0x07
    3006:	84 01       	movw	r16, r8
    3008:	94 01       	movw	r18, r8
    300a:	4e 85       	ldd	r20, Y+14	; 0x0e
    300c:	5f 85       	ldd	r21, Y+15	; 0x0f
    300e:	6c 81       	ldd	r22, Y+4	; 0x04
    3010:	7d 81       	ldd	r23, Y+5	; 0x05
    3012:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3014:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3016:	09 95       	icall
    3018:	77 0c       	add	r7, r7
    301a:	ec 81       	ldd	r30, Y+4	; 0x04
    301c:	fd 81       	ldd	r31, Y+5	; 0x05
    301e:	e8 0d       	add	r30, r8
    3020:	f9 1d       	adc	r31, r9
    3022:	fd 83       	std	Y+5, r31	; 0x05
    3024:	ec 83       	std	Y+4, r30	; 0x04
    3026:	ff ef       	ldi	r31, 0xFF	; 255
    3028:	af 1a       	sub	r10, r31
    302a:	bf 0a       	sbc	r11, r31
    302c:	c1 cf       	rjmp	.-126    	; 0x2fb0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x336>
    302e:	2a 81       	ldd	r18, Y+2	; 0x02
    3030:	2c 0d       	add	r18, r12
    3032:	2a 83       	std	Y+2, r18	; 0x02
    3034:	63 94       	inc	r6
    3036:	97 cf       	rjmp	.-210    	; 0x2f66 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ec>
    3038:	aa 8d       	ldd	r26, Y+26	; 0x1a
    303a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    303c:	ed 91       	ld	r30, X+
    303e:	fc 91       	ld	r31, X
    3040:	11 97       	sbiw	r26, 0x01	; 1
    3042:	06 88       	ldd	r0, Z+22	; 0x16
    3044:	f7 89       	ldd	r31, Z+23	; 0x17
    3046:	e0 2d       	mov	r30, r0
    3048:	cd 01       	movw	r24, r26
    304a:	6b 96       	adiw	r28, 0x1b	; 27
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	bf 90       	pop	r11
    3068:	af 90       	pop	r10
    306a:	9f 90       	pop	r9
    306c:	8f 90       	pop	r8
    306e:	7f 90       	pop	r7
    3070:	6f 90       	pop	r6
    3072:	5f 90       	pop	r5
    3074:	4f 90       	pop	r4
    3076:	3f 90       	pop	r3
    3078:	2f 90       	pop	r2
    307a:	09 94       	ijmp
    307c:	6b 96       	adiw	r28, 0x1b	; 27
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	7f 90       	pop	r7
    30a2:	6f 90       	pop	r6
    30a4:	5f 90       	pop	r5
    30a6:	4f 90       	pop	r4
    30a8:	3f 90       	pop	r3
    30aa:	2f 90       	pop	r2
    30ac:	08 95       	ret

000030ae <_ZN12Adafruit_GFX5writeEh>:
    30ae:	af 92       	push	r10
    30b0:	bf 92       	push	r11
    30b2:	cf 92       	push	r12
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    30c0:	ec 01       	movw	r28, r24
    30c2:	26 2f       	mov	r18, r22
    30c4:	88 8d       	ldd	r24, Y+24	; 0x18
    30c6:	99 8d       	ldd	r25, Y+25	; 0x19
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	09 f0       	breq	.+2      	; 0x30ce <_ZN12Adafruit_GFX5writeEh+0x20>
    30cc:	40 c0       	rjmp	.+128    	; 0x314e <_ZN12Adafruit_GFX5writeEh+0xa0>
    30ce:	6a 30       	cpi	r22, 0x0A	; 10
    30d0:	59 f4       	brne	.+22     	; 0x30e8 <_ZN12Adafruit_GFX5writeEh+0x3a>
    30d2:	1d 86       	std	Y+13, r1	; 0x0d
    30d4:	1c 86       	std	Y+12, r1	; 0x0c
    30d6:	2c 89       	ldd	r18, Y+20	; 0x14
    30d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    30da:	9f 85       	ldd	r25, Y+15	; 0x0f
    30dc:	38 e0       	ldi	r19, 0x08	; 8
    30de:	23 9f       	mul	r18, r19
    30e0:	80 0d       	add	r24, r0
    30e2:	91 1d       	adc	r25, r1
    30e4:	11 24       	eor	r1, r1
    30e6:	41 c0       	rjmp	.+130    	; 0x316a <_ZN12Adafruit_GFX5writeEh+0xbc>
    30e8:	6d 30       	cpi	r22, 0x0D	; 13
    30ea:	09 f4       	brne	.+2      	; 0x30ee <_ZN12Adafruit_GFX5writeEh+0x40>
    30ec:	aa c0       	rjmp	.+340    	; 0x3242 <_ZN12Adafruit_GFX5writeEh+0x194>
    30ee:	8e 89       	ldd	r24, Y+22	; 0x16
    30f0:	88 23       	and	r24, r24
    30f2:	c1 f0       	breq	.+48     	; 0x3124 <_ZN12Adafruit_GFX5writeEh+0x76>
    30f4:	3c 89       	ldd	r19, Y+20	; 0x14
    30f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    30f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    30fa:	46 e0       	ldi	r20, 0x06	; 6
    30fc:	34 9f       	mul	r19, r20
    30fe:	80 0d       	add	r24, r0
    3100:	91 1d       	adc	r25, r1
    3102:	11 24       	eor	r1, r1
    3104:	48 85       	ldd	r20, Y+8	; 0x08
    3106:	59 85       	ldd	r21, Y+9	; 0x09
    3108:	48 17       	cp	r20, r24
    310a:	59 07       	cpc	r21, r25
    310c:	5c f4       	brge	.+22     	; 0x3124 <_ZN12Adafruit_GFX5writeEh+0x76>
    310e:	1d 86       	std	Y+13, r1	; 0x0d
    3110:	1c 86       	std	Y+12, r1	; 0x0c
    3112:	8e 85       	ldd	r24, Y+14	; 0x0e
    3114:	9f 85       	ldd	r25, Y+15	; 0x0f
    3116:	48 e0       	ldi	r20, 0x08	; 8
    3118:	34 9f       	mul	r19, r20
    311a:	80 0d       	add	r24, r0
    311c:	91 1d       	adc	r25, r1
    311e:	11 24       	eor	r1, r1
    3120:	9f 87       	std	Y+15, r25	; 0x0f
    3122:	8e 87       	std	Y+14, r24	; 0x0e
    3124:	ea 88       	ldd	r14, Y+18	; 0x12
    3126:	fb 88       	ldd	r15, Y+19	; 0x13
    3128:	08 89       	ldd	r16, Y+16	; 0x10
    312a:	19 89       	ldd	r17, Y+17	; 0x11
    312c:	4e 85       	ldd	r20, Y+14	; 0x0e
    312e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3130:	6c 85       	ldd	r22, Y+12	; 0x0c
    3132:	7d 85       	ldd	r23, Y+13	; 0x0d
    3134:	cc 88       	ldd	r12, Y+20	; 0x14
    3136:	ce 01       	movw	r24, r28
    3138:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZN12Adafruit_GFX8drawCharEiihjjh>
    313c:	2c 89       	ldd	r18, Y+20	; 0x14
    313e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3140:	9d 85       	ldd	r25, Y+13	; 0x0d
    3142:	36 e0       	ldi	r19, 0x06	; 6
    3144:	23 9f       	mul	r18, r19
    3146:	80 0d       	add	r24, r0
    3148:	91 1d       	adc	r25, r1
    314a:	11 24       	eor	r1, r1
    314c:	42 c0       	rjmp	.+132    	; 0x31d2 <_ZN12Adafruit_GFX5writeEh+0x124>
    314e:	6a 30       	cpi	r22, 0x0A	; 10
    3150:	79 f4       	brne	.+30     	; 0x3170 <_ZN12Adafruit_GFX5writeEh+0xc2>
    3152:	1d 86       	std	Y+13, r1	; 0x0d
    3154:	1c 86       	std	Y+12, r1	; 0x0c
    3156:	2c 89       	ldd	r18, Y+20	; 0x14
    3158:	fc 01       	movw	r30, r24
    315a:	36 96       	adiw	r30, 0x06	; 6
    315c:	e4 91       	lpm	r30, Z
    315e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3160:	9f 85       	ldd	r25, Y+15	; 0x0f
    3162:	2e 9f       	mul	r18, r30
    3164:	80 0d       	add	r24, r0
    3166:	91 1d       	adc	r25, r1
    3168:	11 24       	eor	r1, r1
    316a:	9f 87       	std	Y+15, r25	; 0x0f
    316c:	8e 87       	std	Y+14, r24	; 0x0e
    316e:	69 c0       	rjmp	.+210    	; 0x3242 <_ZN12Adafruit_GFX5writeEh+0x194>
    3170:	6d 30       	cpi	r22, 0x0D	; 13
    3172:	09 f4       	brne	.+2      	; 0x3176 <_ZN12Adafruit_GFX5writeEh+0xc8>
    3174:	66 c0       	rjmp	.+204    	; 0x3242 <_ZN12Adafruit_GFX5writeEh+0x194>
    3176:	fc 01       	movw	r30, r24
    3178:	34 96       	adiw	r30, 0x04	; 4
    317a:	34 91       	lpm	r19, Z
    317c:	63 17       	cp	r22, r19
    317e:	08 f4       	brcc	.+2      	; 0x3182 <_ZN12Adafruit_GFX5writeEh+0xd4>
    3180:	60 c0       	rjmp	.+192    	; 0x3242 <_ZN12Adafruit_GFX5writeEh+0x194>
    3182:	31 96       	adiw	r30, 0x01	; 1
    3184:	e4 91       	lpm	r30, Z
    3186:	e6 17       	cp	r30, r22
    3188:	08 f4       	brcc	.+2      	; 0x318c <_ZN12Adafruit_GFX5writeEh+0xde>
    318a:	5b c0       	rjmp	.+182    	; 0x3242 <_ZN12Adafruit_GFX5writeEh+0x194>
    318c:	fc 01       	movw	r30, r24
    318e:	32 96       	adiw	r30, 0x02	; 2
    3190:	65 91       	lpm	r22, Z+
    3192:	74 91       	lpm	r23, Z
    3194:	42 2f       	mov	r20, r18
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	43 1b       	sub	r20, r19
    319a:	51 09       	sbc	r21, r1
    319c:	37 e0       	ldi	r19, 0x07	; 7
    319e:	34 9f       	mul	r19, r20
    31a0:	50 01       	movw	r10, r0
    31a2:	35 9f       	mul	r19, r21
    31a4:	b0 0c       	add	r11, r0
    31a6:	11 24       	eor	r1, r1
    31a8:	a6 0e       	add	r10, r22
    31aa:	b7 1e       	adc	r11, r23
    31ac:	f5 01       	movw	r30, r10
    31ae:	32 96       	adiw	r30, 0x02	; 2
    31b0:	34 91       	lpm	r19, Z
    31b2:	31 96       	adiw	r30, 0x01	; 1
    31b4:	e4 91       	lpm	r30, Z
    31b6:	33 23       	and	r19, r19
    31b8:	11 f0       	breq	.+4      	; 0x31be <_ZN12Adafruit_GFX5writeEh+0x110>
    31ba:	e1 11       	cpse	r30, r1
    31bc:	0d c0       	rjmp	.+26     	; 0x31d8 <_ZN12Adafruit_GFX5writeEh+0x12a>
    31be:	f5 01       	movw	r30, r10
    31c0:	34 96       	adiw	r30, 0x04	; 4
    31c2:	e4 91       	lpm	r30, Z
    31c4:	2c 89       	ldd	r18, Y+20	; 0x14
    31c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    31c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    31ca:	e2 9f       	mul	r30, r18
    31cc:	80 0d       	add	r24, r0
    31ce:	91 1d       	adc	r25, r1
    31d0:	11 24       	eor	r1, r1
    31d2:	9d 87       	std	Y+13, r25	; 0x0d
    31d4:	8c 87       	std	Y+12, r24	; 0x0c
    31d6:	35 c0       	rjmp	.+106    	; 0x3242 <_ZN12Adafruit_GFX5writeEh+0x194>
    31d8:	f5 01       	movw	r30, r10
    31da:	35 96       	adiw	r30, 0x05	; 5
    31dc:	44 91       	lpm	r20, Z
    31de:	5e 89       	ldd	r21, Y+22	; 0x16
    31e0:	55 23       	and	r21, r21
    31e2:	11 f1       	breq	.+68     	; 0x3228 <_ZN12Adafruit_GFX5writeEh+0x17a>
    31e4:	6c 89       	ldd	r22, Y+20	; 0x14
    31e6:	e3 2f       	mov	r30, r19
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	e4 0f       	add	r30, r20
    31ec:	f1 1d       	adc	r31, r1
    31ee:	47 fd       	sbrc	r20, 7
    31f0:	fa 95       	dec	r31
    31f2:	6e 9f       	mul	r22, r30
    31f4:	d0 01       	movw	r26, r0
    31f6:	6f 9f       	mul	r22, r31
    31f8:	b0 0d       	add	r27, r0
    31fa:	11 24       	eor	r1, r1
    31fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    31fe:	5d 85       	ldd	r21, Y+13	; 0x0d
    3200:	4a 0f       	add	r20, r26
    3202:	5b 1f       	adc	r21, r27
    3204:	e8 85       	ldd	r30, Y+8	; 0x08
    3206:	f9 85       	ldd	r31, Y+9	; 0x09
    3208:	e4 17       	cp	r30, r20
    320a:	f5 07       	cpc	r31, r21
    320c:	6c f4       	brge	.+26     	; 0x3228 <_ZN12Adafruit_GFX5writeEh+0x17a>
    320e:	1d 86       	std	Y+13, r1	; 0x0d
    3210:	1c 86       	std	Y+12, r1	; 0x0c
    3212:	fc 01       	movw	r30, r24
    3214:	36 96       	adiw	r30, 0x06	; 6
    3216:	e4 91       	lpm	r30, Z
    3218:	8e 85       	ldd	r24, Y+14	; 0x0e
    321a:	9f 85       	ldd	r25, Y+15	; 0x0f
    321c:	6e 9f       	mul	r22, r30
    321e:	80 0d       	add	r24, r0
    3220:	91 1d       	adc	r25, r1
    3222:	11 24       	eor	r1, r1
    3224:	9f 87       	std	Y+15, r25	; 0x0f
    3226:	8e 87       	std	Y+14, r24	; 0x0e
    3228:	ea 88       	ldd	r14, Y+18	; 0x12
    322a:	fb 88       	ldd	r15, Y+19	; 0x13
    322c:	08 89       	ldd	r16, Y+16	; 0x10
    322e:	19 89       	ldd	r17, Y+17	; 0x11
    3230:	4e 85       	ldd	r20, Y+14	; 0x0e
    3232:	5f 85       	ldd	r21, Y+15	; 0x0f
    3234:	6c 85       	ldd	r22, Y+12	; 0x0c
    3236:	7d 85       	ldd	r23, Y+13	; 0x0d
    3238:	cc 88       	ldd	r12, Y+20	; 0x14
    323a:	ce 01       	movw	r24, r28
    323c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZN12Adafruit_GFX8drawCharEiihjjh>
    3240:	be cf       	rjmp	.-132    	; 0x31be <_ZN12Adafruit_GFX5writeEh+0x110>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	cf 90       	pop	r12
    3254:	bf 90       	pop	r11
    3256:	af 90       	pop	r10
    3258:	08 95       	ret

0000325a <_ZN12Adafruit_GFX9setCursorEii>:
    325a:	fc 01       	movw	r30, r24
    325c:	75 87       	std	Z+13, r23	; 0x0d
    325e:	64 87       	std	Z+12, r22	; 0x0c
    3260:	57 87       	std	Z+15, r21	; 0x0f
    3262:	46 87       	std	Z+14, r20	; 0x0e
    3264:	08 95       	ret

00003266 <_ZN12Adafruit_GFX11setTextSizeEh>:
    3266:	61 11       	cpse	r22, r1
    3268:	01 c0       	rjmp	.+2      	; 0x326c <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    326a:	61 e0       	ldi	r22, 0x01	; 1
    326c:	fc 01       	movw	r30, r24
    326e:	64 8b       	std	Z+20, r22	; 0x14
    3270:	08 95       	ret

00003272 <_ZN12Adafruit_GFX12setTextColorEj>:
    3272:	fc 01       	movw	r30, r24
    3274:	73 8b       	std	Z+19, r23	; 0x13
    3276:	62 8b       	std	Z+18, r22	; 0x12
    3278:	71 8b       	std	Z+17, r23	; 0x11
    327a:	60 8b       	std	Z+16, r22	; 0x10
    327c:	08 95       	ret

0000327e <_ZNK12Adafruit_GFX11getRotationEv>:
    327e:	fc 01       	movw	r30, r24
    3280:	85 89       	ldd	r24, Z+21	; 0x15
    3282:	08 95       	ret

00003284 <_ZNK12Adafruit_GFX5widthEv>:
    @returns    Width in pixels
*/
/**************************************************************************/
int16_t Adafruit_GFX::width(void) const {
    return _width;
}
    3284:	fc 01       	movw	r30, r24
    3286:	80 85       	ldd	r24, Z+8	; 0x08
    3288:	91 85       	ldd	r25, Z+9	; 0x09
    328a:	08 95       	ret

0000328c <_ZNK12Adafruit_GFX6heightEv>:
    @returns    Height in pixels
*/
/**************************************************************************/
int16_t Adafruit_GFX::height(void) const {
    return _height;
}
    328c:	fc 01       	movw	r30, r24
    328e:	82 85       	ldd	r24, Z+10	; 0x0a
    3290:	93 85       	ldd	r25, Z+11	; 0x0b
    3292:	08 95       	ret

00003294 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    }
  }
  // the range of contrast to too small to be really useful
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	dc 01       	movw	r26, r24
    329e:	fb 01       	movw	r30, r22
    32a0:	55 96       	adiw	r26, 0x15	; 21
    32a2:	8c 91       	ld	r24, X
    32a4:	55 97       	sbiw	r26, 0x15	; 21
    32a6:	82 30       	cpi	r24, 0x02	; 2
    32a8:	89 f0       	breq	.+34     	; 0x32cc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x38>
    32aa:	83 30       	cpi	r24, 0x03	; 3
    32ac:	21 f1       	breq	.+72     	; 0x32f6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x62>
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x20>
    32b2:	e7 c0       	rjmp	.+462    	; 0x3482 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1ee>
    32b4:	14 96       	adiw	r26, 0x04	; 4
    32b6:	8d 91       	ld	r24, X+
    32b8:	9c 91       	ld	r25, X
    32ba:	15 97       	sbiw	r26, 0x05	; 5
    32bc:	bc 01       	movw	r22, r24
    32be:	64 1b       	sub	r22, r20
    32c0:	75 0b       	sbc	r23, r21
    32c2:	ab 01       	movw	r20, r22
    32c4:	41 50       	subi	r20, 0x01	; 1
    32c6:	51 09       	sbc	r21, r1
    32c8:	bf 01       	movw	r22, r30
    32ca:	1d c0       	rjmp	.+58     	; 0x3306 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x72>
    32cc:	14 96       	adiw	r26, 0x04	; 4
    32ce:	6d 91       	ld	r22, X+
    32d0:	7c 91       	ld	r23, X
    32d2:	15 97       	sbiw	r26, 0x05	; 5
    32d4:	cb 01       	movw	r24, r22
    32d6:	8e 1b       	sub	r24, r30
    32d8:	9f 0b       	sbc	r25, r31
    32da:	fc 01       	movw	r30, r24
    32dc:	16 96       	adiw	r26, 0x06	; 6
    32de:	8d 91       	ld	r24, X+
    32e0:	9c 91       	ld	r25, X
    32e2:	17 97       	sbiw	r26, 0x07	; 7
    32e4:	bc 01       	movw	r22, r24
    32e6:	64 1b       	sub	r22, r20
    32e8:	75 0b       	sbc	r23, r21
    32ea:	ab 01       	movw	r20, r22
    32ec:	41 50       	subi	r20, 0x01	; 1
    32ee:	51 09       	sbc	r21, r1
    32f0:	e2 1b       	sub	r30, r18
    32f2:	f3 0b       	sbc	r31, r19
    32f4:	c6 c0       	rjmp	.+396    	; 0x3482 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1ee>
    32f6:	16 96       	adiw	r26, 0x06	; 6
    32f8:	6d 91       	ld	r22, X+
    32fa:	7c 91       	ld	r23, X
    32fc:	17 97       	sbiw	r26, 0x07	; 7
    32fe:	6e 1b       	sub	r22, r30
    3300:	7f 0b       	sbc	r23, r31
    3302:	62 1b       	sub	r22, r18
    3304:	73 0b       	sbc	r23, r19
    3306:	57 fd       	sbrc	r21, 7
    3308:	1b c1       	rjmp	.+566    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    330a:	14 96       	adiw	r26, 0x04	; 4
    330c:	8d 91       	ld	r24, X+
    330e:	9c 91       	ld	r25, X
    3310:	15 97       	sbiw	r26, 0x05	; 5
    3312:	48 17       	cp	r20, r24
    3314:	59 07       	cpc	r21, r25
    3316:	0c f0       	brlt	.+2      	; 0x331a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x86>
    3318:	13 c1       	rjmp	.+550    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    331a:	77 ff       	sbrs	r23, 7
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x92>
    331e:	26 0f       	add	r18, r22
    3320:	37 1f       	adc	r19, r23
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	16 96       	adiw	r26, 0x06	; 6
    3328:	8d 91       	ld	r24, X+
    332a:	9c 91       	ld	r25, X
    332c:	17 97       	sbiw	r26, 0x07	; 7
    332e:	fb 01       	movw	r30, r22
    3330:	e2 0f       	add	r30, r18
    3332:	f3 1f       	adc	r31, r19
    3334:	8e 17       	cp	r24, r30
    3336:	9f 07       	cpc	r25, r31
    3338:	1c f4       	brge	.+6      	; 0x3340 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xac>
    333a:	9c 01       	movw	r18, r24
    333c:	26 1b       	sub	r18, r22
    333e:	37 0b       	sbc	r19, r23
    3340:	12 16       	cp	r1, r18
    3342:	13 06       	cpc	r1, r19
    3344:	0c f0       	brlt	.+2      	; 0x3348 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xb4>
    3346:	fc c0       	rjmp	.+504    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3348:	a2 2f       	mov	r26, r18
    334a:	86 2f       	mov	r24, r22
    334c:	86 95       	lsr	r24
    334e:	86 95       	lsr	r24
    3350:	86 95       	lsr	r24
    3352:	90 e8       	ldi	r25, 0x80	; 128
    3354:	89 9f       	mul	r24, r25
    3356:	40 0d       	add	r20, r0
    3358:	51 1d       	adc	r21, r1
    335a:	11 24       	eor	r1, r1
    335c:	fa 01       	movw	r30, r20
    335e:	ea 5d       	subi	r30, 0xDA	; 218
    3360:	fe 4f       	sbci	r31, 0xFE	; 254
    3362:	67 70       	andi	r22, 0x07	; 7
    3364:	a9 f1       	breq	.+106    	; 0x33d0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x13c>
    3366:	98 e0       	ldi	r25, 0x08	; 8
    3368:	96 1b       	sub	r25, r22
    336a:	49 2f       	mov	r20, r25
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	ea 01       	movw	r28, r20
    3370:	c2 5e       	subi	r28, 0xE2	; 226
    3372:	de 4f       	sbci	r29, 0xFE	; 254
    3374:	88 81       	ld	r24, Y
    3376:	29 17       	cp	r18, r25
    3378:	90 f4       	brcc	.+36     	; 0x339e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x10a>
    337a:	42 1b       	sub	r20, r18
    337c:	51 09       	sbc	r21, r1
    337e:	2f ef       	ldi	r18, 0xFF	; 255
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf4>
    3384:	35 95       	asr	r19
    3386:	27 95       	ror	r18
    3388:	4a 95       	dec	r20
    338a:	e2 f7       	brpl	.-8      	; 0x3384 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf0>
    338c:	82 23       	and	r24, r18
    338e:	01 30       	cpi	r16, 0x01	; 1
    3390:	11 05       	cpc	r17, r1
    3392:	41 f0       	breq	.+16     	; 0x33a4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x110>
    3394:	68 f0       	brcs	.+26     	; 0x33b0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x11c>
    3396:	02 30       	cpi	r16, 0x02	; 2
    3398:	11 05       	cpc	r17, r1
    339a:	89 f0       	breq	.+34     	; 0x33be <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x12a>
    339c:	d1 c0       	rjmp	.+418    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    339e:	01 30       	cpi	r16, 0x01	; 1
    33a0:	11 05       	cpc	r17, r1
    33a2:	19 f4       	brne	.+6      	; 0x33aa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x116>
    33a4:	20 81       	ld	r18, Z
    33a6:	82 2b       	or	r24, r18
    33a8:	0c c0       	rjmp	.+24     	; 0x33c2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x12e>
    33aa:	01 30       	cpi	r16, 0x01	; 1
    33ac:	11 05       	cpc	r17, r1
    33ae:	20 f4       	brcc	.+8      	; 0x33b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x124>
    33b0:	80 95       	com	r24
    33b2:	20 81       	ld	r18, Z
    33b4:	82 23       	and	r24, r18
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x12e>
    33b8:	02 30       	cpi	r16, 0x02	; 2
    33ba:	11 05       	cpc	r17, r1
    33bc:	31 f4       	brne	.+12     	; 0x33ca <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x136>
    33be:	20 81       	ld	r18, Z
    33c0:	82 27       	eor	r24, r18
    33c2:	80 83       	st	Z, r24
    33c4:	a9 17       	cp	r26, r25
    33c6:	08 f4       	brcc	.+2      	; 0x33ca <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x136>
    33c8:	bb c0       	rjmp	.+374    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    33ca:	a9 1b       	sub	r26, r25
    33cc:	e0 58       	subi	r30, 0x80	; 128
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	a8 30       	cpi	r26, 0x08	; 8
    33d2:	48 f1       	brcs	.+82     	; 0x3426 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x192>
    33d4:	02 30       	cpi	r16, 0x02	; 2
    33d6:	11 05       	cpc	r17, r1
    33d8:	59 f4       	brne	.+22     	; 0x33f0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x15c>
    33da:	ef 01       	movw	r28, r30
    33dc:	8a 2f       	mov	r24, r26
    33de:	98 81       	ld	r25, Y
    33e0:	90 95       	com	r25
    33e2:	98 83       	st	Y, r25
    33e4:	c0 58       	subi	r28, 0x80	; 128
    33e6:	df 4f       	sbci	r29, 0xFF	; 255
    33e8:	88 50       	subi	r24, 0x08	; 8
    33ea:	88 30       	cpi	r24, 0x08	; 8
    33ec:	c0 f7       	brcc	.-16     	; 0x33de <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x14a>
    33ee:	33 c0       	rjmp	.+102    	; 0x3456 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1c2>
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	01 30       	cpi	r16, 0x01	; 1
    33f4:	11 05       	cpc	r17, r1
    33f6:	09 f0       	breq	.+2      	; 0x33fa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x166>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	81 95       	neg	r24
    33fc:	ef 01       	movw	r28, r30
    33fe:	9a 2f       	mov	r25, r26
    3400:	88 83       	st	Y, r24
    3402:	c0 58       	subi	r28, 0x80	; 128
    3404:	df 4f       	sbci	r29, 0xFF	; 255
    3406:	98 50       	subi	r25, 0x08	; 8
    3408:	98 30       	cpi	r25, 0x08	; 8
    340a:	d0 f7       	brcc	.-12     	; 0x3400 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x16c>
    340c:	88 ef       	ldi	r24, 0xF8	; 248
    340e:	8a 0f       	add	r24, r26
    3410:	86 95       	lsr	r24
    3412:	86 95       	lsr	r24
    3414:	86 95       	lsr	r24
    3416:	60 e8       	ldi	r22, 0x80	; 128
    3418:	86 9f       	mul	r24, r22
    341a:	e0 0d       	add	r30, r0
    341c:	f1 1d       	adc	r31, r1
    341e:	11 24       	eor	r1, r1
    3420:	e0 58       	subi	r30, 0x80	; 128
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	a7 70       	andi	r26, 0x07	; 7
    3426:	aa 23       	and	r26, r26
    3428:	09 f4       	brne	.+2      	; 0x342c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x198>
    342a:	8a c0       	rjmp	.+276    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	aa 5e       	subi	r26, 0xEA	; 234
    3430:	be 4f       	sbci	r27, 0xFE	; 254
    3432:	8c 91       	ld	r24, X
    3434:	01 30       	cpi	r16, 0x01	; 1
    3436:	11 05       	cpc	r17, r1
    3438:	31 f0       	breq	.+12     	; 0x3446 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b2>
    343a:	40 f0       	brcs	.+16     	; 0x344c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b8>
    343c:	02 30       	cpi	r16, 0x02	; 2
    343e:	11 05       	cpc	r17, r1
    3440:	09 f0       	breq	.+2      	; 0x3444 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b0>
    3442:	7e c0       	rjmp	.+252    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3444:	1b c0       	rjmp	.+54     	; 0x347c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1e8>
    3446:	90 81       	ld	r25, Z
    3448:	89 2b       	or	r24, r25
    344a:	03 c0       	rjmp	.+6      	; 0x3452 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1be>
    344c:	80 95       	com	r24
    344e:	90 81       	ld	r25, Z
    3450:	89 23       	and	r24, r25
    3452:	80 83       	st	Z, r24
    3454:	75 c0       	rjmp	.+234    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3456:	88 ef       	ldi	r24, 0xF8	; 248
    3458:	8a 0f       	add	r24, r26
    345a:	86 95       	lsr	r24
    345c:	86 95       	lsr	r24
    345e:	86 95       	lsr	r24
    3460:	70 e8       	ldi	r23, 0x80	; 128
    3462:	87 9f       	mul	r24, r23
    3464:	e0 0d       	add	r30, r0
    3466:	f1 1d       	adc	r31, r1
    3468:	11 24       	eor	r1, r1
    346a:	e0 58       	subi	r30, 0x80	; 128
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	a7 70       	andi	r26, 0x07	; 7
    3470:	09 f4       	brne	.+2      	; 0x3474 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1e0>
    3472:	66 c0       	rjmp	.+204    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	aa 5e       	subi	r26, 0xEA	; 234
    3478:	be 4f       	sbci	r27, 0xFE	; 254
    347a:	8c 91       	ld	r24, X
    347c:	90 81       	ld	r25, Z
    347e:	89 27       	eor	r24, r25
    3480:	e8 cf       	rjmp	.-48     	; 0x3452 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1be>
    3482:	57 fd       	sbrc	r21, 7
    3484:	5d c0       	rjmp	.+186    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3486:	16 96       	adiw	r26, 0x06	; 6
    3488:	8d 91       	ld	r24, X+
    348a:	9c 91       	ld	r25, X
    348c:	17 97       	sbiw	r26, 0x07	; 7
    348e:	48 17       	cp	r20, r24
    3490:	59 07       	cpc	r21, r25
    3492:	0c f0       	brlt	.+2      	; 0x3496 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x202>
    3494:	55 c0       	rjmp	.+170    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3496:	f7 ff       	sbrs	r31, 7
    3498:	04 c0       	rjmp	.+8      	; 0x34a2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x20e>
    349a:	2e 0f       	add	r18, r30
    349c:	3f 1f       	adc	r19, r31
    349e:	e0 e0       	ldi	r30, 0x00	; 0
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	14 96       	adiw	r26, 0x04	; 4
    34a4:	8d 91       	ld	r24, X+
    34a6:	9c 91       	ld	r25, X
    34a8:	15 97       	sbiw	r26, 0x05	; 5
    34aa:	bf 01       	movw	r22, r30
    34ac:	62 0f       	add	r22, r18
    34ae:	73 1f       	adc	r23, r19
    34b0:	86 17       	cp	r24, r22
    34b2:	97 07       	cpc	r25, r23
    34b4:	1c f4       	brge	.+6      	; 0x34bc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x228>
    34b6:	9c 01       	movw	r18, r24
    34b8:	2e 1b       	sub	r18, r30
    34ba:	3f 0b       	sbc	r19, r31
    34bc:	12 16       	cp	r1, r18
    34be:	13 06       	cpc	r1, r19
    34c0:	0c f0       	brlt	.+2      	; 0x34c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x230>
    34c2:	3e c0       	rjmp	.+124    	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    34c4:	ca 01       	movw	r24, r20
    34c6:	57 fd       	sbrc	r21, 7
    34c8:	07 96       	adiw	r24, 0x07	; 7
    34ca:	63 e0       	ldi	r22, 0x03	; 3
    34cc:	95 95       	asr	r25
    34ce:	87 95       	ror	r24
    34d0:	6a 95       	dec	r22
    34d2:	e1 f7       	brne	.-8      	; 0x34cc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x238>
    34d4:	96 95       	lsr	r25
    34d6:	98 2f       	mov	r25, r24
    34d8:	88 27       	eor	r24, r24
    34da:	97 95       	ror	r25
    34dc:	87 95       	ror	r24
    34de:	e8 0f       	add	r30, r24
    34e0:	f9 1f       	adc	r31, r25
    34e2:	ea 5d       	subi	r30, 0xDA	; 218
    34e4:	fe 4f       	sbci	r31, 0xFE	; 254
    34e6:	47 70       	andi	r20, 0x07	; 7
    34e8:	55 27       	eor	r21, r21
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	01 c0       	rjmp	.+2      	; 0x34f2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x25e>
    34f0:	88 0f       	add	r24, r24
    34f2:	4a 95       	dec	r20
    34f4:	ea f7       	brpl	.-6      	; 0x34f0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x25c>
    34f6:	48 2f       	mov	r20, r24
    34f8:	01 30       	cpi	r16, 0x01	; 1
    34fa:	11 05       	cpc	r17, r1
    34fc:	39 f0       	breq	.+14     	; 0x350c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x278>
    34fe:	78 f0       	brcs	.+30     	; 0x351e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28a>
    3500:	02 30       	cpi	r16, 0x02	; 2
    3502:	11 05       	cpc	r17, r1
    3504:	e9 f4       	brne	.+58     	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3506:	2e 0f       	add	r18, r30
    3508:	3f 1f       	adc	r19, r31
    350a:	13 c0       	rjmp	.+38     	; 0x3532 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x29e>
    350c:	2e 0f       	add	r18, r30
    350e:	3f 1f       	adc	r19, r31
    3510:	e2 17       	cp	r30, r18
    3512:	f3 07       	cpc	r31, r19
    3514:	a9 f0       	breq	.+42     	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3516:	80 81       	ld	r24, Z
    3518:	84 2b       	or	r24, r20
    351a:	81 93       	st	Z+, r24
    351c:	f9 cf       	rjmp	.-14     	; 0x3510 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x27c>
    351e:	80 95       	com	r24
    3520:	2e 0f       	add	r18, r30
    3522:	3f 1f       	adc	r19, r31
    3524:	e2 17       	cp	r30, r18
    3526:	f3 07       	cpc	r31, r19
    3528:	59 f0       	breq	.+22     	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    352a:	90 81       	ld	r25, Z
    352c:	98 23       	and	r25, r24
    352e:	91 93       	st	Z+, r25
    3530:	f9 cf       	rjmp	.-14     	; 0x3524 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x290>
    3532:	e2 17       	cp	r30, r18
    3534:	f3 07       	cpc	r31, r19
    3536:	21 f0       	breq	.+8      	; 0x3540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    3538:	80 81       	ld	r24, Z
    353a:	84 27       	eor	r24, r20
    353c:	81 93       	st	Z+, r24
    353e:	f9 cf       	rjmp	.-14     	; 0x3532 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x29e>
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	08 95       	ret

0000354a <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	dc 01       	movw	r26, r24
    3554:	55 96       	adiw	r26, 0x15	; 21
    3556:	8c 91       	ld	r24, X
    3558:	55 97       	sbiw	r26, 0x15	; 21
    355a:	82 30       	cpi	r24, 0x02	; 2
    355c:	71 f0       	breq	.+28     	; 0x357a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x30>
    355e:	83 30       	cpi	r24, 0x03	; 3
    3560:	09 f1       	breq	.+66     	; 0x35a4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x5a>
    3562:	81 30       	cpi	r24, 0x01	; 1
    3564:	09 f0       	breq	.+2      	; 0x3568 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e>
    3566:	8c c0       	rjmp	.+280    	; 0x3680 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x136>
    3568:	14 96       	adiw	r26, 0x04	; 4
    356a:	ed 91       	ld	r30, X+
    356c:	fc 91       	ld	r31, X
    356e:	15 97       	sbiw	r26, 0x05	; 5
    3570:	e4 1b       	sub	r30, r20
    3572:	f5 0b       	sbc	r31, r21
    3574:	e2 1b       	sub	r30, r18
    3576:	f3 0b       	sbc	r31, r19
    3578:	20 c0       	rjmp	.+64     	; 0x35ba <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    357a:	14 96       	adiw	r26, 0x04	; 4
    357c:	ed 91       	ld	r30, X+
    357e:	fc 91       	ld	r31, X
    3580:	15 97       	sbiw	r26, 0x05	; 5
    3582:	cf 01       	movw	r24, r30
    3584:	86 1b       	sub	r24, r22
    3586:	97 0b       	sbc	r25, r23
    3588:	bc 01       	movw	r22, r24
    358a:	61 50       	subi	r22, 0x01	; 1
    358c:	71 09       	sbc	r23, r1
    358e:	16 96       	adiw	r26, 0x06	; 6
    3590:	ed 91       	ld	r30, X+
    3592:	fc 91       	ld	r31, X
    3594:	17 97       	sbiw	r26, 0x07	; 7
    3596:	cf 01       	movw	r24, r30
    3598:	84 1b       	sub	r24, r20
    359a:	95 0b       	sbc	r25, r21
    359c:	ac 01       	movw	r20, r24
    359e:	42 1b       	sub	r20, r18
    35a0:	53 0b       	sbc	r21, r19
    35a2:	6e c0       	rjmp	.+220    	; 0x3680 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x136>
    35a4:	16 96       	adiw	r26, 0x06	; 6
    35a6:	ed 91       	ld	r30, X+
    35a8:	fc 91       	ld	r31, X
    35aa:	17 97       	sbiw	r26, 0x07	; 7
    35ac:	cf 01       	movw	r24, r30
    35ae:	86 1b       	sub	r24, r22
    35b0:	97 0b       	sbc	r25, r23
    35b2:	bc 01       	movw	r22, r24
    35b4:	61 50       	subi	r22, 0x01	; 1
    35b6:	71 09       	sbc	r23, r1
    35b8:	fa 01       	movw	r30, r20
    35ba:	77 fd       	sbrc	r23, 7
    35bc:	1b c1       	rjmp	.+566    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    35be:	16 96       	adiw	r26, 0x06	; 6
    35c0:	8d 91       	ld	r24, X+
    35c2:	9c 91       	ld	r25, X
    35c4:	17 97       	sbiw	r26, 0x07	; 7
    35c6:	68 17       	cp	r22, r24
    35c8:	79 07       	cpc	r23, r25
    35ca:	0c f0       	brlt	.+2      	; 0x35ce <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x84>
    35cc:	13 c1       	rjmp	.+550    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    35ce:	f7 ff       	sbrs	r31, 7
    35d0:	04 c0       	rjmp	.+8      	; 0x35da <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x90>
    35d2:	2e 0f       	add	r18, r30
    35d4:	3f 1f       	adc	r19, r31
    35d6:	e0 e0       	ldi	r30, 0x00	; 0
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	14 96       	adiw	r26, 0x04	; 4
    35dc:	8d 91       	ld	r24, X+
    35de:	9c 91       	ld	r25, X
    35e0:	15 97       	sbiw	r26, 0x05	; 5
    35e2:	af 01       	movw	r20, r30
    35e4:	42 0f       	add	r20, r18
    35e6:	53 1f       	adc	r21, r19
    35e8:	84 17       	cp	r24, r20
    35ea:	95 07       	cpc	r25, r21
    35ec:	1c f4       	brge	.+6      	; 0x35f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xaa>
    35ee:	9c 01       	movw	r18, r24
    35f0:	2e 1b       	sub	r18, r30
    35f2:	3f 0b       	sbc	r19, r31
    35f4:	12 16       	cp	r1, r18
    35f6:	13 06       	cpc	r1, r19
    35f8:	0c f0       	brlt	.+2      	; 0x35fc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xb2>
    35fa:	fc c0       	rjmp	.+504    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    35fc:	cb 01       	movw	r24, r22
    35fe:	77 fd       	sbrc	r23, 7
    3600:	07 96       	adiw	r24, 0x07	; 7
    3602:	43 e0       	ldi	r20, 0x03	; 3
    3604:	95 95       	asr	r25
    3606:	87 95       	ror	r24
    3608:	4a 95       	dec	r20
    360a:	e1 f7       	brne	.-8      	; 0x3604 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xba>
    360c:	96 95       	lsr	r25
    360e:	98 2f       	mov	r25, r24
    3610:	88 27       	eor	r24, r24
    3612:	97 95       	ror	r25
    3614:	87 95       	ror	r24
    3616:	e8 0f       	add	r30, r24
    3618:	f9 1f       	adc	r31, r25
    361a:	ea 5d       	subi	r30, 0xDA	; 218
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
    361e:	67 70       	andi	r22, 0x07	; 7
    3620:	77 27       	eor	r23, r23
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	01 c0       	rjmp	.+2      	; 0x362a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xe0>
    3628:	88 0f       	add	r24, r24
    362a:	6a 95       	dec	r22
    362c:	ea f7       	brpl	.-6      	; 0x3628 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xde>
    362e:	48 2f       	mov	r20, r24
    3630:	01 30       	cpi	r16, 0x01	; 1
    3632:	11 05       	cpc	r17, r1
    3634:	41 f0       	breq	.+16     	; 0x3646 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xfc>
    3636:	88 f0       	brcs	.+34     	; 0x365a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x110>
    3638:	02 30       	cpi	r16, 0x02	; 2
    363a:	11 05       	cpc	r17, r1
    363c:	09 f0       	breq	.+2      	; 0x3640 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xf6>
    363e:	da c0       	rjmp	.+436    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3640:	2e 0f       	add	r18, r30
    3642:	3f 1f       	adc	r19, r31
    3644:	15 c0       	rjmp	.+42     	; 0x3670 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x126>
    3646:	2e 0f       	add	r18, r30
    3648:	3f 1f       	adc	r19, r31
    364a:	e2 17       	cp	r30, r18
    364c:	f3 07       	cpc	r31, r19
    364e:	09 f4       	brne	.+2      	; 0x3652 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x108>
    3650:	d1 c0       	rjmp	.+418    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3652:	80 81       	ld	r24, Z
    3654:	84 2b       	or	r24, r20
    3656:	81 93       	st	Z+, r24
    3658:	f8 cf       	rjmp	.-16     	; 0x364a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x100>
    365a:	80 95       	com	r24
    365c:	2e 0f       	add	r18, r30
    365e:	3f 1f       	adc	r19, r31
    3660:	e2 17       	cp	r30, r18
    3662:	f3 07       	cpc	r31, r19
    3664:	09 f4       	brne	.+2      	; 0x3668 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x11e>
    3666:	c6 c0       	rjmp	.+396    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3668:	90 81       	ld	r25, Z
    366a:	98 23       	and	r25, r24
    366c:	91 93       	st	Z+, r25
    366e:	f8 cf       	rjmp	.-16     	; 0x3660 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x116>
    3670:	e2 17       	cp	r30, r18
    3672:	f3 07       	cpc	r31, r19
    3674:	09 f4       	brne	.+2      	; 0x3678 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x12e>
    3676:	be c0       	rjmp	.+380    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3678:	80 81       	ld	r24, Z
    367a:	84 27       	eor	r24, r20
    367c:	81 93       	st	Z+, r24
    367e:	f8 cf       	rjmp	.-16     	; 0x3670 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x126>
    3680:	77 fd       	sbrc	r23, 7
    3682:	b8 c0       	rjmp	.+368    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3684:	14 96       	adiw	r26, 0x04	; 4
    3686:	8d 91       	ld	r24, X+
    3688:	9c 91       	ld	r25, X
    368a:	15 97       	sbiw	r26, 0x05	; 5
    368c:	68 17       	cp	r22, r24
    368e:	79 07       	cpc	r23, r25
    3690:	0c f0       	brlt	.+2      	; 0x3694 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x14a>
    3692:	b0 c0       	rjmp	.+352    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3694:	57 ff       	sbrs	r21, 7
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x156>
    3698:	24 0f       	add	r18, r20
    369a:	35 1f       	adc	r19, r21
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	16 96       	adiw	r26, 0x06	; 6
    36a2:	8d 91       	ld	r24, X+
    36a4:	9c 91       	ld	r25, X
    36a6:	17 97       	sbiw	r26, 0x07	; 7
    36a8:	fa 01       	movw	r30, r20
    36aa:	e2 0f       	add	r30, r18
    36ac:	f3 1f       	adc	r31, r19
    36ae:	8e 17       	cp	r24, r30
    36b0:	9f 07       	cpc	r25, r31
    36b2:	1c f4       	brge	.+6      	; 0x36ba <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x170>
    36b4:	9c 01       	movw	r18, r24
    36b6:	24 1b       	sub	r18, r20
    36b8:	35 0b       	sbc	r19, r21
    36ba:	12 16       	cp	r1, r18
    36bc:	13 06       	cpc	r1, r19
    36be:	0c f0       	brlt	.+2      	; 0x36c2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x178>
    36c0:	99 c0       	rjmp	.+306    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    36c2:	a2 2f       	mov	r26, r18
    36c4:	84 2f       	mov	r24, r20
    36c6:	86 95       	lsr	r24
    36c8:	86 95       	lsr	r24
    36ca:	86 95       	lsr	r24
    36cc:	90 e8       	ldi	r25, 0x80	; 128
    36ce:	89 9f       	mul	r24, r25
    36d0:	60 0d       	add	r22, r0
    36d2:	71 1d       	adc	r23, r1
    36d4:	11 24       	eor	r1, r1
    36d6:	fb 01       	movw	r30, r22
    36d8:	ea 5d       	subi	r30, 0xDA	; 218
    36da:	fe 4f       	sbci	r31, 0xFE	; 254
    36dc:	47 70       	andi	r20, 0x07	; 7
    36de:	a9 f1       	breq	.+106    	; 0x374a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x200>
    36e0:	98 e0       	ldi	r25, 0x08	; 8
    36e2:	94 1b       	sub	r25, r20
    36e4:	49 2f       	mov	r20, r25
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	ea 01       	movw	r28, r20
    36ea:	c2 5e       	subi	r28, 0xE2	; 226
    36ec:	de 4f       	sbci	r29, 0xFE	; 254
    36ee:	88 81       	ld	r24, Y
    36f0:	29 17       	cp	r18, r25
    36f2:	90 f4       	brcc	.+36     	; 0x3718 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1ce>
    36f4:	42 1b       	sub	r20, r18
    36f6:	51 09       	sbc	r21, r1
    36f8:	2f ef       	ldi	r18, 0xFF	; 255
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b8>
    36fe:	35 95       	asr	r19
    3700:	27 95       	ror	r18
    3702:	4a 95       	dec	r20
    3704:	e2 f7       	brpl	.-8      	; 0x36fe <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b4>
    3706:	82 23       	and	r24, r18
    3708:	01 30       	cpi	r16, 0x01	; 1
    370a:	11 05       	cpc	r17, r1
    370c:	41 f0       	breq	.+16     	; 0x371e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1d4>
    370e:	68 f0       	brcs	.+26     	; 0x372a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e0>
    3710:	02 30       	cpi	r16, 0x02	; 2
    3712:	11 05       	cpc	r17, r1
    3714:	89 f0       	breq	.+34     	; 0x3738 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1ee>
    3716:	6e c0       	rjmp	.+220    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3718:	01 30       	cpi	r16, 0x01	; 1
    371a:	11 05       	cpc	r17, r1
    371c:	19 f4       	brne	.+6      	; 0x3724 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1da>
    371e:	20 81       	ld	r18, Z
    3720:	82 2b       	or	r24, r18
    3722:	0c c0       	rjmp	.+24     	; 0x373c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1f2>
    3724:	01 30       	cpi	r16, 0x01	; 1
    3726:	11 05       	cpc	r17, r1
    3728:	20 f4       	brcc	.+8      	; 0x3732 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e8>
    372a:	80 95       	com	r24
    372c:	20 81       	ld	r18, Z
    372e:	82 23       	and	r24, r18
    3730:	05 c0       	rjmp	.+10     	; 0x373c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1f2>
    3732:	02 30       	cpi	r16, 0x02	; 2
    3734:	11 05       	cpc	r17, r1
    3736:	31 f4       	brne	.+12     	; 0x3744 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1fa>
    3738:	20 81       	ld	r18, Z
    373a:	82 27       	eor	r24, r18
    373c:	80 83       	st	Z, r24
    373e:	a9 17       	cp	r26, r25
    3740:	08 f4       	brcc	.+2      	; 0x3744 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1fa>
    3742:	58 c0       	rjmp	.+176    	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    3744:	a9 1b       	sub	r26, r25
    3746:	e0 58       	subi	r30, 0x80	; 128
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	a8 30       	cpi	r26, 0x08	; 8
    374c:	48 f1       	brcs	.+82     	; 0x37a0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x256>
    374e:	02 30       	cpi	r16, 0x02	; 2
    3750:	11 05       	cpc	r17, r1
    3752:	59 f4       	brne	.+22     	; 0x376a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x220>
    3754:	ef 01       	movw	r28, r30
    3756:	8a 2f       	mov	r24, r26
    3758:	98 81       	ld	r25, Y
    375a:	90 95       	com	r25
    375c:	98 83       	st	Y, r25
    375e:	c0 58       	subi	r28, 0x80	; 128
    3760:	df 4f       	sbci	r29, 0xFF	; 255
    3762:	88 50       	subi	r24, 0x08	; 8
    3764:	88 30       	cpi	r24, 0x08	; 8
    3766:	c0 f7       	brcc	.-16     	; 0x3758 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x20e>
    3768:	30 c0       	rjmp	.+96     	; 0x37ca <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x280>
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	01 30       	cpi	r16, 0x01	; 1
    376e:	11 05       	cpc	r17, r1
    3770:	09 f0       	breq	.+2      	; 0x3774 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x22a>
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	81 95       	neg	r24
    3776:	ef 01       	movw	r28, r30
    3778:	9a 2f       	mov	r25, r26
    377a:	88 83       	st	Y, r24
    377c:	c0 58       	subi	r28, 0x80	; 128
    377e:	df 4f       	sbci	r29, 0xFF	; 255
    3780:	98 50       	subi	r25, 0x08	; 8
    3782:	98 30       	cpi	r25, 0x08	; 8
    3784:	d0 f7       	brcc	.-12     	; 0x377a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x230>
    3786:	88 ef       	ldi	r24, 0xF8	; 248
    3788:	8a 0f       	add	r24, r26
    378a:	86 95       	lsr	r24
    378c:	86 95       	lsr	r24
    378e:	86 95       	lsr	r24
    3790:	90 e8       	ldi	r25, 0x80	; 128
    3792:	89 9f       	mul	r24, r25
    3794:	e0 0d       	add	r30, r0
    3796:	f1 1d       	adc	r31, r1
    3798:	11 24       	eor	r1, r1
    379a:	e0 58       	subi	r30, 0x80	; 128
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	a7 70       	andi	r26, 0x07	; 7
    37a0:	aa 23       	and	r26, r26
    37a2:	41 f1       	breq	.+80     	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	aa 5e       	subi	r26, 0xEA	; 234
    37a8:	be 4f       	sbci	r27, 0xFE	; 254
    37aa:	8c 91       	ld	r24, X
    37ac:	01 30       	cpi	r16, 0x01	; 1
    37ae:	11 05       	cpc	r17, r1
    37b0:	29 f0       	breq	.+10     	; 0x37bc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x272>
    37b2:	38 f0       	brcs	.+14     	; 0x37c2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x278>
    37b4:	02 30       	cpi	r16, 0x02	; 2
    37b6:	11 05       	cpc	r17, r1
    37b8:	e9 f4       	brne	.+58     	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    37ba:	19 c0       	rjmp	.+50     	; 0x37ee <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a4>
    37bc:	90 81       	ld	r25, Z
    37be:	89 2b       	or	r24, r25
    37c0:	18 c0       	rjmp	.+48     	; 0x37f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a8>
    37c2:	80 95       	com	r24
    37c4:	90 81       	ld	r25, Z
    37c6:	89 23       	and	r24, r25
    37c8:	14 c0       	rjmp	.+40     	; 0x37f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a8>
    37ca:	88 ef       	ldi	r24, 0xF8	; 248
    37cc:	8a 0f       	add	r24, r26
    37ce:	86 95       	lsr	r24
    37d0:	86 95       	lsr	r24
    37d2:	86 95       	lsr	r24
    37d4:	90 e8       	ldi	r25, 0x80	; 128
    37d6:	89 9f       	mul	r24, r25
    37d8:	e0 0d       	add	r30, r0
    37da:	f1 1d       	adc	r31, r1
    37dc:	11 24       	eor	r1, r1
    37de:	e0 58       	subi	r30, 0x80	; 128
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	a7 70       	andi	r26, 0x07	; 7
    37e4:	39 f0       	breq	.+14     	; 0x37f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    37e6:	b0 e0       	ldi	r27, 0x00	; 0
    37e8:	aa 5e       	subi	r26, 0xEA	; 234
    37ea:	be 4f       	sbci	r27, 0xFE	; 254
    37ec:	8c 91       	ld	r24, X
    37ee:	90 81       	ld	r25, Z
    37f0:	89 27       	eor	r24, r25
    37f2:	80 83       	st	Z, r24
    37f4:	df 91       	pop	r29
    37f6:	cf 91       	pop	r28
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	08 95       	ret

000037fe <_ZN16Adafruit_SSD13069drawPixelEiij>:
    37fe:	cf 92       	push	r12
    3800:	df 92       	push	r13
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	7c 01       	movw	r14, r24
    3810:	8b 01       	movw	r16, r22
    3812:	ea 01       	movw	r28, r20
    3814:	69 01       	movw	r12, r18
    3816:	77 fd       	sbrc	r23, 7
    3818:	a0 c0       	rjmp	.+320    	; 0x395a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    381a:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZNK12Adafruit_GFX5widthEv>
    381e:	08 17       	cp	r16, r24
    3820:	19 07       	cpc	r17, r25
    3822:	0c f0       	brlt	.+2      	; 0x3826 <_ZN16Adafruit_SSD13069drawPixelEiij+0x28>
    3824:	9a c0       	rjmp	.+308    	; 0x395a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    3826:	d7 fd       	sbrc	r29, 7
    3828:	98 c0       	rjmp	.+304    	; 0x395a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    382a:	c7 01       	movw	r24, r14
    382c:	0e 94 46 19 	call	0x328c	; 0x328c <_ZNK12Adafruit_GFX6heightEv>
    3830:	c8 17       	cp	r28, r24
    3832:	d9 07       	cpc	r29, r25
    3834:	0c f0       	brlt	.+2      	; 0x3838 <_ZN16Adafruit_SSD13069drawPixelEiij+0x3a>
    3836:	91 c0       	rjmp	.+290    	; 0x395a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    3838:	c7 01       	movw	r24, r14
    383a:	0e 94 3f 19 	call	0x327e	; 0x327e <_ZNK12Adafruit_GFX11getRotationEv>
    383e:	82 30       	cpi	r24, 0x02	; 2
    3840:	09 f0       	breq	.+2      	; 0x3844 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    3842:	7f c0       	rjmp	.+254    	; 0x3942 <_ZN16Adafruit_SSD13069drawPixelEiij+0x144>
    3844:	f7 01       	movw	r30, r14
    3846:	84 81       	ldd	r24, Z+4	; 0x04
    3848:	95 81       	ldd	r25, Z+5	; 0x05
    384a:	9c 01       	movw	r18, r24
    384c:	20 1b       	sub	r18, r16
    384e:	31 0b       	sbc	r19, r17
    3850:	89 01       	movw	r16, r18
    3852:	01 50       	subi	r16, 0x01	; 1
    3854:	11 09       	sbc	r17, r1
    3856:	86 81       	ldd	r24, Z+6	; 0x06
    3858:	97 81       	ldd	r25, Z+7	; 0x07
    385a:	fc 01       	movw	r30, r24
    385c:	ec 1b       	sub	r30, r28
    385e:	fd 0b       	sbc	r31, r29
    3860:	ef 01       	movw	r28, r30
    3862:	21 97       	sbiw	r28, 0x01	; 1
    3864:	0b c0       	rjmp	.+22     	; 0x387c <_ZN16Adafruit_SSD13069drawPixelEiij+0x7e>
    3866:	81 30       	cpi	r24, 0x01	; 1
    3868:	49 f4       	brne	.+18     	; 0x387c <_ZN16Adafruit_SSD13069drawPixelEiij+0x7e>
    386a:	f7 01       	movw	r30, r14
    386c:	84 81       	ldd	r24, Z+4	; 0x04
    386e:	95 81       	ldd	r25, Z+5	; 0x05
    3870:	8c 1b       	sub	r24, r28
    3872:	9d 0b       	sbc	r25, r29
    3874:	e8 01       	movw	r28, r16
    3876:	8c 01       	movw	r16, r24
    3878:	01 50       	subi	r16, 0x01	; 1
    387a:	11 09       	sbc	r17, r1
    387c:	f1 e0       	ldi	r31, 0x01	; 1
    387e:	cf 16       	cp	r12, r31
    3880:	d1 04       	cpc	r13, r1
    3882:	31 f0       	breq	.+12     	; 0x3890 <_ZN16Adafruit_SSD13069drawPixelEiij+0x92>
    3884:	10 f1       	brcs	.+68     	; 0x38ca <_ZN16Adafruit_SSD13069drawPixelEiij+0xcc>
    3886:	32 e0       	ldi	r19, 0x02	; 2
    3888:	c3 16       	cp	r12, r19
    388a:	d1 04       	cpc	r13, r1
    388c:	e1 f1       	breq	.+120    	; 0x3906 <_ZN16Adafruit_SSD13069drawPixelEiij+0x108>
    388e:	65 c0       	rjmp	.+202    	; 0x395a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    3890:	fe 01       	movw	r30, r28
    3892:	d7 fd       	sbrc	r29, 7
    3894:	37 96       	adiw	r30, 0x07	; 7
    3896:	43 e0       	ldi	r20, 0x03	; 3
    3898:	f5 95       	asr	r31
    389a:	e7 95       	ror	r30
    389c:	4a 95       	dec	r20
    389e:	e1 f7       	brne	.-8      	; 0x3898 <_ZN16Adafruit_SSD13069drawPixelEiij+0x9a>
    38a0:	f6 95       	lsr	r31
    38a2:	fe 2f       	mov	r31, r30
    38a4:	ee 27       	eor	r30, r30
    38a6:	f7 95       	ror	r31
    38a8:	e7 95       	ror	r30
    38aa:	0e 0f       	add	r16, r30
    38ac:	1f 1f       	adc	r17, r31
    38ae:	f8 01       	movw	r30, r16
    38b0:	ea 5d       	subi	r30, 0xDA	; 218
    38b2:	fe 4f       	sbci	r31, 0xFE	; 254
    38b4:	c7 70       	andi	r28, 0x07	; 7
    38b6:	dd 27       	eor	r29, r29
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc2>
    38be:	88 0f       	add	r24, r24
    38c0:	ca 95       	dec	r28
    38c2:	ea f7       	brpl	.-6      	; 0x38be <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    38c4:	90 81       	ld	r25, Z
    38c6:	89 2b       	or	r24, r25
    38c8:	3a c0       	rjmp	.+116    	; 0x393e <_ZN16Adafruit_SSD13069drawPixelEiij+0x140>
    38ca:	fe 01       	movw	r30, r28
    38cc:	d7 fd       	sbrc	r29, 7
    38ce:	37 96       	adiw	r30, 0x07	; 7
    38d0:	23 e0       	ldi	r18, 0x03	; 3
    38d2:	f5 95       	asr	r31
    38d4:	e7 95       	ror	r30
    38d6:	2a 95       	dec	r18
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <_ZN16Adafruit_SSD13069drawPixelEiij+0xd4>
    38da:	f6 95       	lsr	r31
    38dc:	fe 2f       	mov	r31, r30
    38de:	ee 27       	eor	r30, r30
    38e0:	f7 95       	ror	r31
    38e2:	e7 95       	ror	r30
    38e4:	0e 0f       	add	r16, r30
    38e6:	1f 1f       	adc	r17, r31
    38e8:	f8 01       	movw	r30, r16
    38ea:	ea 5d       	subi	r30, 0xDA	; 218
    38ec:	fe 4f       	sbci	r31, 0xFE	; 254
    38ee:	c7 70       	andi	r28, 0x07	; 7
    38f0:	dd 27       	eor	r29, r29
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	01 c0       	rjmp	.+2      	; 0x38fa <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    38f8:	88 0f       	add	r24, r24
    38fa:	ca 95       	dec	r28
    38fc:	ea f7       	brpl	.-6      	; 0x38f8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfa>
    38fe:	80 95       	com	r24
    3900:	90 81       	ld	r25, Z
    3902:	89 23       	and	r24, r25
    3904:	1c c0       	rjmp	.+56     	; 0x393e <_ZN16Adafruit_SSD13069drawPixelEiij+0x140>
    3906:	fe 01       	movw	r30, r28
    3908:	d7 fd       	sbrc	r29, 7
    390a:	37 96       	adiw	r30, 0x07	; 7
    390c:	83 e0       	ldi	r24, 0x03	; 3
    390e:	f5 95       	asr	r31
    3910:	e7 95       	ror	r30
    3912:	8a 95       	dec	r24
    3914:	e1 f7       	brne	.-8      	; 0x390e <_ZN16Adafruit_SSD13069drawPixelEiij+0x110>
    3916:	f6 95       	lsr	r31
    3918:	fe 2f       	mov	r31, r30
    391a:	ee 27       	eor	r30, r30
    391c:	f7 95       	ror	r31
    391e:	e7 95       	ror	r30
    3920:	0e 0f       	add	r16, r30
    3922:	1f 1f       	adc	r17, r31
    3924:	f8 01       	movw	r30, r16
    3926:	ea 5d       	subi	r30, 0xDA	; 218
    3928:	fe 4f       	sbci	r31, 0xFE	; 254
    392a:	c7 70       	andi	r28, 0x07	; 7
    392c:	dd 27       	eor	r29, r29
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	01 c0       	rjmp	.+2      	; 0x3936 <_ZN16Adafruit_SSD13069drawPixelEiij+0x138>
    3934:	88 0f       	add	r24, r24
    3936:	ca 95       	dec	r28
    3938:	ea f7       	brpl	.-6      	; 0x3934 <_ZN16Adafruit_SSD13069drawPixelEiij+0x136>
    393a:	90 81       	ld	r25, Z
    393c:	89 27       	eor	r24, r25
    393e:	80 83       	st	Z, r24
    3940:	0c c0       	rjmp	.+24     	; 0x395a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    3942:	83 30       	cpi	r24, 0x03	; 3
    3944:	09 f0       	breq	.+2      	; 0x3948 <_ZN16Adafruit_SSD13069drawPixelEiij+0x14a>
    3946:	8f cf       	rjmp	.-226    	; 0x3866 <_ZN16Adafruit_SSD13069drawPixelEiij+0x68>
    3948:	f7 01       	movw	r30, r14
    394a:	86 81       	ldd	r24, Z+6	; 0x06
    394c:	97 81       	ldd	r25, Z+7	; 0x07
    394e:	80 1b       	sub	r24, r16
    3950:	91 0b       	sbc	r25, r17
    3952:	8e 01       	movw	r16, r28
    3954:	ec 01       	movw	r28, r24
    3956:	21 97       	sbiw	r28, 0x01	; 1
    3958:	91 cf       	rjmp	.-222    	; 0x387c <_ZN16Adafruit_SSD13069drawPixelEiij+0x7e>
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	ff 90       	pop	r15
    3964:	ef 90       	pop	r14
    3966:	df 90       	pop	r13
    3968:	cf 90       	pop	r12
    396a:	08 95       	ret

0000396c <_ZN16Adafruit_SSD1306C1Ea>:
    396c:	1f 93       	push	r17
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	ec 01       	movw	r28, r24
    3974:	16 2f       	mov	r17, r22
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	60 e8       	ldi	r22, 0x80	; 128
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <_ZN12Adafruit_GFXC1Eii>
    3982:	86 ea       	ldi	r24, 0xA6	; 166
    3984:	93 e0       	ldi	r25, 0x03	; 3
    3986:	99 83       	std	Y+1, r25	; 0x01
    3988:	88 83       	st	Y, r24
    398a:	8f ef       	ldi	r24, 0xFF	; 255
    398c:	8c 8f       	std	Y+28, r24	; 0x1c
    398e:	88 a3       	std	Y+32, r24	; 0x20
    3990:	8e 8f       	std	Y+30, r24	; 0x1e
    3992:	8d 8f       	std	Y+29, r24	; 0x1d
    3994:	1f 8f       	std	Y+31, r17	; 0x1f
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	08 95       	ret

0000399e <_ZN16Adafruit_SSD130612clearDisplayEv>:
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	92 e0       	ldi	r25, 0x02	; 2
    39a2:	e6 e2       	ldi	r30, 0x26	; 38
    39a4:	f1 e0       	ldi	r31, 0x01	; 1
    39a6:	df 01       	movw	r26, r30
    39a8:	9c 01       	movw	r18, r24
    39aa:	1d 92       	st	X+, r1
    39ac:	21 50       	subi	r18, 0x01	; 1
    39ae:	30 40       	sbci	r19, 0x00	; 0
    39b0:	e1 f7       	brne	.-8      	; 0x39aa <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>
    39b2:	08 95       	ret

000039b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
    39b4:	fc 01       	movw	r30, r24
    39b6:	81 a1       	ldd	r24, Z+33	; 0x21
    39b8:	88 23       	and	r24, r24
    39ba:	39 f0       	breq	.+14     	; 0x39ca <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x16>
    39bc:	6e bd       	out	0x2e, r22	; 46
    39be:	00 00       	nop
    39c0:	0d b4       	in	r0, 0x2d	; 45
    39c2:	07 fe       	sbrs	r0, 7
    39c4:	fd cf       	rjmp	.-6      	; 0x39c0 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0xc>
    39c6:	8e b5       	in	r24, 0x2e	; 46
    39c8:	08 95       	ret
    39ca:	28 e0       	ldi	r18, 0x08	; 8
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	90 e8       	ldi	r25, 0x80	; 128
    39d0:	a4 a1       	ldd	r26, Z+36	; 0x24
    39d2:	b5 a1       	ldd	r27, Z+37	; 0x25
    39d4:	4c 91       	ld	r20, X
    39d6:	83 a5       	ldd	r24, Z+43	; 0x2b
    39d8:	80 95       	com	r24
    39da:	84 23       	and	r24, r20
    39dc:	8c 93       	st	X, r24
    39de:	a2 a1       	ldd	r26, Z+34	; 0x22
    39e0:	b3 a1       	ldd	r27, Z+35	; 0x23
    39e2:	82 a5       	ldd	r24, Z+42	; 0x2a
    39e4:	46 2f       	mov	r20, r22
    39e6:	49 23       	and	r20, r25
    39e8:	19 f0       	breq	.+6      	; 0x39f0 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x3c>
    39ea:	4c 91       	ld	r20, X
    39ec:	84 2b       	or	r24, r20
    39ee:	03 c0       	rjmp	.+6      	; 0x39f6 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x42>
    39f0:	4c 91       	ld	r20, X
    39f2:	80 95       	com	r24
    39f4:	84 23       	and	r24, r20
    39f6:	8c 93       	st	X, r24
    39f8:	a4 a1       	ldd	r26, Z+36	; 0x24
    39fa:	b5 a1       	ldd	r27, Z+37	; 0x25
    39fc:	4c 91       	ld	r20, X
    39fe:	83 a5       	ldd	r24, Z+43	; 0x2b
    3a00:	84 2b       	or	r24, r20
    3a02:	8c 93       	st	X, r24
    3a04:	96 95       	lsr	r25
    3a06:	21 50       	subi	r18, 0x01	; 1
    3a08:	31 09       	sbc	r19, r1
    3a0a:	11 f7       	brne	.-60     	; 0x39d0 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1c>
    3a0c:	08 95       	ret

00003a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	ec 01       	movw	r28, r24
    3a16:	16 2f       	mov	r17, r22
    3a18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a1a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1c:	09 f1       	breq	.+66     	; 0x3a60 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x52>
    3a1e:	ee a1       	ldd	r30, Y+38	; 0x26
    3a20:	ff a1       	ldd	r31, Y+39	; 0x27
    3a22:	90 81       	ld	r25, Z
    3a24:	8c a5       	ldd	r24, Y+44	; 0x2c
    3a26:	89 2b       	or	r24, r25
    3a28:	80 83       	st	Z, r24
    3a2a:	e8 a5       	ldd	r30, Y+40	; 0x28
    3a2c:	f9 a5       	ldd	r31, Y+41	; 0x29
    3a2e:	90 81       	ld	r25, Z
    3a30:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a32:	80 95       	com	r24
    3a34:	89 23       	and	r24, r25
    3a36:	80 83       	st	Z, r24
    3a38:	ee a1       	ldd	r30, Y+38	; 0x26
    3a3a:	ff a1       	ldd	r31, Y+39	; 0x27
    3a3c:	90 81       	ld	r25, Z
    3a3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3a40:	80 95       	com	r24
    3a42:	89 23       	and	r24, r25
    3a44:	80 83       	st	Z, r24
    3a46:	ce 01       	movw	r24, r28
    3a48:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    3a4c:	ee a1       	ldd	r30, Y+38	; 0x26
    3a4e:	ff a1       	ldd	r31, Y+39	; 0x27
    3a50:	90 81       	ld	r25, Z
    3a52:	8c a5       	ldd	r24, Y+44	; 0x2c
    3a54:	89 2b       	or	r24, r25
    3a56:	80 83       	st	Z, r24
    3a58:	df 91       	pop	r29
    3a5a:	cf 91       	pop	r28
    3a5c:	1f 91       	pop	r17
    3a5e:	08 95       	ret
    3a60:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3a62:	06 2e       	mov	r0, r22
    3a64:	00 0c       	add	r0, r0
    3a66:	77 0b       	sbc	r23, r23
    3a68:	8b e2       	ldi	r24, 0x2B	; 43
    3a6a:	95 e0       	ldi	r25, 0x05	; 5
    3a6c:	0e 94 0c 20 	call	0x4018	; 0x4018 <_ZN7TwoWire17beginTransmissionEi>
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	8b e2       	ldi	r24, 0x2B	; 43
    3a74:	95 e0       	ldi	r25, 0x05	; 5
    3a76:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <_ZN7TwoWire5writeEh>
    3a7a:	61 2f       	mov	r22, r17
    3a7c:	8b e2       	ldi	r24, 0x2B	; 43
    3a7e:	95 e0       	ldi	r25, 0x05	; 5
    3a80:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <_ZN7TwoWire5writeEh>
    3a84:	8b e2       	ldi	r24, 0x2B	; 43
    3a86:	95 e0       	ldi	r25, 0x05	; 5
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0c 94 21 20 	jmp	0x4042	; 0x4042 <_ZN7TwoWire15endTransmissionEv>

00003a92 <_ZN16Adafruit_SSD13065beginEhhb>:
    3a92:	0f 93       	push	r16
    3a94:	1f 93       	push	r17
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	ec 01       	movw	r28, r24
    3a9c:	16 2f       	mov	r17, r22
    3a9e:	02 2f       	mov	r16, r18
    3aa0:	6b 8f       	std	Y+27, r22	; 0x1b
    3aa2:	4a 8f       	std	Y+26, r20	; 0x1a
    3aa4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <_ZN16Adafruit_SSD13065beginEhhb+0x1a>
    3aaa:	8c c0       	rjmp	.+280    	; 0x3bc4 <_ZN16Adafruit_SSD13065beginEhhb+0x132>
    3aac:	61 e0       	ldi	r22, 0x01	; 1
    3aae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ab0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	88 a1       	ldd	r24, Y+32	; 0x20
    3ab8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
    3abc:	88 a1       	ldd	r24, Y+32	; 0x20
    3abe:	08 2e       	mov	r0, r24
    3ac0:	00 0c       	add	r0, r0
    3ac2:	99 0b       	sbc	r25, r25
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	ec 55       	subi	r30, 0x5C	; 92
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	e4 91       	lpm	r30, Z
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	ee 0f       	add	r30, r30
    3ad0:	ff 1f       	adc	r31, r31
    3ad2:	ee 53       	subi	r30, 0x3E	; 62
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	25 91       	lpm	r18, Z+
    3ad8:	34 91       	lpm	r19, Z
    3ada:	3f a3       	std	Y+39, r19	; 0x27
    3adc:	2e a3       	std	Y+38, r18	; 0x26
    3ade:	fc 01       	movw	r30, r24
    3ae0:	e0 57       	subi	r30, 0x70	; 112
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	e4 91       	lpm	r30, Z
    3ae6:	ec a7       	std	Y+44, r30	; 0x2c
    3ae8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aea:	08 2e       	mov	r0, r24
    3aec:	00 0c       	add	r0, r0
    3aee:	99 0b       	sbc	r25, r25
    3af0:	fc 01       	movw	r30, r24
    3af2:	ec 55       	subi	r30, 0x5C	; 92
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	e4 91       	lpm	r30, Z
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	ee 0f       	add	r30, r30
    3afc:	ff 1f       	adc	r31, r31
    3afe:	ee 53       	subi	r30, 0x3E	; 62
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	25 91       	lpm	r18, Z+
    3b04:	34 91       	lpm	r19, Z
    3b06:	39 a7       	std	Y+41, r19	; 0x29
    3b08:	28 a7       	std	Y+40, r18	; 0x28
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	e0 57       	subi	r30, 0x70	; 112
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	e4 91       	lpm	r30, Z
    3b12:	ed a7       	std	Y+45, r30	; 0x2d
    3b14:	89 a1       	ldd	r24, Y+33	; 0x21
    3b16:	81 11       	cpse	r24, r1
    3b18:	34 c0       	rjmp	.+104    	; 0x3b82 <_ZN16Adafruit_SSD13065beginEhhb+0xf0>
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b1e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
    3b22:	61 e0       	ldi	r22, 0x01	; 1
    3b24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b26:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
    3b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b2c:	08 2e       	mov	r0, r24
    3b2e:	00 0c       	add	r0, r0
    3b30:	99 0b       	sbc	r25, r25
    3b32:	fc 01       	movw	r30, r24
    3b34:	ec 55       	subi	r30, 0x5C	; 92
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	e4 91       	lpm	r30, Z
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	ee 0f       	add	r30, r30
    3b3e:	ff 1f       	adc	r31, r31
    3b40:	ee 53       	subi	r30, 0x3E	; 62
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	25 91       	lpm	r18, Z+
    3b46:	34 91       	lpm	r19, Z
    3b48:	3d a3       	std	Y+37, r19	; 0x25
    3b4a:	2c a3       	std	Y+36, r18	; 0x24
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e0 57       	subi	r30, 0x70	; 112
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	e4 91       	lpm	r30, Z
    3b54:	eb a7       	std	Y+43, r30	; 0x2b
    3b56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b58:	08 2e       	mov	r0, r24
    3b5a:	00 0c       	add	r0, r0
    3b5c:	99 0b       	sbc	r25, r25
    3b5e:	fc 01       	movw	r30, r24
    3b60:	ec 55       	subi	r30, 0x5C	; 92
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	e4 91       	lpm	r30, Z
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	ee 0f       	add	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	ee 53       	subi	r30, 0x3E	; 62
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	25 91       	lpm	r18, Z+
    3b72:	34 91       	lpm	r19, Z
    3b74:	3b a3       	std	Y+35, r19	; 0x23
    3b76:	2a a3       	std	Y+34, r18	; 0x22
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e0 57       	subi	r30, 0x70	; 112
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	e4 91       	lpm	r30, Z
    3b80:	ea a7       	std	Y+42, r30	; 0x2a
    3b82:	89 a1       	ldd	r24, Y+33	; 0x21
    3b84:	88 23       	and	r24, r24
    3b86:	11 f1       	breq	.+68     	; 0x3bcc <_ZN16Adafruit_SSD13065beginEhhb+0x13a>
    3b88:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <_ZN8SPIClass5beginEv>
    3b8c:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
    3b90:	88 23       	and	r24, r24
    3b92:	99 f0       	breq	.+38     	; 0x3bba <_ZN16Adafruit_SSD13065beginEhhb+0x128>
    3b94:	2f b7       	in	r18, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <_ZN8SPIClass13interruptModeE>
    3b9c:	81 30       	cpi	r24, 0x01	; 1
    3b9e:	59 f4       	brne	.+22     	; 0x3bb6 <_ZN16Adafruit_SSD13065beginEhhb+0x124>
    3ba0:	8d b3       	in	r24, 0x1d	; 29
    3ba2:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <_ZN8SPIClass13interruptSaveE>
    3ba6:	9d b3       	in	r25, 0x1d	; 29
    3ba8:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <_ZN8SPIClass13interruptMaskE>
    3bac:	80 95       	com	r24
    3bae:	89 23       	and	r24, r25
    3bb0:	8d bb       	out	0x1d, r24	; 29
    3bb2:	2f bf       	out	0x3f, r18	; 63
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <_ZN16Adafruit_SSD13065beginEhhb+0x128>
    3bb6:	20 93 22 05 	sts	0x0522, r18	; 0x800522 <_ZN8SPIClass13interruptSaveE>
    3bba:	80 e5       	ldi	r24, 0x50	; 80
    3bbc:	8c bd       	out	0x2c, r24	; 44
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	8d bd       	out	0x2d, r24	; 45
    3bc2:	04 c0       	rjmp	.+8      	; 0x3bcc <_ZN16Adafruit_SSD13065beginEhhb+0x13a>
    3bc4:	8b e2       	ldi	r24, 0x2B	; 43
    3bc6:	95 e0       	ldi	r25, 0x05	; 5
    3bc8:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_ZN7TwoWire5beginEv>
    3bcc:	00 23       	and	r16, r16
    3bce:	f1 f0       	breq	.+60     	; 0x3c0c <_ZN16Adafruit_SSD13065beginEhhb+0x17a>
    3bd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bd2:	87 fd       	sbrc	r24, 7
    3bd4:	1b c0       	rjmp	.+54     	; 0x3c0c <_ZN16Adafruit_SSD13065beginEhhb+0x17a>
    3bd6:	61 e0       	ldi	r22, 0x01	; 1
    3bd8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
    3bdc:	61 e0       	ldi	r22, 0x01	; 1
    3bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be0:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
    3be4:	61 e0       	ldi	r22, 0x01	; 1
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 73 12 	call	0x24e6	; 0x24e6 <delay>
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bf4:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
    3bf8:	6a e0       	ldi	r22, 0x0A	; 10
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 73 12 	call	0x24e6	; 0x24e6 <delay>
    3c04:	61 e0       	ldi	r22, 0x01	; 1
    3c06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c08:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
    3c0c:	6e ea       	ldi	r22, 0xAE	; 174
    3c0e:	ce 01       	movw	r24, r28
    3c10:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c14:	65 ed       	ldi	r22, 0xD5	; 213
    3c16:	ce 01       	movw	r24, r28
    3c18:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c1c:	60 e8       	ldi	r22, 0x80	; 128
    3c1e:	ce 01       	movw	r24, r28
    3c20:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c24:	68 ea       	ldi	r22, 0xA8	; 168
    3c26:	ce 01       	movw	r24, r28
    3c28:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c2c:	6f e1       	ldi	r22, 0x1F	; 31
    3c2e:	ce 01       	movw	r24, r28
    3c30:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c34:	63 ed       	ldi	r22, 0xD3	; 211
    3c36:	ce 01       	movw	r24, r28
    3c38:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c44:	60 e4       	ldi	r22, 0x40	; 64
    3c46:	ce 01       	movw	r24, r28
    3c48:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c4c:	6d e8       	ldi	r22, 0x8D	; 141
    3c4e:	ce 01       	movw	r24, r28
    3c50:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c54:	11 30       	cpi	r17, 0x01	; 1
    3c56:	11 f4       	brne	.+4      	; 0x3c5c <_ZN16Adafruit_SSD13065beginEhhb+0x1ca>
    3c58:	60 e1       	ldi	r22, 0x10	; 16
    3c5a:	01 c0       	rjmp	.+2      	; 0x3c5e <_ZN16Adafruit_SSD13065beginEhhb+0x1cc>
    3c5c:	64 e1       	ldi	r22, 0x14	; 20
    3c5e:	ce 01       	movw	r24, r28
    3c60:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c64:	60 e2       	ldi	r22, 0x20	; 32
    3c66:	ce 01       	movw	r24, r28
    3c68:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	ce 01       	movw	r24, r28
    3c70:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c74:	61 ea       	ldi	r22, 0xA1	; 161
    3c76:	ce 01       	movw	r24, r28
    3c78:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c7c:	68 ec       	ldi	r22, 0xC8	; 200
    3c7e:	ce 01       	movw	r24, r28
    3c80:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c84:	6a ed       	ldi	r22, 0xDA	; 218
    3c86:	ce 01       	movw	r24, r28
    3c88:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c8c:	62 e0       	ldi	r22, 0x02	; 2
    3c8e:	ce 01       	movw	r24, r28
    3c90:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c94:	61 e8       	ldi	r22, 0x81	; 129
    3c96:	ce 01       	movw	r24, r28
    3c98:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3c9c:	6f e8       	ldi	r22, 0x8F	; 143
    3c9e:	ce 01       	movw	r24, r28
    3ca0:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3ca4:	69 ed       	ldi	r22, 0xD9	; 217
    3ca6:	ce 01       	movw	r24, r28
    3ca8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3cac:	11 30       	cpi	r17, 0x01	; 1
    3cae:	11 f4       	brne	.+4      	; 0x3cb4 <_ZN16Adafruit_SSD13065beginEhhb+0x222>
    3cb0:	62 e2       	ldi	r22, 0x22	; 34
    3cb2:	01 c0       	rjmp	.+2      	; 0x3cb6 <_ZN16Adafruit_SSD13065beginEhhb+0x224>
    3cb4:	61 ef       	ldi	r22, 0xF1	; 241
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3cbc:	6b ed       	ldi	r22, 0xDB	; 219
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3cc4:	60 e4       	ldi	r22, 0x40	; 64
    3cc6:	ce 01       	movw	r24, r28
    3cc8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3ccc:	64 ea       	ldi	r22, 0xA4	; 164
    3cce:	ce 01       	movw	r24, r28
    3cd0:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3cd4:	66 ea       	ldi	r22, 0xA6	; 166
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3cdc:	6e e2       	ldi	r22, 0x2E	; 46
    3cde:	ce 01       	movw	r24, r28
    3ce0:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    3ce4:	6f ea       	ldi	r22, 0xAF	; 175
    3ce6:	ce 01       	movw	r24, r28
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>

00003cf4 <_ZN16Adafruit_SSD13067displayEv>:
}

void Adafruit_SSD1306::display(void) {
    3cf4:	af 92       	push	r10
    3cf6:	bf 92       	push	r11
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	ec 01       	movw	r28, r24
  ssd1306_command(SSD1306_COLUMNADDR);
    3d0a:	61 e2       	ldi	r22, 0x21	; 33
    3d0c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	ce 01       	movw	r24, r28
    3d14:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
    3d18:	6f e7       	ldi	r22, 0x7F	; 127
    3d1a:	ce 01       	movw	r24, r28
    3d1c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
    3d20:	62 e2       	ldi	r22, 0x22	; 34
    3d22:	ce 01       	movw	r24, r28
    3d24:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
    3d30:	63 e0       	ldi	r22, 0x03	; 3
    3d32:	ce 01       	movw	r24, r28
    3d34:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  #if SSD1306_LCDHEIGHT == 16
    ssd1306_command(1); // Page end address
  #endif

  if (sid != -1)
    3d38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d3c:	49 f1       	breq	.+82     	; 0x3d90 <_ZN16Adafruit_SSD13067displayEv+0x9c>
  {
    // SPI
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    3d3e:	ee a1       	ldd	r30, Y+38	; 0x26
    3d40:	ff a1       	ldd	r31, Y+39	; 0x27
    3d42:	90 81       	ld	r25, Z
    3d44:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d46:	89 2b       	or	r24, r25
    3d48:	80 83       	st	Z, r24
    *dcport |= dcpinmask;
    3d4a:	e8 a5       	ldd	r30, Y+40	; 0x28
    3d4c:	f9 a5       	ldd	r31, Y+41	; 0x29
    3d4e:	90 81       	ld	r25, Z
    3d50:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d52:	89 2b       	or	r24, r25
    3d54:	80 83       	st	Z, r24
    *csport &= ~cspinmask;
    3d56:	ee a1       	ldd	r30, Y+38	; 0x26
    3d58:	ff a1       	ldd	r31, Y+39	; 0x27
    3d5a:	90 81       	ld	r25, Z
    3d5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d5e:	80 95       	com	r24
    3d60:	89 23       	and	r24, r25
    3d62:	80 83       	st	Z, r24
    3d64:	06 e2       	ldi	r16, 0x26	; 38
    3d66:	11 e0       	ldi	r17, 0x01	; 1
    3d68:	26 e2       	ldi	r18, 0x26	; 38
    3d6a:	e2 2e       	mov	r14, r18
    3d6c:	23 e0       	ldi	r18, 0x03	; 3
    3d6e:	f2 2e       	mov	r15, r18
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
    3d70:	f8 01       	movw	r30, r16
    3d72:	61 91       	ld	r22, Z+
    3d74:	8f 01       	movw	r16, r30
    3d76:	ce 01       	movw	r24, r28
    3d78:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    3d7c:	e0 16       	cp	r14, r16
    3d7e:	f1 06       	cpc	r15, r17
    3d80:	b9 f7       	brne	.-18     	; 0x3d70 <_ZN16Adafruit_SSD13067displayEv+0x7c>
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    3d82:	ee a1       	ldd	r30, Y+38	; 0x26
    3d84:	ff a1       	ldd	r31, Y+39	; 0x27
    3d86:	90 81       	ld	r25, Z
    3d88:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d8a:	89 2b       	or	r24, r25
    3d8c:	80 83       	st	Z, r24
    3d8e:	30 c0       	rjmp	.+96     	; 0x3df0 <_ZN16Adafruit_SSD13067displayEv+0xfc>
  }
  else
  {
    // save I2C bitrate
#ifdef TWBR
    uint8_t twbrbackup = TWBR;
    3d90:	e0 90 b8 00 	lds	r14, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    TWBR = 12; // upgrade to 400KHz!
    3d94:	8c e0       	ldi	r24, 0x0C	; 12
    3d96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3d9a:	06 e2       	ldi	r16, 0x26	; 38
    3d9c:	11 e0       	ldi	r17, 0x01	; 1
    3d9e:	96 e2       	ldi	r25, 0x26	; 38
    3da0:	c9 2e       	mov	r12, r25
    3da2:	93 e0       	ldi	r25, 0x03	; 3
    3da4:	d9 2e       	mov	r13, r25
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
    3da6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3da8:	06 2e       	mov	r0, r22
    3daa:	00 0c       	add	r0, r0
    3dac:	77 0b       	sbc	r23, r23
    3dae:	8b e2       	ldi	r24, 0x2B	; 43
    3db0:	95 e0       	ldi	r25, 0x05	; 5
    3db2:	0e 94 0c 20 	call	0x4018	; 0x4018 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3db6:	60 e4       	ldi	r22, 0x40	; 64
    3db8:	8b e2       	ldi	r24, 0x2B	; 43
    3dba:	95 e0       	ldi	r25, 0x05	; 5
    3dbc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <_ZN7TwoWire5writeEh>
    3dc0:	58 01       	movw	r10, r16
    3dc2:	80 e1       	ldi	r24, 0x10	; 16
    3dc4:	f8 2e       	mov	r15, r24
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
        WIRE_WRITE(buffer[i]);
    3dc6:	f5 01       	movw	r30, r10
    3dc8:	61 91       	ld	r22, Z+
    3dca:	5f 01       	movw	r10, r30
    3dcc:	8b e2       	ldi	r24, 0x2B	; 43
    3dce:	95 e0       	ldi	r25, 0x05	; 5
    3dd0:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <_ZN7TwoWire5writeEh>
    3dd4:	fa 94       	dec	r15
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
    3dd6:	f1 10       	cpse	r15, r1
    3dd8:	f6 cf       	rjmp	.-20     	; 0x3dc6 <_ZN16Adafruit_SSD13067displayEv+0xd2>
        WIRE_WRITE(buffer[i]);
        i++;
      }
      i--;
      Wire.endTransmission();
    3dda:	8b e2       	ldi	r24, 0x2B	; 43
    3ddc:	95 e0       	ldi	r25, 0x05	; 5
    3dde:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN7TwoWire15endTransmissionEv>
    3de2:	00 5f       	subi	r16, 0xF0	; 240
    3de4:	1f 4f       	sbci	r17, 0xFF	; 255

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    3de6:	c0 16       	cp	r12, r16
    3de8:	d1 06       	cpc	r13, r17
    3dea:	e9 f6       	brne	.-70     	; 0x3da6 <_ZN16Adafruit_SSD13067displayEv+0xb2>
      }
      i--;
      Wire.endTransmission();
    }
#ifdef TWBR
    TWBR = twbrbackup;
    3dec:	e0 92 b8 00 	sts	0x00B8, r14	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
#endif
  }
}
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	1f 91       	pop	r17
    3df6:	0f 91       	pop	r16
    3df8:	ff 90       	pop	r15
    3dfa:	ef 90       	pop	r14
    3dfc:	df 90       	pop	r13
    3dfe:	cf 90       	pop	r12
    3e00:	bf 90       	pop	r11
    3e02:	af 90       	pop	r10
    3e04:	08 95       	ret

00003e06 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3e06:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3e08:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3e0a:	f8 94       	cli
  if (!initialized) {
    3e0c:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <_ZN8SPIClass11initializedE>
    3e10:	81 11       	cpse	r24, r1
    3e12:	27 c0       	rjmp	.+78     	; 0x3e62 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3e14:	ee ea       	ldi	r30, 0xAE	; 174
    3e16:	f0 e0       	ldi	r31, 0x00	; 0
    3e18:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3e1a:	ea e9       	ldi	r30, 0x9A	; 154
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3e20:	e8 2f       	mov	r30, r24
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	ee 0f       	add	r30, r30
    3e26:	ff 1f       	adc	r31, r31
    3e28:	e4 53       	subi	r30, 0x34	; 52
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	a5 91       	lpm	r26, Z+
    3e2e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3e30:	ec 91       	ld	r30, X
    3e32:	e9 23       	and	r30, r25
    3e34:	21 f4       	brne	.+8      	; 0x3e3e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3e36:	61 e0       	ldi	r22, 0x01	; 1
    3e38:	8a e0       	ldi	r24, 0x0A	; 10
    3e3a:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3e3e:	61 e0       	ldi	r22, 0x01	; 1
    3e40:	8a e0       	ldi	r24, 0x0A	; 10
    3e42:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3e46:	8c b5       	in	r24, 0x2c	; 44
    3e48:	80 61       	ori	r24, 0x10	; 16
    3e4a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3e4c:	8c b5       	in	r24, 0x2c	; 44
    3e4e:	80 64       	ori	r24, 0x40	; 64
    3e50:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3e52:	61 e0       	ldi	r22, 0x01	; 1
    3e54:	8d e0       	ldi	r24, 0x0D	; 13
    3e56:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
    pinMode(MOSI, OUTPUT);
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	8b e0       	ldi	r24, 0x0B	; 11
    3e5e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <pinMode>
  }
  initialized++; // reference count
    3e62:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <_ZN8SPIClass11initializedE>
    3e66:	8f 5f       	subi	r24, 0xFF	; 255
    3e68:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3e6c:	cf bf       	out	0x3f, r28	; 63
}
    3e6e:	cf 91       	pop	r28
    3e70:	08 95       	ret

00003e72 <__vector_13>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    3e72:	1f 92       	push	r1
    3e74:	0f 92       	push	r0
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	0f 92       	push	r0
    3e7a:	11 24       	eor	r1, r1
    3e7c:	2f 93       	push	r18
    3e7e:	3f 93       	push	r19
    3e80:	4f 93       	push	r20
    3e82:	5f 93       	push	r21
    3e84:	6f 93       	push	r22
    3e86:	7f 93       	push	r23
    3e88:	8f 93       	push	r24
    3e8a:	9f 93       	push	r25
    3e8c:	af 93       	push	r26
    3e8e:	bf 93       	push	r27
    3e90:	ef 93       	push	r30
    3e92:	ff 93       	push	r31
  Timer1.isrCallback();
    3e94:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <_ZN8TimerOne11isrCallbackE>
    3e98:	f0 91 27 05 	lds	r31, 0x0527	; 0x800527 <_ZN8TimerOne11isrCallbackE+0x1>
    3e9c:	09 95       	icall
}
    3e9e:	ff 91       	pop	r31
    3ea0:	ef 91       	pop	r30
    3ea2:	bf 91       	pop	r27
    3ea4:	af 91       	pop	r26
    3ea6:	9f 91       	pop	r25
    3ea8:	8f 91       	pop	r24
    3eaa:	7f 91       	pop	r23
    3eac:	6f 91       	pop	r22
    3eae:	5f 91       	pop	r21
    3eb0:	4f 91       	pop	r20
    3eb2:	3f 91       	pop	r19
    3eb4:	2f 91       	pop	r18
    3eb6:	0f 90       	pop	r0
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	0f 90       	pop	r0
    3ebc:	1f 90       	pop	r1
    3ebe:	18 95       	reti

00003ec0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3ec0:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_ZN7TwoWire14rxBufferLengthE>
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <_ZN7TwoWire13rxBufferIndexE>
    3eca:	82 1b       	sub	r24, r18
    3ecc:	91 09       	sbc	r25, r1
    3ece:	08 95       	ret

00003ed0 <_ZN7TwoWire4readEv>:
    3ed0:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <_ZN7TwoWire13rxBufferIndexE>
    3ed4:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_ZN7TwoWire14rxBufferLengthE>
    3ed8:	98 17       	cp	r25, r24
    3eda:	50 f4       	brcc	.+20     	; 0x3ef0 <_ZN7TwoWire4readEv+0x20>
    3edc:	e9 2f       	mov	r30, r25
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	e3 5a       	subi	r30, 0xA3	; 163
    3ee2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ee4:	20 81       	ld	r18, Z
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	9f 5f       	subi	r25, 0xFF	; 255
    3eea:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <_ZN7TwoWire13rxBufferIndexE>
    3eee:	02 c0       	rjmp	.+4      	; 0x3ef4 <_ZN7TwoWire4readEv+0x24>
    3ef0:	2f ef       	ldi	r18, 0xFF	; 255
    3ef2:	3f ef       	ldi	r19, 0xFF	; 255
    3ef4:	c9 01       	movw	r24, r18
    3ef6:	08 95       	ret

00003ef8 <_ZN7TwoWire4peekEv>:
    3ef8:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <_ZN7TwoWire13rxBufferIndexE>
    3efc:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_ZN7TwoWire14rxBufferLengthE>
    3f00:	e8 17       	cp	r30, r24
    3f02:	30 f4       	brcc	.+12     	; 0x3f10 <_ZN7TwoWire4peekEv+0x18>
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	e3 5a       	subi	r30, 0xA3	; 163
    3f08:	fa 4f       	sbci	r31, 0xFA	; 250
    3f0a:	80 81       	ld	r24, Z
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	08 95       	ret
    3f10:	8f ef       	ldi	r24, 0xFF	; 255
    3f12:	9f ef       	ldi	r25, 0xFF	; 255
    3f14:	08 95       	ret

00003f16 <_ZN7TwoWire5flushEv>:
    3f16:	08 95       	ret

00003f18 <_ZN7TwoWire5writeEPKhj>:
    3f18:	cf 92       	push	r12
    3f1a:	df 92       	push	r13
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	7c 01       	movw	r14, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	8a 01       	movw	r16, r20
    3f2e:	20 91 37 05 	lds	r18, 0x0537	; 0x800537 <_ZN7TwoWire12transmittingE>
    3f32:	22 23       	and	r18, r18
    3f34:	89 f0       	breq	.+34     	; 0x3f58 <_ZN7TwoWire5writeEPKhj+0x40>
    3f36:	eb 01       	movw	r28, r22
    3f38:	6b 01       	movw	r12, r22
    3f3a:	c4 0e       	add	r12, r20
    3f3c:	d5 1e       	adc	r13, r21
    3f3e:	cc 15       	cp	r28, r12
    3f40:	dd 05       	cpc	r29, r13
    3f42:	69 f0       	breq	.+26     	; 0x3f5e <_ZN7TwoWire5writeEPKhj+0x46>
    3f44:	69 91       	ld	r22, Y+
    3f46:	d7 01       	movw	r26, r14
    3f48:	ed 91       	ld	r30, X+
    3f4a:	fc 91       	ld	r31, X
    3f4c:	01 90       	ld	r0, Z+
    3f4e:	f0 81       	ld	r31, Z
    3f50:	e0 2d       	mov	r30, r0
    3f52:	c7 01       	movw	r24, r14
    3f54:	09 95       	icall
    3f56:	f3 cf       	rjmp	.-26     	; 0x3f3e <_ZN7TwoWire5writeEPKhj+0x26>
    3f58:	64 2f       	mov	r22, r20
    3f5a:	0e 94 9f 20 	call	0x413e	; 0x413e <twi_transmit>
    3f5e:	c8 01       	movw	r24, r16
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	ff 90       	pop	r15
    3f6a:	ef 90       	pop	r14
    3f6c:	df 90       	pop	r13
    3f6e:	cf 90       	pop	r12
    3f70:	08 95       	ret

00003f72 <_ZN7TwoWire5writeEh>:
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	1f 92       	push	r1
    3f78:	cd b7       	in	r28, 0x3d	; 61
    3f7a:	de b7       	in	r29, 0x3e	; 62
    3f7c:	69 83       	std	Y+1, r22	; 0x01
    3f7e:	20 91 37 05 	lds	r18, 0x0537	; 0x800537 <_ZN7TwoWire12transmittingE>
    3f82:	22 23       	and	r18, r18
    3f84:	d1 f0       	breq	.+52     	; 0x3fba <_ZN7TwoWire5writeEh+0x48>
    3f86:	20 91 38 05 	lds	r18, 0x0538	; 0x800538 <_ZN7TwoWire14txBufferLengthE>
    3f8a:	20 32       	cpi	r18, 0x20	; 32
    3f8c:	40 f0       	brcs	.+16     	; 0x3f9e <_ZN7TwoWire5writeEh+0x2c>
    3f8e:	21 e0       	ldi	r18, 0x01	; 1
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	fc 01       	movw	r30, r24
    3f94:	33 83       	std	Z+3, r19	; 0x03
    3f96:	22 83       	std	Z+2, r18	; 0x02
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	15 c0       	rjmp	.+42     	; 0x3fc8 <_ZN7TwoWire5writeEh+0x56>
    3f9e:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <_ZN7TwoWire13txBufferIndexE>
    3fa2:	e8 2f       	mov	r30, r24
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	e6 5c       	subi	r30, 0xC6	; 198
    3fa8:	fa 4f       	sbci	r31, 0xFA	; 250
    3faa:	99 81       	ldd	r25, Y+1	; 0x01
    3fac:	90 83       	st	Z, r25
    3fae:	8f 5f       	subi	r24, 0xFF	; 255
    3fb0:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <_ZN7TwoWire13txBufferIndexE>
    3fb4:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <_ZN7TwoWire14txBufferLengthE>
    3fb8:	05 c0       	rjmp	.+10     	; 0x3fc4 <_ZN7TwoWire5writeEh+0x52>
    3fba:	61 e0       	ldi	r22, 0x01	; 1
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	01 96       	adiw	r24, 0x01	; 1
    3fc0:	0e 94 9f 20 	call	0x413e	; 0x413e <twi_transmit>
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0f 90       	pop	r0
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	08 95       	ret

00003fd0 <_ZN7TwoWireC1Ev>:
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	13 82       	std	Z+3, r1	; 0x03
    3fd4:	12 82       	std	Z+2, r1	; 0x02
    3fd6:	88 ee       	ldi	r24, 0xE8	; 232
    3fd8:	93 e0       	ldi	r25, 0x03	; 3
    3fda:	a0 e0       	ldi	r26, 0x00	; 0
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	84 83       	std	Z+4, r24	; 0x04
    3fe0:	95 83       	std	Z+5, r25	; 0x05
    3fe2:	a6 83       	std	Z+6, r26	; 0x06
    3fe4:	b7 83       	std	Z+7, r27	; 0x07
    3fe6:	82 ed       	ldi	r24, 0xD2	; 210
    3fe8:	93 e0       	ldi	r25, 0x03	; 3
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
    3fee:	08 95       	ret

00003ff0 <_ZN7TwoWire5beginEv>:
    3ff0:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <_ZN7TwoWire13rxBufferIndexE>
    3ff4:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <_ZN7TwoWire14rxBufferLengthE>
    3ff8:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <_ZN7TwoWire13txBufferIndexE>
    3ffc:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <_ZN7TwoWire14txBufferLengthE>
    4000:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <twi_init>

00004004 <_ZN7TwoWire17beginTransmissionEh>:
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <_ZN7TwoWire12transmittingE>
    400a:	60 93 5a 05 	sts	0x055A, r22	; 0x80055a <_ZN7TwoWire9txAddressE>
    400e:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <_ZN7TwoWire13txBufferIndexE>
    4012:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <_ZN7TwoWire14txBufferLengthE>
    4016:	08 95       	ret

00004018 <_ZN7TwoWire17beginTransmissionEi>:
    4018:	0c 94 02 20 	jmp	0x4004	; 0x4004 <_ZN7TwoWire17beginTransmissionEh>

0000401c <_ZN7TwoWire15endTransmissionEh>:
    401c:	0f 93       	push	r16
    401e:	06 2f       	mov	r16, r22
    4020:	21 e0       	ldi	r18, 0x01	; 1
    4022:	40 91 38 05 	lds	r20, 0x0538	; 0x800538 <_ZN7TwoWire14txBufferLengthE>
    4026:	6a e3       	ldi	r22, 0x3A	; 58
    4028:	75 e0       	ldi	r23, 0x05	; 5
    402a:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <_ZN7TwoWire9txAddressE>
    402e:	0e 94 49 20 	call	0x4092	; 0x4092 <twi_writeTo>
    4032:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <_ZN7TwoWire13txBufferIndexE>
    4036:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <_ZN7TwoWire14txBufferLengthE>
    403a:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <_ZN7TwoWire12transmittingE>
    403e:	0f 91       	pop	r16
    4040:	08 95       	ret

00004042 <_ZN7TwoWire15endTransmissionEv>:
    4042:	61 e0       	ldi	r22, 0x01	; 1
    4044:	0c 94 0e 20 	jmp	0x401c	; 0x401c <_ZN7TwoWire15endTransmissionEh>

00004048 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4048:	8b e2       	ldi	r24, 0x2B	; 43
    404a:	95 e0       	ldi	r25, 0x05	; 5
    404c:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <_ZN7TwoWireC1Ev>

00004050 <__cxa_pure_virtual>:
    4050:	0e 94 a8 22 	call	0x4550	; 0x4550 <abort>

00004054 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4054:	08 95       	ret

00004056 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4056:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <twi_state>
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <twi_sendStop>
    4060:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <twi_inRepStart>
    4064:	61 e0       	ldi	r22, 0x01	; 1
    4066:	82 e1       	ldi	r24, 0x12	; 18
    4068:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
    406c:	61 e0       	ldi	r22, 0x01	; 1
    406e:	83 e1       	ldi	r24, 0x13	; 19
    4070:	0e 94 14 13 	call	0x2628	; 0x2628 <digitalWrite>
    4074:	e9 eb       	ldi	r30, 0xB9	; 185
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	80 81       	ld	r24, Z
    407a:	8e 7f       	andi	r24, 0xFE	; 254
    407c:	80 83       	st	Z, r24
    407e:	80 81       	ld	r24, Z
    4080:	8d 7f       	andi	r24, 0xFD	; 253
    4082:	80 83       	st	Z, r24
    4084:	88 e4       	ldi	r24, 0x48	; 72
    4086:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    408a:	85 e4       	ldi	r24, 0x45	; 69
    408c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4090:	08 95       	ret

00004092 <twi_writeTo>:
    4092:	0f 93       	push	r16
    4094:	41 32       	cpi	r20, 0x21	; 33
    4096:	08 f0       	brcs	.+2      	; 0x409a <twi_writeTo+0x8>
    4098:	4a c0       	rjmp	.+148    	; 0x412e <twi_writeTo+0x9c>
    409a:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <twi_state>
    409e:	91 11       	cpse	r25, r1
    40a0:	fc cf       	rjmp	.-8      	; 0x409a <twi_writeTo+0x8>
    40a2:	32 e0       	ldi	r19, 0x02	; 2
    40a4:	30 93 ea 05 	sts	0x05EA, r19	; 0x8005ea <twi_state>
    40a8:	00 93 e8 05 	sts	0x05E8, r16	; 0x8005e8 <twi_sendStop>
    40ac:	3f ef       	ldi	r19, 0xFF	; 255
    40ae:	30 93 7d 05 	sts	0x057D, r19	; 0x80057d <twi_error>
    40b2:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <twi_masterBufferIndex>
    40b6:	40 93 c1 05 	sts	0x05C1, r20	; 0x8005c1 <twi_masterBufferLength>
    40ba:	56 2f       	mov	r21, r22
    40bc:	a3 ec       	ldi	r26, 0xC3	; 195
    40be:	b5 e0       	ldi	r27, 0x05	; 5
    40c0:	fb 01       	movw	r30, r22
    40c2:	3e 2f       	mov	r19, r30
    40c4:	35 1b       	sub	r19, r21
    40c6:	34 17       	cp	r19, r20
    40c8:	18 f4       	brcc	.+6      	; 0x40d0 <twi_writeTo+0x3e>
    40ca:	31 91       	ld	r19, Z+
    40cc:	3d 93       	st	X+, r19
    40ce:	f9 cf       	rjmp	.-14     	; 0x40c2 <twi_writeTo+0x30>
    40d0:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <twi_slarw>
    40d4:	30 91 e9 05 	lds	r19, 0x05E9	; 0x8005e9 <twi_slarw>
    40d8:	88 0f       	add	r24, r24
    40da:	83 2b       	or	r24, r19
    40dc:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <twi_slarw>
    40e0:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <twi_inRepStart>
    40e4:	81 30       	cpi	r24, 0x01	; 1
    40e6:	61 f4       	brne	.+24     	; 0x4100 <twi_writeTo+0x6e>
    40e8:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <twi_inRepStart>
    40ec:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <twi_slarw>
    40f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    40f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    40f8:	83 fd       	sbrc	r24, 3
    40fa:	f8 cf       	rjmp	.-16     	; 0x40ec <twi_writeTo+0x5a>
    40fc:	85 ec       	ldi	r24, 0xC5	; 197
    40fe:	01 c0       	rjmp	.+2      	; 0x4102 <twi_writeTo+0x70>
    4100:	85 ee       	ldi	r24, 0xE5	; 229
    4102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4106:	22 23       	and	r18, r18
    4108:	21 f0       	breq	.+8      	; 0x4112 <twi_writeTo+0x80>
    410a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <twi_state>
    410e:	82 30       	cpi	r24, 0x02	; 2
    4110:	d1 f3       	breq	.-12     	; 0x4106 <twi_writeTo+0x74>
    4112:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <twi_error>
    4116:	8f 3f       	cpi	r24, 0xFF	; 255
    4118:	79 f0       	breq	.+30     	; 0x4138 <twi_writeTo+0xa6>
    411a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <twi_error>
    411e:	80 32       	cpi	r24, 0x20	; 32
    4120:	41 f0       	breq	.+16     	; 0x4132 <twi_writeTo+0xa0>
    4122:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <twi_error>
    4126:	80 33       	cpi	r24, 0x30	; 48
    4128:	31 f0       	breq	.+12     	; 0x4136 <twi_writeTo+0xa4>
    412a:	94 e0       	ldi	r25, 0x04	; 4
    412c:	05 c0       	rjmp	.+10     	; 0x4138 <twi_writeTo+0xa6>
    412e:	91 e0       	ldi	r25, 0x01	; 1
    4130:	03 c0       	rjmp	.+6      	; 0x4138 <twi_writeTo+0xa6>
    4132:	92 e0       	ldi	r25, 0x02	; 2
    4134:	01 c0       	rjmp	.+2      	; 0x4138 <twi_writeTo+0xa6>
    4136:	93 e0       	ldi	r25, 0x03	; 3
    4138:	89 2f       	mov	r24, r25
    413a:	0f 91       	pop	r16
    413c:	08 95       	ret

0000413e <twi_transmit>:
    413e:	40 91 9f 05 	lds	r20, 0x059F	; 0x80059f <twi_txBufferLength>
    4142:	26 2f       	mov	r18, r22
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	24 0f       	add	r18, r20
    4148:	31 1d       	adc	r19, r1
    414a:	21 32       	cpi	r18, 0x21	; 33
    414c:	31 05       	cpc	r19, r1
    414e:	dc f4       	brge	.+54     	; 0x4186 <twi_transmit+0x48>
    4150:	20 91 ea 05 	lds	r18, 0x05EA	; 0x8005ea <twi_state>
    4154:	24 30       	cpi	r18, 0x04	; 4
    4156:	c9 f4       	brne	.+50     	; 0x418a <twi_transmit+0x4c>
    4158:	fc 01       	movw	r30, r24
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	86 17       	cp	r24, r22
    4160:	58 f4       	brcc	.+22     	; 0x4178 <twi_transmit+0x3a>
    4162:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <twi_txBufferLength>
    4166:	21 91       	ld	r18, Z+
    4168:	dc 01       	movw	r26, r24
    416a:	af 55       	subi	r26, 0x5F	; 95
    416c:	ba 4f       	sbci	r27, 0xFA	; 250
    416e:	a3 0f       	add	r26, r19
    4170:	b1 1d       	adc	r27, r1
    4172:	2c 93       	st	X, r18
    4174:	01 96       	adiw	r24, 0x01	; 1
    4176:	f3 cf       	rjmp	.-26     	; 0x415e <twi_transmit+0x20>
    4178:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_txBufferLength>
    417c:	68 0f       	add	r22, r24
    417e:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <twi_txBufferLength>
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	08 95       	ret
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	08 95       	ret
    418a:	82 e0       	ldi	r24, 0x02	; 2
    418c:	08 95       	ret

0000418e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    418e:	85 ed       	ldi	r24, 0xD5	; 213
    4190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4194:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4198:	84 fd       	sbrc	r24, 4
    419a:	fc cf       	rjmp	.-8      	; 0x4194 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    419c:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <twi_state>
    41a0:	08 95       	ret

000041a2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    41a2:	85 ec       	ldi	r24, 0xC5	; 197
    41a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    41a8:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <twi_state>
    41ac:	08 95       	ret

000041ae <__vector_24>:
}

ISR(TWI_vect)
{
    41ae:	1f 92       	push	r1
    41b0:	0f 92       	push	r0
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	0f 92       	push	r0
    41b6:	11 24       	eor	r1, r1
    41b8:	2f 93       	push	r18
    41ba:	3f 93       	push	r19
    41bc:	4f 93       	push	r20
    41be:	5f 93       	push	r21
    41c0:	6f 93       	push	r22
    41c2:	7f 93       	push	r23
    41c4:	8f 93       	push	r24
    41c6:	9f 93       	push	r25
    41c8:	af 93       	push	r26
    41ca:	bf 93       	push	r27
    41cc:	ef 93       	push	r30
    41ce:	ff 93       	push	r31
  switch(TW_STATUS){
    41d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    41d4:	88 7f       	andi	r24, 0xF8	; 248
    41d6:	80 36       	cpi	r24, 0x60	; 96
    41d8:	09 f4       	brne	.+2      	; 0x41dc <__vector_24+0x2e>
    41da:	9e c0       	rjmp	.+316    	; 0x4318 <__vector_24+0x16a>
    41dc:	78 f5       	brcc	.+94     	; 0x423c <__vector_24+0x8e>
    41de:	88 32       	cpi	r24, 0x28	; 40
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <__vector_24+0x36>
    41e2:	5d c0       	rjmp	.+186    	; 0x429e <__vector_24+0xf0>
    41e4:	90 f4       	brcc	.+36     	; 0x420a <__vector_24+0x5c>
    41e6:	80 31       	cpi	r24, 0x10	; 16
    41e8:	09 f4       	brne	.+2      	; 0x41ec <__vector_24+0x3e>
    41ea:	56 c0       	rjmp	.+172    	; 0x4298 <__vector_24+0xea>
    41ec:	38 f4       	brcc	.+14     	; 0x41fc <__vector_24+0x4e>
    41ee:	88 23       	and	r24, r24
    41f0:	09 f4       	brne	.+2      	; 0x41f4 <__vector_24+0x46>
    41f2:	f5 c0       	rjmp	.+490    	; 0x43de <__vector_24+0x230>
    41f4:	88 30       	cpi	r24, 0x08	; 8
    41f6:	09 f4       	brne	.+2      	; 0x41fa <__vector_24+0x4c>
    41f8:	4f c0       	rjmp	.+158    	; 0x4298 <__vector_24+0xea>
    41fa:	f5 c0       	rjmp	.+490    	; 0x43e6 <__vector_24+0x238>
    41fc:	88 31       	cpi	r24, 0x18	; 24
    41fe:	09 f4       	brne	.+2      	; 0x4202 <__vector_24+0x54>
    4200:	4e c0       	rjmp	.+156    	; 0x429e <__vector_24+0xf0>
    4202:	80 32       	cpi	r24, 0x20	; 32
    4204:	09 f4       	brne	.+2      	; 0x4208 <__vector_24+0x5a>
    4206:	5f c0       	rjmp	.+190    	; 0x42c6 <__vector_24+0x118>
    4208:	ee c0       	rjmp	.+476    	; 0x43e6 <__vector_24+0x238>
    420a:	80 34       	cpi	r24, 0x40	; 64
    420c:	09 f4       	brne	.+2      	; 0x4210 <__vector_24+0x62>
    420e:	6a c0       	rjmp	.+212    	; 0x42e4 <__vector_24+0x136>
    4210:	58 f4       	brcc	.+22     	; 0x4228 <__vector_24+0x7a>
    4212:	80 33       	cpi	r24, 0x30	; 48
    4214:	09 f4       	brne	.+2      	; 0x4218 <__vector_24+0x6a>
    4216:	57 c0       	rjmp	.+174    	; 0x42c6 <__vector_24+0x118>
    4218:	88 33       	cpi	r24, 0x38	; 56
    421a:	09 f0       	breq	.+2      	; 0x421e <__vector_24+0x70>
    421c:	e4 c0       	rjmp	.+456    	; 0x43e6 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    421e:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <twi_error>
      twi_releaseBus();
    4222:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <twi_releaseBus>
      break;
    4226:	df c0       	rjmp	.+446    	; 0x43e6 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4228:	80 35       	cpi	r24, 0x50	; 80
    422a:	09 f4       	brne	.+2      	; 0x422e <__vector_24+0x80>
    422c:	4f c0       	rjmp	.+158    	; 0x42cc <__vector_24+0x11e>
    422e:	88 35       	cpi	r24, 0x58	; 88
    4230:	09 f4       	brne	.+2      	; 0x4234 <__vector_24+0x86>
    4232:	5d c0       	rjmp	.+186    	; 0x42ee <__vector_24+0x140>
    4234:	88 34       	cpi	r24, 0x48	; 72
    4236:	09 f0       	breq	.+2      	; 0x423a <__vector_24+0x8c>
    4238:	d6 c0       	rjmp	.+428    	; 0x43e6 <__vector_24+0x238>
    423a:	d3 c0       	rjmp	.+422    	; 0x43e2 <__vector_24+0x234>
    423c:	88 39       	cpi	r24, 0x98	; 152
    423e:	09 f4       	brne	.+2      	; 0x4242 <__vector_24+0x94>
    4240:	c4 c0       	rjmp	.+392    	; 0x43ca <__vector_24+0x21c>
    4242:	a8 f4       	brcc	.+42     	; 0x426e <__vector_24+0xc0>
    4244:	88 37       	cpi	r24, 0x78	; 120
    4246:	09 f4       	brne	.+2      	; 0x424a <__vector_24+0x9c>
    4248:	67 c0       	rjmp	.+206    	; 0x4318 <__vector_24+0x16a>
    424a:	38 f4       	brcc	.+14     	; 0x425a <__vector_24+0xac>
    424c:	88 36       	cpi	r24, 0x68	; 104
    424e:	09 f4       	brne	.+2      	; 0x4252 <__vector_24+0xa4>
    4250:	63 c0       	rjmp	.+198    	; 0x4318 <__vector_24+0x16a>
    4252:	80 37       	cpi	r24, 0x70	; 112
    4254:	09 f4       	brne	.+2      	; 0x4258 <__vector_24+0xaa>
    4256:	60 c0       	rjmp	.+192    	; 0x4318 <__vector_24+0x16a>
    4258:	c6 c0       	rjmp	.+396    	; 0x43e6 <__vector_24+0x238>
    425a:	88 38       	cpi	r24, 0x88	; 136
    425c:	09 f4       	brne	.+2      	; 0x4260 <__vector_24+0xb2>
    425e:	b5 c0       	rjmp	.+362    	; 0x43ca <__vector_24+0x21c>
    4260:	80 39       	cpi	r24, 0x90	; 144
    4262:	09 f4       	brne	.+2      	; 0x4266 <__vector_24+0xb8>
    4264:	5f c0       	rjmp	.+190    	; 0x4324 <__vector_24+0x176>
    4266:	80 38       	cpi	r24, 0x80	; 128
    4268:	09 f0       	breq	.+2      	; 0x426c <__vector_24+0xbe>
    426a:	bd c0       	rjmp	.+378    	; 0x43e6 <__vector_24+0x238>
    426c:	5b c0       	rjmp	.+182    	; 0x4324 <__vector_24+0x176>
    426e:	80 3b       	cpi	r24, 0xB0	; 176
    4270:	09 f4       	brne	.+2      	; 0x4274 <__vector_24+0xc6>
    4272:	83 c0       	rjmp	.+262    	; 0x437a <__vector_24+0x1cc>
    4274:	38 f4       	brcc	.+14     	; 0x4284 <__vector_24+0xd6>
    4276:	80 3a       	cpi	r24, 0xA0	; 160
    4278:	09 f4       	brne	.+2      	; 0x427c <__vector_24+0xce>
    427a:	66 c0       	rjmp	.+204    	; 0x4348 <__vector_24+0x19a>
    427c:	88 3a       	cpi	r24, 0xA8	; 168
    427e:	09 f4       	brne	.+2      	; 0x4282 <__vector_24+0xd4>
    4280:	7c c0       	rjmp	.+248    	; 0x437a <__vector_24+0x1cc>
    4282:	b1 c0       	rjmp	.+354    	; 0x43e6 <__vector_24+0x238>
    4284:	80 3c       	cpi	r24, 0xC0	; 192
    4286:	09 f4       	brne	.+2      	; 0x428a <__vector_24+0xdc>
    4288:	a4 c0       	rjmp	.+328    	; 0x43d2 <__vector_24+0x224>
    428a:	88 3c       	cpi	r24, 0xC8	; 200
    428c:	09 f4       	brne	.+2      	; 0x4290 <__vector_24+0xe2>
    428e:	a1 c0       	rjmp	.+322    	; 0x43d2 <__vector_24+0x224>
    4290:	88 3b       	cpi	r24, 0xB8	; 184
    4292:	09 f4       	brne	.+2      	; 0x4296 <__vector_24+0xe8>
    4294:	87 c0       	rjmp	.+270    	; 0x43a4 <__vector_24+0x1f6>
    4296:	a7 c0       	rjmp	.+334    	; 0x43e6 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4298:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <twi_slarw>
    429c:	10 c0       	rjmp	.+32     	; 0x42be <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    429e:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <twi_masterBufferIndex>
    42a2:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <twi_masterBufferLength>
    42a6:	98 17       	cp	r25, r24
    42a8:	70 f5       	brcc	.+92     	; 0x4306 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    42aa:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <twi_masterBufferIndex>
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	8e 0f       	add	r24, r30
    42b2:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <twi_masterBufferIndex>
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	ed 53       	subi	r30, 0x3D	; 61
    42ba:	fa 4f       	sbci	r31, 0xFA	; 250
    42bc:	80 81       	ld	r24, Z
    42be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    42c2:	85 ec       	ldi	r24, 0xC5	; 197
    42c4:	83 c0       	rjmp	.+262    	; 0x43cc <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    42c6:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <twi_error>
    42ca:	8b c0       	rjmp	.+278    	; 0x43e2 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    42cc:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <twi_masterBufferIndex>
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	8e 0f       	add	r24, r30
    42d4:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <twi_masterBufferIndex>
    42d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    42dc:	f0 e0       	ldi	r31, 0x00	; 0
    42de:	ed 53       	subi	r30, 0x3D	; 61
    42e0:	fa 4f       	sbci	r31, 0xFA	; 250
    42e2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    42e4:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <twi_masterBufferIndex>
    42e8:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <twi_masterBufferLength>
    42ec:	6b c0       	rjmp	.+214    	; 0x43c4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    42ee:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <twi_masterBufferIndex>
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	8e 0f       	add	r24, r30
    42f6:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <twi_masterBufferIndex>
    42fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	ed 53       	subi	r30, 0x3D	; 61
    4302:	fa 4f       	sbci	r31, 0xFA	; 250
    4304:	80 83       	st	Z, r24
	if (twi_sendStop)
    4306:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <twi_sendStop>
    430a:	81 11       	cpse	r24, r1
    430c:	6a c0       	rjmp	.+212    	; 0x43e2 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4314:	84 ea       	ldi	r24, 0xA4	; 164
    4316:	5e c0       	rjmp	.+188    	; 0x43d4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4318:	83 e0       	ldi	r24, 0x03	; 3
    431a:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    431e:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <twi_rxBufferIndex>
    4322:	cf cf       	rjmp	.-98     	; 0x42c2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4324:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_rxBufferIndex>
    4328:	80 32       	cpi	r24, 0x20	; 32
    432a:	08 f0       	brcs	.+2      	; 0x432e <__vector_24+0x180>
    432c:	4e c0       	rjmp	.+156    	; 0x43ca <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    432e:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <twi_rxBufferIndex>
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	8e 0f       	add	r24, r30
    4336:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <twi_rxBufferIndex>
    433a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	e1 58       	subi	r30, 0x81	; 129
    4342:	fa 4f       	sbci	r31, 0xFA	; 250
    4344:	80 83       	st	Z, r24
    4346:	bd cf       	rjmp	.-134    	; 0x42c2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4348:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    434c:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_rxBufferIndex>
    4350:	80 32       	cpi	r24, 0x20	; 32
    4352:	30 f4       	brcc	.+12     	; 0x4360 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4354:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <twi_rxBufferIndex>
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	e1 58       	subi	r30, 0x81	; 129
    435c:	fa 4f       	sbci	r31, 0xFA	; 250
    435e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4360:	60 91 7e 05 	lds	r22, 0x057E	; 0x80057e <twi_rxBufferIndex>
    4364:	70 e0       	ldi	r23, 0x00	; 0
    4366:	e0 91 e3 05 	lds	r30, 0x05E3	; 0x8005e3 <twi_onSlaveReceive>
    436a:	f0 91 e4 05 	lds	r31, 0x05E4	; 0x8005e4 <twi_onSlaveReceive+0x1>
    436e:	8f e7       	ldi	r24, 0x7F	; 127
    4370:	95 e0       	ldi	r25, 0x05	; 5
    4372:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4374:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <twi_rxBufferIndex>
      break;
    4378:	36 c0       	rjmp	.+108    	; 0x43e6 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    437a:	84 e0       	ldi	r24, 0x04	; 4
    437c:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4380:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4384:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4388:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <twi_onSlaveTransmit>
    438c:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <twi_onSlaveTransmit+0x1>
    4390:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4392:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_txBufferLength>
    4396:	81 11       	cpse	r24, r1
    4398:	05 c0       	rjmp	.+10     	; 0x43a4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    43a0:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    43a4:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <twi_txBufferIndex>
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	8e 0f       	add	r24, r30
    43ac:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <twi_txBufferIndex>
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	ef 55       	subi	r30, 0x5F	; 95
    43b4:	fa 4f       	sbci	r31, 0xFA	; 250
    43b6:	80 81       	ld	r24, Z
    43b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    43bc:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <twi_txBufferIndex>
    43c0:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <twi_txBufferLength>
    43c4:	98 17       	cp	r25, r24
    43c6:	08 f4       	brcc	.+2      	; 0x43ca <__vector_24+0x21c>
    43c8:	7c cf       	rjmp	.-264    	; 0x42c2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    43ca:	85 e8       	ldi	r24, 0x85	; 133
    43cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    43d0:	0a c0       	rjmp	.+20     	; 0x43e6 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    43d2:	85 ec       	ldi	r24, 0xC5	; 197
    43d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    43d8:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <twi_state>
      break;
    43dc:	04 c0       	rjmp	.+8      	; 0x43e6 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    43de:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <twi_error>
      twi_stop();
    43e2:	0e 94 c7 20 	call	0x418e	; 0x418e <twi_stop>
      break;
  }
}
    43e6:	ff 91       	pop	r31
    43e8:	ef 91       	pop	r30
    43ea:	bf 91       	pop	r27
    43ec:	af 91       	pop	r26
    43ee:	9f 91       	pop	r25
    43f0:	8f 91       	pop	r24
    43f2:	7f 91       	pop	r23
    43f4:	6f 91       	pop	r22
    43f6:	5f 91       	pop	r21
    43f8:	4f 91       	pop	r20
    43fa:	3f 91       	pop	r19
    43fc:	2f 91       	pop	r18
    43fe:	0f 90       	pop	r0
    4400:	0f be       	out	0x3f, r0	; 63
    4402:	0f 90       	pop	r0
    4404:	1f 90       	pop	r1
    4406:	18 95       	reti

00004408 <__cmpsf2>:
    4408:	0e 94 09 22 	call	0x4412	; 0x4412 <__fp_cmp>
    440c:	08 f4       	brcc	.+2      	; 0x4410 <__cmpsf2+0x8>
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	08 95       	ret

00004412 <__fp_cmp>:
    4412:	99 0f       	add	r25, r25
    4414:	00 08       	sbc	r0, r0
    4416:	55 0f       	add	r21, r21
    4418:	aa 0b       	sbc	r26, r26
    441a:	e0 e8       	ldi	r30, 0x80	; 128
    441c:	fe ef       	ldi	r31, 0xFE	; 254
    441e:	16 16       	cp	r1, r22
    4420:	17 06       	cpc	r1, r23
    4422:	e8 07       	cpc	r30, r24
    4424:	f9 07       	cpc	r31, r25
    4426:	c0 f0       	brcs	.+48     	; 0x4458 <__fp_cmp+0x46>
    4428:	12 16       	cp	r1, r18
    442a:	13 06       	cpc	r1, r19
    442c:	e4 07       	cpc	r30, r20
    442e:	f5 07       	cpc	r31, r21
    4430:	98 f0       	brcs	.+38     	; 0x4458 <__fp_cmp+0x46>
    4432:	62 1b       	sub	r22, r18
    4434:	73 0b       	sbc	r23, r19
    4436:	84 0b       	sbc	r24, r20
    4438:	95 0b       	sbc	r25, r21
    443a:	39 f4       	brne	.+14     	; 0x444a <__fp_cmp+0x38>
    443c:	0a 26       	eor	r0, r26
    443e:	61 f0       	breq	.+24     	; 0x4458 <__fp_cmp+0x46>
    4440:	23 2b       	or	r18, r19
    4442:	24 2b       	or	r18, r20
    4444:	25 2b       	or	r18, r21
    4446:	21 f4       	brne	.+8      	; 0x4450 <__fp_cmp+0x3e>
    4448:	08 95       	ret
    444a:	0a 26       	eor	r0, r26
    444c:	09 f4       	brne	.+2      	; 0x4450 <__fp_cmp+0x3e>
    444e:	a1 40       	sbci	r26, 0x01	; 1
    4450:	a6 95       	lsr	r26
    4452:	8f ef       	ldi	r24, 0xFF	; 255
    4454:	81 1d       	adc	r24, r1
    4456:	81 1d       	adc	r24, r1
    4458:	08 95       	ret

0000445a <__gesf2>:
    445a:	0e 94 09 22 	call	0x4412	; 0x4412 <__fp_cmp>
    445e:	08 f4       	brcc	.+2      	; 0x4462 <__gesf2+0x8>
    4460:	8f ef       	ldi	r24, 0xFF	; 255
    4462:	08 95       	ret

00004464 <__unordsf2>:
    4464:	0e 94 09 22 	call	0x4412	; 0x4412 <__fp_cmp>
    4468:	88 0b       	sbc	r24, r24
    446a:	99 0b       	sbc	r25, r25
    446c:	08 95       	ret

0000446e <__mulsi3>:
    446e:	db 01       	movw	r26, r22
    4470:	8f 93       	push	r24
    4472:	9f 93       	push	r25
    4474:	0e 94 88 22 	call	0x4510	; 0x4510 <__muluhisi3>
    4478:	bf 91       	pop	r27
    447a:	af 91       	pop	r26
    447c:	a2 9f       	mul	r26, r18
    447e:	80 0d       	add	r24, r0
    4480:	91 1d       	adc	r25, r1
    4482:	a3 9f       	mul	r26, r19
    4484:	90 0d       	add	r25, r0
    4486:	b2 9f       	mul	r27, r18
    4488:	90 0d       	add	r25, r0
    448a:	11 24       	eor	r1, r1
    448c:	08 95       	ret

0000448e <__udivmodsi4>:
    448e:	a1 e2       	ldi	r26, 0x21	; 33
    4490:	1a 2e       	mov	r1, r26
    4492:	aa 1b       	sub	r26, r26
    4494:	bb 1b       	sub	r27, r27
    4496:	fd 01       	movw	r30, r26
    4498:	0d c0       	rjmp	.+26     	; 0x44b4 <__udivmodsi4_ep>

0000449a <__udivmodsi4_loop>:
    449a:	aa 1f       	adc	r26, r26
    449c:	bb 1f       	adc	r27, r27
    449e:	ee 1f       	adc	r30, r30
    44a0:	ff 1f       	adc	r31, r31
    44a2:	a2 17       	cp	r26, r18
    44a4:	b3 07       	cpc	r27, r19
    44a6:	e4 07       	cpc	r30, r20
    44a8:	f5 07       	cpc	r31, r21
    44aa:	20 f0       	brcs	.+8      	; 0x44b4 <__udivmodsi4_ep>
    44ac:	a2 1b       	sub	r26, r18
    44ae:	b3 0b       	sbc	r27, r19
    44b0:	e4 0b       	sbc	r30, r20
    44b2:	f5 0b       	sbc	r31, r21

000044b4 <__udivmodsi4_ep>:
    44b4:	66 1f       	adc	r22, r22
    44b6:	77 1f       	adc	r23, r23
    44b8:	88 1f       	adc	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	1a 94       	dec	r1
    44be:	69 f7       	brne	.-38     	; 0x449a <__udivmodsi4_loop>
    44c0:	60 95       	com	r22
    44c2:	70 95       	com	r23
    44c4:	80 95       	com	r24
    44c6:	90 95       	com	r25
    44c8:	9b 01       	movw	r18, r22
    44ca:	ac 01       	movw	r20, r24
    44cc:	bd 01       	movw	r22, r26
    44ce:	cf 01       	movw	r24, r30
    44d0:	08 95       	ret

000044d2 <__divmodsi4>:
    44d2:	05 2e       	mov	r0, r21
    44d4:	97 fb       	bst	r25, 7
    44d6:	1e f4       	brtc	.+6      	; 0x44de <__divmodsi4+0xc>
    44d8:	00 94       	com	r0
    44da:	0e 94 80 22 	call	0x4500	; 0x4500 <__negsi2>
    44de:	57 fd       	sbrc	r21, 7
    44e0:	07 d0       	rcall	.+14     	; 0x44f0 <__divmodsi4_neg2>
    44e2:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    44e6:	07 fc       	sbrc	r0, 7
    44e8:	03 d0       	rcall	.+6      	; 0x44f0 <__divmodsi4_neg2>
    44ea:	4e f4       	brtc	.+18     	; 0x44fe <__divmodsi4_exit>
    44ec:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__negsi2>

000044f0 <__divmodsi4_neg2>:
    44f0:	50 95       	com	r21
    44f2:	40 95       	com	r20
    44f4:	30 95       	com	r19
    44f6:	21 95       	neg	r18
    44f8:	3f 4f       	sbci	r19, 0xFF	; 255
    44fa:	4f 4f       	sbci	r20, 0xFF	; 255
    44fc:	5f 4f       	sbci	r21, 0xFF	; 255

000044fe <__divmodsi4_exit>:
    44fe:	08 95       	ret

00004500 <__negsi2>:
    4500:	90 95       	com	r25
    4502:	80 95       	com	r24
    4504:	70 95       	com	r23
    4506:	61 95       	neg	r22
    4508:	7f 4f       	sbci	r23, 0xFF	; 255
    450a:	8f 4f       	sbci	r24, 0xFF	; 255
    450c:	9f 4f       	sbci	r25, 0xFF	; 255
    450e:	08 95       	ret

00004510 <__muluhisi3>:
    4510:	0e 94 99 22 	call	0x4532	; 0x4532 <__umulhisi3>
    4514:	a5 9f       	mul	r26, r21
    4516:	90 0d       	add	r25, r0
    4518:	b4 9f       	mul	r27, r20
    451a:	90 0d       	add	r25, r0
    451c:	a4 9f       	mul	r26, r20
    451e:	80 0d       	add	r24, r0
    4520:	91 1d       	adc	r25, r1
    4522:	11 24       	eor	r1, r1
    4524:	08 95       	ret

00004526 <__tablejump2__>:
    4526:	ee 0f       	add	r30, r30
    4528:	ff 1f       	adc	r31, r31
    452a:	05 90       	lpm	r0, Z+
    452c:	f4 91       	lpm	r31, Z
    452e:	e0 2d       	mov	r30, r0
    4530:	09 94       	ijmp

00004532 <__umulhisi3>:
    4532:	a2 9f       	mul	r26, r18
    4534:	b0 01       	movw	r22, r0
    4536:	b3 9f       	mul	r27, r19
    4538:	c0 01       	movw	r24, r0
    453a:	a3 9f       	mul	r26, r19
    453c:	70 0d       	add	r23, r0
    453e:	81 1d       	adc	r24, r1
    4540:	11 24       	eor	r1, r1
    4542:	91 1d       	adc	r25, r1
    4544:	b2 9f       	mul	r27, r18
    4546:	70 0d       	add	r23, r0
    4548:	81 1d       	adc	r24, r1
    454a:	11 24       	eor	r1, r1
    454c:	91 1d       	adc	r25, r1
    454e:	08 95       	ret

00004550 <abort>:
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	f8 94       	cli
    4556:	0c 94 ad 22 	jmp	0x455a	; 0x455a <_exit>

0000455a <_exit>:
    455a:	f8 94       	cli

0000455c <__stop_program>:
    455c:	ff cf       	rjmp	.-2      	; 0x455c <__stop_program>
