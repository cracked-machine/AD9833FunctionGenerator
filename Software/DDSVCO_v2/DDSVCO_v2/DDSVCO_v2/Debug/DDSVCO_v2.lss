
DDSVCO_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800100  00800100  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d43  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000839  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000905  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  00003261  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000037aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__ctors_end>
   4:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
   8:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
   c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  10:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  14:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  18:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  1c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  20:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  24:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  28:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  2c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  34:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  38:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  3c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  44:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  48:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  4c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  50:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  54:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  58:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  5c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  60:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_24>
  64:	0c 94 4a 01 	jmp	0x294	; 0x294 <__bad_interrupt>
  68:	62 03       	mulsu	r22, r18
  6a:	68 03       	fmul	r22, r16
  6c:	68 03       	fmul	r22, r16
  6e:	68 03       	fmul	r22, r16
  70:	68 03       	fmul	r22, r16
  72:	68 03       	fmul	r22, r16
  74:	68 03       	fmul	r22, r16
  76:	68 03       	fmul	r22, r16
  78:	56 02       	muls	r21, r22
  7a:	68 03       	fmul	r22, r16
  7c:	68 03       	fmul	r22, r16
  7e:	68 03       	fmul	r22, r16
  80:	68 03       	fmul	r22, r16
  82:	68 03       	fmul	r22, r16
  84:	68 03       	fmul	r22, r16
  86:	68 03       	fmul	r22, r16
  88:	56 02       	muls	r21, r22
  8a:	68 03       	fmul	r22, r16
  8c:	68 03       	fmul	r22, r16
  8e:	68 03       	fmul	r22, r16
  90:	68 03       	fmul	r22, r16
  92:	68 03       	fmul	r22, r16
  94:	68 03       	fmul	r22, r16
  96:	68 03       	fmul	r22, r16
  98:	60 02       	muls	r22, r16
  9a:	68 03       	fmul	r22, r16
  9c:	68 03       	fmul	r22, r16
  9e:	68 03       	fmul	r22, r16
  a0:	68 03       	fmul	r22, r16
  a2:	68 03       	fmul	r22, r16
  a4:	68 03       	fmul	r22, r16
  a6:	68 03       	fmul	r22, r16
  a8:	8c 02       	muls	r24, r28
  aa:	68 03       	fmul	r22, r16
  ac:	68 03       	fmul	r22, r16
  ae:	68 03       	fmul	r22, r16
  b0:	68 03       	fmul	r22, r16
  b2:	68 03       	fmul	r22, r16
  b4:	68 03       	fmul	r22, r16
  b6:	68 03       	fmul	r22, r16
  b8:	60 02       	muls	r22, r16
  ba:	68 03       	fmul	r22, r16
  bc:	68 03       	fmul	r22, r16
  be:	68 03       	fmul	r22, r16
  c0:	68 03       	fmul	r22, r16
  c2:	68 03       	fmul	r22, r16
  c4:	68 03       	fmul	r22, r16
  c6:	68 03       	fmul	r22, r16
  c8:	92 02       	muls	r25, r18
  ca:	68 03       	fmul	r22, r16
  cc:	68 03       	fmul	r22, r16
  ce:	68 03       	fmul	r22, r16
  d0:	68 03       	fmul	r22, r16
  d2:	68 03       	fmul	r22, r16
  d4:	68 03       	fmul	r22, r16
  d6:	68 03       	fmul	r22, r16
  d8:	98 02       	muls	r25, r24
  da:	68 03       	fmul	r22, r16
  dc:	68 03       	fmul	r22, r16
  de:	68 03       	fmul	r22, r16
  e0:	68 03       	fmul	r22, r16
  e2:	68 03       	fmul	r22, r16
  e4:	68 03       	fmul	r22, r16
  e6:	68 03       	fmul	r22, r16
  e8:	ae 02       	muls	r26, r30
  ea:	68 03       	fmul	r22, r16
  ec:	68 03       	fmul	r22, r16
  ee:	68 03       	fmul	r22, r16
  f0:	68 03       	fmul	r22, r16
  f2:	68 03       	fmul	r22, r16
  f4:	68 03       	fmul	r22, r16
  f6:	68 03       	fmul	r22, r16
  f8:	de 02       	muls	r29, r30
  fa:	68 03       	fmul	r22, r16
  fc:	68 03       	fmul	r22, r16
  fe:	68 03       	fmul	r22, r16
 100:	68 03       	fmul	r22, r16
 102:	68 03       	fmul	r22, r16
 104:	68 03       	fmul	r22, r16
 106:	68 03       	fmul	r22, r16
 108:	9e 02       	muls	r25, r30
 10a:	68 03       	fmul	r22, r16
 10c:	68 03       	fmul	r22, r16
 10e:	68 03       	fmul	r22, r16
 110:	68 03       	fmul	r22, r16
 112:	68 03       	fmul	r22, r16
 114:	68 03       	fmul	r22, r16
 116:	68 03       	fmul	r22, r16
 118:	bc 02       	muls	r27, r28
 11a:	68 03       	fmul	r22, r16
 11c:	68 03       	fmul	r22, r16
 11e:	68 03       	fmul	r22, r16
 120:	68 03       	fmul	r22, r16
 122:	68 03       	fmul	r22, r16
 124:	68 03       	fmul	r22, r16
 126:	68 03       	fmul	r22, r16
 128:	e1 02       	muls	r30, r17
 12a:	68 03       	fmul	r22, r16
 12c:	68 03       	fmul	r22, r16
 12e:	68 03       	fmul	r22, r16
 130:	68 03       	fmul	r22, r16
 132:	68 03       	fmul	r22, r16
 134:	68 03       	fmul	r22, r16
 136:	68 03       	fmul	r22, r16
 138:	e1 02       	muls	r30, r17
 13a:	68 03       	fmul	r22, r16
 13c:	68 03       	fmul	r22, r16
 13e:	68 03       	fmul	r22, r16
 140:	68 03       	fmul	r22, r16
 142:	68 03       	fmul	r22, r16
 144:	68 03       	fmul	r22, r16
 146:	68 03       	fmul	r22, r16
 148:	e1 02       	muls	r30, r17
 14a:	68 03       	fmul	r22, r16
 14c:	68 03       	fmul	r22, r16
 14e:	68 03       	fmul	r22, r16
 150:	68 03       	fmul	r22, r16
 152:	68 03       	fmul	r22, r16
 154:	68 03       	fmul	r22, r16
 156:	68 03       	fmul	r22, r16
 158:	e1 02       	muls	r30, r17
 15a:	68 03       	fmul	r22, r16
 15c:	68 03       	fmul	r22, r16
 15e:	68 03       	fmul	r22, r16
 160:	68 03       	fmul	r22, r16
 162:	68 03       	fmul	r22, r16
 164:	68 03       	fmul	r22, r16
 166:	68 03       	fmul	r22, r16
 168:	ea 02       	muls	r30, r26
 16a:	68 03       	fmul	r22, r16
 16c:	68 03       	fmul	r22, r16
 16e:	68 03       	fmul	r22, r16
 170:	68 03       	fmul	r22, r16
 172:	68 03       	fmul	r22, r16
 174:	68 03       	fmul	r22, r16
 176:	68 03       	fmul	r22, r16
 178:	24 03       	mulsu	r18, r20
 17a:	68 03       	fmul	r22, r16
 17c:	68 03       	fmul	r22, r16
 17e:	68 03       	fmul	r22, r16
 180:	68 03       	fmul	r22, r16
 182:	68 03       	fmul	r22, r16
 184:	68 03       	fmul	r22, r16
 186:	68 03       	fmul	r22, r16
 188:	ea 02       	muls	r30, r26
 18a:	68 03       	fmul	r22, r16
 18c:	68 03       	fmul	r22, r16
 18e:	68 03       	fmul	r22, r16
 190:	68 03       	fmul	r22, r16
 192:	68 03       	fmul	r22, r16
 194:	68 03       	fmul	r22, r16
 196:	68 03       	fmul	r22, r16
 198:	24 03       	mulsu	r18, r20
 19a:	68 03       	fmul	r22, r16
 19c:	68 03       	fmul	r22, r16
 19e:	68 03       	fmul	r22, r16
 1a0:	68 03       	fmul	r22, r16
 1a2:	68 03       	fmul	r22, r16
 1a4:	68 03       	fmul	r22, r16
 1a6:	68 03       	fmul	r22, r16
 1a8:	06 03       	mulsu	r16, r22
 1aa:	68 03       	fmul	r22, r16
 1ac:	68 03       	fmul	r22, r16
 1ae:	68 03       	fmul	r22, r16
 1b0:	68 03       	fmul	r22, r16
 1b2:	68 03       	fmul	r22, r16
 1b4:	68 03       	fmul	r22, r16
 1b6:	68 03       	fmul	r22, r16
 1b8:	28 03       	fmul	r18, r16
 1ba:	68 03       	fmul	r22, r16
 1bc:	68 03       	fmul	r22, r16
 1be:	68 03       	fmul	r22, r16
 1c0:	68 03       	fmul	r22, r16
 1c2:	68 03       	fmul	r22, r16
 1c4:	68 03       	fmul	r22, r16
 1c6:	68 03       	fmul	r22, r16
 1c8:	28 03       	fmul	r18, r16
 1ca:	68 03       	fmul	r22, r16
 1cc:	68 03       	fmul	r22, r16
 1ce:	68 03       	fmul	r22, r16
 1d0:	68 03       	fmul	r22, r16
 1d2:	68 03       	fmul	r22, r16
 1d4:	68 03       	fmul	r22, r16
 1d6:	68 03       	fmul	r22, r16
 1d8:	3e 03       	fmul	r19, r22
 1da:	68 03       	fmul	r22, r16
 1dc:	68 03       	fmul	r22, r16
 1de:	68 03       	fmul	r22, r16
 1e0:	68 03       	fmul	r22, r16
 1e2:	68 03       	fmul	r22, r16
 1e4:	68 03       	fmul	r22, r16
 1e6:	68 03       	fmul	r22, r16
 1e8:	5c 03       	fmul	r21, r20
 1ea:	68 03       	fmul	r22, r16
 1ec:	68 03       	fmul	r22, r16
 1ee:	68 03       	fmul	r22, r16
 1f0:	68 03       	fmul	r22, r16
 1f2:	68 03       	fmul	r22, r16
 1f4:	68 03       	fmul	r22, r16
 1f6:	68 03       	fmul	r22, r16
 1f8:	5c 03       	fmul	r21, r20
 1fa:	68 03       	fmul	r22, r16
 1fc:	68 03       	fmul	r22, r16
 1fe:	68 03       	fmul	r22, r16
 200:	68 03       	fmul	r22, r16
 202:	68 03       	fmul	r22, r16
 204:	68 03       	fmul	r22, r16
 206:	68 03       	fmul	r22, r16
 208:	68 03       	fmul	r22, r16
 20a:	68 03       	fmul	r22, r16
 20c:	68 03       	fmul	r22, r16
 20e:	68 03       	fmul	r22, r16
 210:	68 03       	fmul	r22, r16
 212:	68 03       	fmul	r22, r16
 214:	68 03       	fmul	r22, r16
 216:	68 03       	fmul	r22, r16
 218:	68 03       	fmul	r22, r16
 21a:	68 03       	fmul	r22, r16
 21c:	68 03       	fmul	r22, r16
 21e:	68 03       	fmul	r22, r16
 220:	68 03       	fmul	r22, r16
 222:	68 03       	fmul	r22, r16
 224:	68 03       	fmul	r22, r16
 226:	68 03       	fmul	r22, r16
 228:	68 03       	fmul	r22, r16
 22a:	68 03       	fmul	r22, r16
 22c:	68 03       	fmul	r22, r16
 22e:	68 03       	fmul	r22, r16
 230:	68 03       	fmul	r22, r16
 232:	68 03       	fmul	r22, r16
 234:	68 03       	fmul	r22, r16
 236:	68 03       	fmul	r22, r16
 238:	68 03       	fmul	r22, r16
 23a:	68 03       	fmul	r22, r16
 23c:	68 03       	fmul	r22, r16
 23e:	68 03       	fmul	r22, r16
 240:	68 03       	fmul	r22, r16
 242:	68 03       	fmul	r22, r16
 244:	68 03       	fmul	r22, r16
 246:	68 03       	fmul	r22, r16
 248:	68 03       	fmul	r22, r16
 24a:	68 03       	fmul	r22, r16
 24c:	68 03       	fmul	r22, r16
 24e:	68 03       	fmul	r22, r16
 250:	68 03       	fmul	r22, r16
 252:	68 03       	fmul	r22, r16
 254:	68 03       	fmul	r22, r16
 256:	68 03       	fmul	r22, r16
 258:	67 03       	mulsu	r22, r23

0000025a <__ctors_end>:
 25a:	11 24       	eor	r1, r1
 25c:	1f be       	out	0x3f, r1	; 63
 25e:	cf ef       	ldi	r28, 0xFF	; 255
 260:	d8 e0       	ldi	r29, 0x08	; 8
 262:	de bf       	out	0x3e, r29	; 62
 264:	cd bf       	out	0x3d, r28	; 61

00000266 <__do_copy_data>:
 266:	11 e0       	ldi	r17, 0x01	; 1
 268:	a0 e0       	ldi	r26, 0x00	; 0
 26a:	b1 e0       	ldi	r27, 0x01	; 1
 26c:	ee e3       	ldi	r30, 0x3E	; 62
 26e:	f8 e0       	ldi	r31, 0x08	; 8
 270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
 272:	05 90       	lpm	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	a0 30       	cpi	r26, 0x00	; 0
 278:	b1 07       	cpc	r27, r17
 27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	a0 e0       	ldi	r26, 0x00	; 0
 280:	b1 e0       	ldi	r27, 0x01	; 1
 282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
 284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
 286:	ae 36       	cpi	r26, 0x6E	; 110
 288:	b2 07       	cpc	r27, r18
 28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
 28c:	0e 94 10 04 	call	0x820	; 0x820 <main>
 290:	0c 94 1d 04 	jmp	0x83a	; 0x83a <_exit>

00000294 <__bad_interrupt>:
 294:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000298 <twowire_writeTo>:
 * Output   none
 */
void twowire_attachSlaveTxEvent( void (*function)(void) )
{
  twowire_onSlaveTransmit = function;
}
 298:	0f 93       	push	r16
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	27 97       	sbiw	r28, 0x07	; 7
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	7c 83       	std	Y+4, r23	; 0x04
 2b2:	6b 83       	std	Y+3, r22	; 0x03
 2b4:	4d 83       	std	Y+5, r20	; 0x05
 2b6:	2e 83       	std	Y+6, r18	; 0x06
 2b8:	0f 83       	std	Y+7, r16	; 0x07
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
 2bc:	81 32       	cpi	r24, 0x21	; 33
 2be:	18 f0       	brcs	.+6      	; 0x2c6 <twowire_writeTo+0x2e>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	76 c0       	rjmp	.+236    	; 0x3b0 <twowire_writeTo+0x118>
 2c4:	00 00       	nop
 2c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 2ca:	88 23       	and	r24, r24
 2cc:	d9 f7       	brne	.-10     	; 0x2c4 <twowire_writeTo+0x2c>
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 2d4:	8f 81       	ldd	r24, Y+7	; 0x07
 2d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <twi_sendStop>
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_error>
 2e0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <twi_masterBufferIndex>
 2e4:	8d 81       	ldd	r24, Y+5	; 0x05
 2e6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <twi_masterBufferLength>
 2ea:	19 82       	std	Y+1, r1	; 0x01
 2ec:	13 c0       	rjmp	.+38     	; 0x314 <twowire_writeTo+0x7c>
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	22 2f       	mov	r18, r18
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	4b 81       	ldd	r20, Y+3	; 0x03
 2fc:	5c 81       	ldd	r21, Y+4	; 0x04
 2fe:	24 0f       	add	r18, r20
 300:	35 1f       	adc	r19, r21
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	88 5f       	subi	r24, 0xF8	; 248
 308:	9e 4f       	sbci	r25, 0xFE	; 254
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	99 81       	ldd	r25, Y+1	; 0x01
 316:	8d 81       	ldd	r24, Y+5	; 0x05
 318:	98 17       	cp	r25, r24
 31a:	48 f3       	brcs	.-46     	; 0x2ee <twowire_writeTo+0x56>
 31c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <twi_slarw>
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	98 2f       	mov	r25, r24
 32c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <twi_slarw>
 330:	89 2b       	or	r24, r25
 332:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <twi_slarw>
 336:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_inRepStart>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	c1 f4       	brne	.+48     	; 0x36e <twowire_writeTo+0xd6>
 33e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <twi_inRepStart>
 342:	8b eb       	ldi	r24, 0xBB	; 187
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <twi_slarw>
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
 34e:	8c eb       	ldi	r24, 0xBC	; 188
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	80 81       	ld	r24, Z
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	88 70       	andi	r24, 0x08	; 8
 35c:	99 27       	eor	r25, r25
 35e:	89 2b       	or	r24, r25
 360:	81 f7       	brne	.-32     	; 0x342 <twowire_writeTo+0xaa>
 362:	8c eb       	ldi	r24, 0xBC	; 188
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	25 ec       	ldi	r18, 0xC5	; 197
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
 36c:	07 c0       	rjmp	.+14     	; 0x37c <twowire_writeTo+0xe4>
 36e:	8c eb       	ldi	r24, 0xBC	; 188
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	25 ee       	ldi	r18, 0xE5	; 229
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
 378:	01 c0       	rjmp	.+2      	; 0x37c <twowire_writeTo+0xe4>
 37a:	00 00       	nop
 37c:	8e 81       	ldd	r24, Y+6	; 0x06
 37e:	88 23       	and	r24, r24
 380:	21 f0       	breq	.+8      	; 0x38a <twowire_writeTo+0xf2>
 382:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	c1 f3       	breq	.-16     	; 0x37a <twowire_writeTo+0xe2>
 38a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi_error>
 38e:	8f 3f       	cpi	r24, 0xFF	; 255
 390:	11 f4       	brne	.+4      	; 0x396 <twowire_writeTo+0xfe>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0d c0       	rjmp	.+26     	; 0x3b0 <twowire_writeTo+0x118>
 396:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi_error>
 39a:	80 32       	cpi	r24, 0x20	; 32
 39c:	11 f4       	brne	.+4      	; 0x3a2 <twowire_writeTo+0x10a>
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <twowire_writeTo+0x118>
 3a2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi_error>
 3a6:	80 33       	cpi	r24, 0x30	; 48
 3a8:	11 f4       	brne	.+4      	; 0x3ae <twowire_writeTo+0x116>
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <twowire_writeTo+0x118>
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	27 96       	adiw	r28, 0x07	; 7
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <twowire_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twowire_reply(uint8_t ack)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	1f 92       	push	r1
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 23       	and	r24, r24
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <twowire_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 3d6:	8c eb       	ldi	r24, 0xBC	; 188
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	25 ec       	ldi	r18, 0xC5	; 197
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <twowire_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 3e2:	8c eb       	ldi	r24, 0xBC	; 188
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	25 e8       	ldi	r18, 0x85	; 133
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
  }
}
 3ec:	00 00       	nop
 3ee:	0f 90       	pop	r0
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <twowire_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twowire_stop(void)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 3fe:	8c eb       	ldi	r24, 0xBC	; 188
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	25 ed       	ldi	r18, 0xD5	; 213
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    continue;
 40a:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 40c:	8c eb       	ldi	r24, 0xBC	; 188
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	80 71       	andi	r24, 0x10	; 16
 41a:	99 27       	eor	r25, r25
 41c:	89 2b       	or	r24, r25
 41e:	a9 f7       	brne	.-22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 420:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
}
 424:	00 00       	nop
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <twowire_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twowire_releaseBus(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 434:	8c eb       	ldi	r24, 0xBC	; 188
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	25 ec       	ldi	r18, 0xC5	; 197
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
 43e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
}
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <__vector_24>:

ISR(TWI_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
 476:	89 eb       	ldi	r24, 0xB9	; 185
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	fc 01       	movw	r30, r24
 47c:	80 81       	ld	r24, Z
 47e:	88 2f       	mov	r24, r24
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	88 7f       	andi	r24, 0xF8	; 248
 484:	99 27       	eor	r25, r25
 486:	09 2e       	mov	r0, r25
 488:	00 0c       	add	r0, r0
 48a:	aa 0b       	sbc	r26, r26
 48c:	bb 0b       	sbc	r27, r27
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	28 ef       	ldi	r18, 0xF8	; 248
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	84 1b       	sub	r24, r20
 498:	95 0b       	sbc	r25, r21
 49a:	28 17       	cp	r18, r24
 49c:	39 07       	cpc	r19, r25
 49e:	08 f4       	brcc	.+2      	; 0x4a2 <__vector_24+0x58>
 4a0:	17 c1       	rjmp	.+558    	; 0x6d0 <__vector_24+0x286>
 4a2:	8c 5c       	subi	r24, 0xCC	; 204
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	fc 01       	movw	r30, r24
 4a8:	0c 94 17 04 	jmp	0x82e	; 0x82e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 4ac:	8b eb       	ldi	r24, 0xBB	; 187
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <twi_slarw>
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
      twowire_reply(1);
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      break;
 4be:	08 c1       	rjmp	.+528    	; 0x6d0 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 4c0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <twi_masterBufferIndex>
 4c4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twi_masterBufferLength>
 4c8:	98 17       	cp	r25, r24
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 4cc:	8b eb       	ldi	r24, 0xBB	; 187
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <twi_masterBufferIndex>
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	32 0f       	add	r19, r18
 4d8:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <twi_masterBufferIndex>
 4dc:	22 2f       	mov	r18, r18
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	28 5f       	subi	r18, 0xF8	; 248
 4e2:	3e 4f       	sbci	r19, 0xFE	; 254
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
        twowire_reply(1);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
 4f2:	ee c0       	rjmp	.+476    	; 0x6d0 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twowire_reply(1);
      }else{
	if (twi_sendStop)
 4f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_sendStop>
 4f8:	88 23       	and	r24, r24
 4fa:	19 f0       	breq	.+6      	; 0x502 <__vector_24+0xb8>
          twowire_stop();
 4fc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <twowire_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
 500:	e7 c0       	rjmp	.+462    	; 0x6d0 <__vector_24+0x286>
        twowire_reply(1);
      }else{
	if (twi_sendStop)
          twowire_stop();
	else {
	  twi_inRepStart = TRUE;	// we're gonna send the START
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 508:	8c eb       	ldi	r24, 0xBC	; 188
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	24 ea       	ldi	r18, 0xA4	; 164
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
 512:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
      }
      break;
 516:	dc c0       	rjmp	.+440    	; 0x6d0 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_error>
      twowire_stop();
 51e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <twowire_stop>
      break;
 522:	d6 c0       	rjmp	.+428    	; 0x6d0 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_error>
      twowire_stop();
 52a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <twowire_stop>
      break;
 52e:	d0 c0       	rjmp	.+416    	; 0x6d0 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 530:	88 e3       	ldi	r24, 0x38	; 56
 532:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_error>
      twowire_releaseBus();
 536:	0e 94 16 02 	call	0x42c	; 0x42c <twowire_releaseBus>
      break;
 53a:	ca c0       	rjmp	.+404    	; 0x6d0 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 53c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <twi_masterBufferIndex>
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	98 0f       	add	r25, r24
 544:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <twi_masterBufferIndex>
 548:	88 2f       	mov	r24, r24
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	2b eb       	ldi	r18, 0xBB	; 187
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	f9 01       	movw	r30, r18
 552:	20 81       	ld	r18, Z
 554:	88 5f       	subi	r24, 0xF8	; 248
 556:	9e 4f       	sbci	r25, 0xFE	; 254
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 55c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <twi_masterBufferIndex>
 560:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twi_masterBufferLength>
 564:	98 17       	cp	r25, r24
 566:	20 f4       	brcc	.+8      	; 0x570 <__vector_24+0x126>
        twowire_reply(1);
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      }else{
        twowire_reply(0);
      }
      break;
 56e:	b0 c0       	rjmp	.+352    	; 0x6d0 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twowire_reply(1);
      }else{
        twowire_reply(0);
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      }
      break;
 576:	ac c0       	rjmp	.+344    	; 0x6d0 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 578:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <twi_masterBufferIndex>
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	98 0f       	add	r25, r24
 580:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <twi_masterBufferIndex>
 584:	88 2f       	mov	r24, r24
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	2b eb       	ldi	r18, 0xBB	; 187
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	20 81       	ld	r18, Z
 590:	88 5f       	subi	r24, 0xF8	; 248
 592:	9e 4f       	sbci	r25, 0xFE	; 254
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
	if (twi_sendStop)
 598:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_sendStop>
 59c:	88 23       	and	r24, r24
 59e:	19 f0       	breq	.+6      	; 0x5a6 <__vector_24+0x15c>
          twowire_stop();
 5a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <twowire_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
 5a4:	95 c0       	rjmp	.+298    	; 0x6d0 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twowire_stop();
	else {
	  twi_inRepStart = TRUE;	// we're gonna send the START
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 5ac:	8c eb       	ldi	r24, 0xBC	; 188
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	24 ea       	ldi	r18, 0xA4	; 164
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
 5b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}    
	break;
 5ba:	8a c0       	rjmp	.+276    	; 0x6d0 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twowire_stop();
 5bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <twowire_stop>
      break;
 5c0:	87 c0       	rjmp	.+270    	; 0x6d0 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 5c8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <twi_rxBufferIndex>
      twowire_reply(1);
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      break;
 5d2:	7e c0       	rjmp	.+252    	; 0x6d0 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 5d4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_rxBufferIndex>
 5d8:	80 32       	cpi	r24, 0x20	; 32
 5da:	a0 f4       	brcc	.+40     	; 0x604 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 5dc:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_rxBufferIndex>
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	98 0f       	add	r25, r24
 5e4:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <twi_rxBufferIndex>
 5e8:	88 2f       	mov	r24, r24
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	2b eb       	ldi	r18, 0xBB	; 187
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	f9 01       	movw	r30, r18
 5f2:	20 81       	ld	r18, Z
 5f4:	84 5b       	subi	r24, 0xB4	; 180
 5f6:	9e 4f       	sbci	r25, 0xFE	; 254
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18
        twowire_reply(1);
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      }else{
        // otherwise nack
        twowire_reply(0);
      }
      break;
 602:	66 c0       	rjmp	.+204    	; 0x6d0 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twowire_reply(1);
      }else{
        // otherwise nack
        twowire_reply(0);
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      }
      break;
 60a:	62 c0       	rjmp	.+196    	; 0x6d0 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twowire_releaseBus();
 60c:	0e 94 16 02 	call	0x42c	; 0x42c <twowire_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 610:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_rxBufferIndex>
 614:	80 32       	cpi	r24, 0x20	; 32
 616:	40 f4       	brcc	.+16     	; 0x628 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 618:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_rxBufferIndex>
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	84 5b       	subi	r24, 0xB4	; 180
 622:	9e 4f       	sbci	r25, 0xFE	; 254
 624:	fc 01       	movw	r30, r24
 626:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twowire_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 628:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <twowire_onSlaveReceive>
 62c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <twowire_onSlaveReceive+0x1>
 630:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_rxBufferIndex>
 634:	88 2f       	mov	r24, r24
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	bc 01       	movw	r22, r24
 63a:	8c e4       	ldi	r24, 0x4C	; 76
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	f9 01       	movw	r30, r18
 640:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 642:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <twi_rxBufferIndex>
      break;
 646:	44 c0       	rjmp	.+136    	; 0x6d0 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twowire_reply(0);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      break;
 64e:	40 c0       	rjmp	.+128    	; 0x6d0 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 650:	84 e0       	ldi	r24, 0x04	; 4
 652:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 656:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 65a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twowire_onSlaveTransmit();
 65e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <twowire_onSlaveTransmit>
 662:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <twowire_onSlaveTransmit+0x1>
 666:	fc 01       	movw	r30, r24
 668:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 66a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <twi_txBufferLength>
 66e:	88 23       	and	r24, r24
 670:	29 f4       	brne	.+10     	; 0x67c <__vector_24+0x232>
        twi_txBufferLength = TRUE;
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 678:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 67c:	8b eb       	ldi	r24, 0xBB	; 187
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <twi_txBufferIndex>
 684:	31 e0       	ldi	r19, 0x01	; 1
 686:	32 0f       	add	r19, r18
 688:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <twi_txBufferIndex>
 68c:	22 2f       	mov	r18, r18
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	26 5d       	subi	r18, 0xD6	; 214
 692:	3e 4f       	sbci	r19, 0xFE	; 254
 694:	f9 01       	movw	r30, r18
 696:	20 81       	ld	r18, Z
 698:	fc 01       	movw	r30, r24
 69a:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 69c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <twi_txBufferIndex>
 6a0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <twi_txBufferLength>
 6a4:	98 17       	cp	r25, r24
 6a6:	20 f4       	brcc	.+8      	; 0x6b0 <__vector_24+0x266>
        twowire_reply(1);
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      }else{
        twowire_reply(0);
      }
      break;
 6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twowire_reply(1);
      }else{
        twowire_reply(0);
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      }
      break;
 6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twowire_reply(1);
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <twowire_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
 6be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
      break;
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 6c4:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_error>
      twowire_stop();
 6c8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <twowire_stop>
      break;
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
 6ce:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twowire_stop();
      break;
  }
}
 6d0:	00 00       	nop
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	bf 91       	pop	r27
 6dc:	af 91       	pop	r26
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	7f 91       	pop	r23
 6e4:	6f 91       	pop	r22
 6e6:	5f 91       	pop	r21
 6e8:	4f 91       	pop	r20
 6ea:	3f 91       	pop	r19
 6ec:	2f 91       	pop	r18
 6ee:	0f 90       	pop	r0
 6f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <_Z12SSD1306_initv>:
// prototypes
void SSD1306_command(uint8_t data);
void SSD1306_InitSequence();

void SSD1306_init() 
{
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
	// enable internal pullups
	PORTC |= (1<<PORTC5) | (1<<PORTC4);
 702:	88 e2       	ldi	r24, 0x28	; 40
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	28 e2       	ldi	r18, 0x28	; 40
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	f9 01       	movw	r30, r18
 70c:	20 81       	ld	r18, Z
 70e:	20 63       	ori	r18, 0x30	; 48
 710:	fc 01       	movw	r30, r24
 712:	20 83       	st	Z, r18

	// set the TWI prescaler /1
	
	TWSR =0;
 714:	89 eb       	ldi	r24, 0xB9	; 185
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	fc 01       	movw	r30, r24
 71a:	10 82       	st	Z, r1

	// set the TWI freq
	TWBR = ((F_CPU / 100000L) - 16) / 2;
 71c:	88 eb       	ldi	r24, 0xB8	; 184
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	28 e4       	ldi	r18, 0x48	; 72
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
	
	// enable TWI interface with acknowledgments and interrupts
	TWCR |= (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
 726:	8c eb       	ldi	r24, 0xBC	; 188
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	2c eb       	ldi	r18, 0xBC	; 188
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	f9 01       	movw	r30, r18
 730:	20 81       	ld	r18, Z
 732:	25 64       	ori	r18, 0x45	; 69
 734:	fc 01       	movw	r30, r24
 736:	20 83       	st	Z, r18
	
	SSD1306_InitSequence();
 738:	0e 94 a2 03 	call	0x744	; 0x744 <_Z20SSD1306_InitSequencev>
}
 73c:	00 00       	nop
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	08 95       	ret

00000744 <_Z20SSD1306_InitSequencev>:

void SSD1306_InitSequence() 
{
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
	// Init sequence
	SSD1306_command(0xAE);                    // display off
 74c:	8e ea       	ldi	r24, 0xAE	; 174
 74e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0xD5);            // display clock prescaler
 752:	85 ed       	ldi	r24, 0xD5	; 213
 754:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x80);                                  // the suggested ratio 0x80
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

	SSD1306_command(0xA8);                  // enable multiplex
 75e:	88 ea       	ldi	r24, 0xA8	; 168
 760:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(3 - 1);					// oled height = 32
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

	SSD1306_command(0xD3);              // display offset
 76a:	83 ed       	ldi	r24, 0xD3	; 211
 76c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x0);                                   // no offset
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x40 | 0x0);            // startline #0
 776:	80 e4       	ldi	r24, 0x40	; 64
 778:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x8D);                    // chargepump
 77c:	8d e8       	ldi	r24, 0x8D	; 141
 77e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	
	SSD1306_command(0x14);					// SWITCHCAPVCC 
 782:	84 e1       	ldi	r24, 0x14	; 20
 784:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x20);                    // SSD1306_MEMORYMODE
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x00);                                  // 0x0 act like ks0108
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0xA0 | 0x1);				//SSD1306_SEGREMAP
 794:	81 ea       	ldi	r24, 0xA1	; 161
 796:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0xC8);							//SSD1306_COMSCANDEC
 79a:	88 ec       	ldi	r24, 0xC8	; 200
 79c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

	SSD1306_command(0xDA);                    // SSD1306_SETCOMPINS
 7a0:	8a ed       	ldi	r24, 0xDA	; 218
 7a2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x02);
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x81);                   // SSD1306_SETCONTRAST
 7ac:	81 e8       	ldi	r24, 0x81	; 129
 7ae:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x8F);
 7b2:	8f e8       	ldi	r24, 0x8F	; 143
 7b4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

	SSD1306_command(0xd9);                  // SSD1306_SETPRECHARGE
 7b8:	89 ed       	ldi	r24, 0xD9	; 217
 7ba:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	
	SSD1306_command(0xF1);
 7be:	81 ef       	ldi	r24, 0xF1	; 241
 7c0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0xDB);                 //SSD1306_SETVCOMDETECT
 7c4:	8b ed       	ldi	r24, 0xDB	; 219
 7c6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0x40);
 7ca:	80 e4       	ldi	r24, 0x40	; 64
 7cc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0xA4);           // SSD1306_DISPLAYALLON_RESUME
 7d0:	84 ea       	ldi	r24, 0xA4	; 164
 7d2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>
	SSD1306_command(0xA6);                 // SSD1306_NORMALDISPLAY
 7d6:	86 ea       	ldi	r24, 0xA6	; 166
 7d8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

	SSD1306_command(0x2E);				//SSD1306_DEACTIVATE_SCROLL
 7dc:	8e e2       	ldi	r24, 0x2E	; 46
 7de:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

	SSD1306_command(0xAF);//--turn on oled panel
 7e2:	8f ea       	ldi	r24, 0xAF	; 175
 7e4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z15SSD1306_commandh>

}
 7e8:	00 00       	nop
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	08 95       	ret

000007f0 <_Z15SSD1306_commandh>:

void SSD1306_command(uint8_t data) 
{
 7f0:	0f 93       	push	r16
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <_Z15SSD1306_commandh+0x8>
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ret = twowire_writeTo(SSD1306, &data, 32, FALSE, true);
 7fe:	ce 01       	movw	r24, r28
 800:	02 96       	adiw	r24, 0x02	; 2
 802:	01 e0       	ldi	r16, 0x01	; 1
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	40 e2       	ldi	r20, 0x20	; 32
 808:	bc 01       	movw	r22, r24
 80a:	8c e3       	ldi	r24, 0x3C	; 60
 80c:	0e 94 4c 01 	call	0x298	; 0x298 <twowire_writeTo>
 810:	89 83       	std	Y+1, r24	; 0x01
}
 812:	00 00       	nop
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <main>:

// controls the mode behavior (sweep/normal)


int main(void)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
	SSD1306_init();
 828:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z12SSD1306_initv>
	//Timer1.initialize(clkspeed);
	//Timer1.attachInterrupt(doTimer1Int);
	
    /* Replace with your application code */
    while (1) 
 82c:	ff cf       	rjmp	.-2      	; 0x82c <main+0xc>

0000082e <__tablejump2__>:
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	05 90       	lpm	r0, Z+
 834:	f4 91       	lpm	r31, Z
 836:	e0 2d       	mov	r30, r0
 838:	09 94       	ijmp

0000083a <_exit>:
 83a:	f8 94       	cli

0000083c <__stop_program>:
 83c:	ff cf       	rjmp	.-2      	; 0x83c <__stop_program>
